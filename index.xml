<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/</link>
    <description>Recent content on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modernizing Force</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/09/05/Modernizing-Force/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/09/05/Modernizing-Force/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/artsy/force&#34;&gt;Force&lt;/a&gt; is Artsy&amp;rsquo;s main website, &lt;a href=&#34;https://www.artsy.net&#34;&gt;artsy.net&lt;/a&gt;. In the three years since it was &lt;a href=&#34;http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/&#34;&gt;open-sourced&lt;/a&gt;, it has provided a solid foundation to build features on top of without a lot of the costs associated with growth. It is an early example of Isomorphic (&amp;ldquo;universal&amp;rdquo;) JavaScript, built on top of Express, Backbone, CoffeeScript, Stylus and Jade. It is also highly modular, adopting patterns laid down by its parent project,  &lt;a href=&#34;https://github.com/artsy/ezel&#34;&gt;Ezel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When first developed these technologies made a lot of sense; CoffeeScript fixed many of the problems with JavaScript pre-ES6, and Jade / Stylus made working with HTML / CSS much more elegant. As time progressed and new technologies became a thing these solutions starting feeling more burdensome to continue building features with and many of our developers longed to start using next-generation tools like React.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Peril to the Artsy Org</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/09/04/Introducing-Peril/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/09/04/Introducing-Peril/</guid>
      <description>&lt;p&gt;Once Danger Ruby was stable enough for everyday use in 2015, it became obvious that running Danger on CI was both a
positive and a negative. On the positive side, Danger has access to all artifacts created during testing - and on the negative
side it takes a long time to get feedback. It was obvious that Danger could &lt;a href=&#34;https://github.com/danger/danger/issues/42&#34;&gt;run on a server&lt;/a&gt;, but it was a big unknown what that could look like.&lt;/p&gt;

&lt;p&gt;Eventually, &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/06/30/danger-one-oh-again/&#34;&gt;I came to the conclusion&lt;/a&gt; that we would need a JavaScript replacement of Danger - and so I applied
constraints to Danger JS that made a server-side version of Danger a possibility. It was a stroke of luck that around the
time Danger JS became usable for day to day usage, that GitHub introduced &lt;a href=&#34;https://developer.github.com/changes/2016-09-14-Integrations-Early-Access/&#34;&gt;GitHub Apps&lt;/a&gt; - so I started work on Peril. Peril is server-side Danger. The rest of this post talks about how we use it Artsy today, how you can use it yourself and where it&amp;rsquo;s heading.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Art &#43; Feminism and Artsy Wikipedia/Wikidata Editathon</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/08/31/Editathon/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/08/31/Editathon/</guid>
      <description>&lt;p&gt;Artsy has always had a focus on Art meets Science, and we &lt;a href=&#34;https://www.meetup.com/CocoaPods-NYC/messages/boards/thread/50940969&#34;&gt;hosted a meet-up in July&lt;/a&gt; that really hits on both. We had a collection of Artsy Staff, members of &lt;a href=&#34;http://www.artandfeminism.org&#34;&gt;Art + Feminism&lt;/a&gt; NYC, the &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/08/10/peer-lab/&#34;&gt;CocoaPods Peer Lab&lt;/a&gt;, &lt;a href=&#34;http://www.artspracticum.org&#34;&gt;New York Arts Practicum&lt;/a&gt; and volunteers from &lt;a href=&#34;https://nyc.wikimedia.org/&#34;&gt;Wikimedia NYC&lt;/a&gt; all helping out.&lt;/p&gt;

&lt;p&gt;We came with two aims:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help anyone interested in contributing to Wikipedia get started.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://github.com/artsy/the-art-genome-project&#34;&gt;The Art Genome Project&lt;/a&gt;(TAGP) to improve Wikidata entries for women Artists.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I helped out with the second part, and the rest of this post will be about the lessons learned during this &lt;a href=&#34;https://en.wikipedia.org/wiki/Edit-a-thon&#34;&gt;editathon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making Artsy Editorial Accessible</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/08/29/Making-Artsy-Editorial-Accessible/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/08/29/Making-Artsy-Editorial-Accessible/</guid>
      <description>&lt;p&gt;During Artsy&amp;rsquo;s recent 2017 Hackathon we tackled making all of our editorial content &lt;a href=&#34;https://en.wikipedia.org/wiki/Accessibility&#34;&gt;accessible&lt;/a&gt;. The idea was hatched at  Berlin JSConf this spring, where &lt;a href=&#34;https://youtu.be/H4FzW9oFObs&#34;&gt;Laura Carvajal gave a talk&lt;/a&gt; following the &lt;em&gt;Financial Times&lt;/em&gt;&amp;rsquo; experience implementing better accessibility requirements, and how they built these considerations into their testing process.&lt;/p&gt;

&lt;p&gt;What does accessibility mean in a browser? Generally the term refers to supporting the wide range of assistive technologies for users with vision or motor impairments. These include screen readers, as well as mouseless navigation using a keyboard, eye tracking and other devices. Interestingly these technologies are implemented at the OS level rather than the browser itself. Mac&amp;rsquo;s OS includes a built in screen-reader, and &lt;a href=&#34;http://www.freedomscientific.com/Products/Blindness/JAWS&#34;&gt;JAWS&lt;/a&gt; is the most popular application in this vein. It is also notable that browsers do not track users who employ assistive tools.&lt;/p&gt;

&lt;p&gt;Two users on &lt;a href=&#34;http://webaim.org/discussion/mail_thread?thread=6326&#34;&gt;WebAIM&amp;rsquo;s forum&lt;/a&gt; excellently present the case for accessibility as a developer&amp;rsquo;s responsibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Users may be highly resistant to having their disabilities identified as they go throughout the web. Most persons with disabilities would really just rather that &lt;em&gt;the Web just work&lt;/em&gt; for them.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Looking at accessibility as a way to serve a specific population is missing the point that accessibility is about inclusion of all people.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A central tenant of Artsy&amp;rsquo;s mission is to &amp;lsquo;make art as accessible as music&amp;rsquo;. By expanding accessibility for the visually and motor impaired to writing on art and culture, this projects allows us to follow through on this statement in a very literal way. Furthermore, there&amp;rsquo;s no reason to ignore this audience; accommodating use of assistive technologies is an ethically responsible thing to do.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploying your app on a weekly basis via fastlane &#43; Travis CI</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/31/fastlane-travis-weekly-deploys/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/31/fastlane-travis-weekly-deploys/</guid>
      <description>&lt;p&gt;We have a few apps now, but one of them isn&amp;rsquo;t really used by anyone other than developers. This is &lt;a href=&#34;https://github.com/artsy/emission/tree/master/Example&#34;&gt;our React Native host app&lt;/a&gt;. We built our React Native components &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/08/24/On-Emission/&#34;&gt;as a library&lt;/a&gt; to be consumed by our other apps. Our development environment for these components is a unique app that acts as a host for the React Native components. It&amp;rsquo;s effectively a long tableview.&lt;/p&gt;

&lt;p&gt;This app is often updated for developers, but never deployed to beta users inside Artsy. So I automated it. Using Travis CI and fastlane. This post covers how I got that set up.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Artsy API Ready for Production Non-Commercial Use</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/23/api-open-non-commercial/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/23/api-open-non-commercial/</guid>
      <description>About 3 years ago, dB. announced that Artsy had a public API.
 The Artsy API currently provides access to images of historic artwork and related information on artsy.net for educational and other non-commercial purposes. You can try it for playing, testing, and learning, but not yet for production. The scope of the API will expand in the future as it gains some traction.
 We&amp;rsquo;ve wrapped up some legal work around the developer API terms and services, the PR is here and I&amp;rsquo;m happy to announce that the API is ready for non-commercial production use.</description>
    </item>
    
    <item>
      <title>Using GitHub Issues for Blog Comments</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/15/Comments-are-on/</link>
      <pubDate>Sat, 15 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/15/Comments-are-on/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve worked on a few large-scale OSS projects, and I believe that people find it easier to just leave a comment and rely on a contributor to explain a problem rather than consulting the documentation. I consider doing everything you can to make people find their own answers a strong part of &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/07/03/handling-big-projects/&#34;&gt;defensive open source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the posts I write, I have an even lower tolerance for comments. For example, I added the ability to turn off comments per-post and haven&amp;rsquo;t allowed comments on any posts I&amp;rsquo;ve written here. A lot of transitory discussion around an article happens on twitter via &lt;a href=&#34;https://twitter.com/ArtsyOpenSource/&#34;&gt;@ArtsyOpenSource&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m willing to give it another shot though, and so I got around to creating a simple system for allowing opt-in comments on posts using GitHub Issues. The rest of this post will be about how you can do it also, and a bit about why I think GitHub Issues are a happy medium for the comments.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to React Native for an iOS Developer</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/06/React-Native-for-iOS-devs/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/06/React-Native-for-iOS-devs/</guid>
      <description>&lt;p&gt;React Native is a new native library that vastly changes the way in which you can create applications. The majority of the information and tutorials on the subject come from the angle of &lt;em&gt;&amp;ldquo;you are a web developer, and want to do native&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This makes sense, given that the size of the JavaScript/web audience is much bigger than native developers, and far more open in the idea of writing apps using JavaScript. For web developers it opens a new creative space to work, however for native developers it provides a way to work with different tools on the same problem. Considering that most developers with a few years on the platform will be comfortable with the Xcode toolset, recommending a change this drastic is a tough sell.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been using React Native now for about a year and a half, and have started to slow down on sweeping changes inside the codebase. This is great because it means we&amp;rsquo;re spending less time trying to get things to work, and more time building on top of a solid foundations. Now that we&amp;rsquo;re settled, it&amp;rsquo;s time to start deeply understanding what happens with React Native.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like cover a lot of the common questions we get asked about from the perspective of native developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is React Native?&lt;/li&gt;
&lt;li&gt;How do you use React Native?&lt;/li&gt;
&lt;li&gt;When is React Native a good technology choice?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article covers an awful lot, so free up at least 45 minutes, make a tea and then come back to this on your computer. It&amp;rsquo;s worth your time if you&amp;rsquo;re interested in all the hype around React Native.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Danger</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/06/30/danger-one-oh-again/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/06/30/danger-one-oh-again/</guid>
      <description>&lt;p&gt;Danger came out of two needs. One from the needs of a growing dev team working together full-time, and the other from the needs of a completely asymmetric large Open Source project.&lt;/p&gt;

&lt;p&gt;A work environment dev team is a complex place. You naturally grow, and to grow safely you add process. Process is a mixed bag, it&amp;rsquo;s a net benefit at the trade-off of individual&amp;rsquo;s time vs team cohesion. You want to grow your team guided by smart applications of process.&lt;/p&gt;

&lt;p&gt;On the other hand, working on a large open source project, it&amp;rsquo;s easy to feel overwhelmed at the amount of work that needs to get done on a daily basis. The growth of your OSS team probably doesn&amp;rsquo;t tie to the amount of work that needs to be done. Especially if you&amp;rsquo;re like me, and you don&amp;rsquo;t want to be maintaining OSS as a 2nd full-time job.&lt;/p&gt;

&lt;p&gt;So what do you do? Well in a work environment you don&amp;rsquo;t really have a choice, as a team you hold each other to the rules that you set. In OSS, you sacrifice your spare time or you can find time at work, you could stop or you could burn out.&lt;/p&gt;

&lt;p&gt;And this is the environment in which the idea of Danger was incubated.&lt;/p&gt;

&lt;p&gt;Today mark version 1.0 of the second version of Danger. I&amp;rsquo;m going to cover what they are, how they continue to grow and what I see their trajectory as.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Encrypting ActiveRecord Fields Without Downtime.</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/05/30/database-encryption/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/05/30/database-encryption/</guid>
      <description>&lt;p&gt;After examining the data stored in one of our high-throughput systems, we realized it might include sensitive user data. To reduce the number of people that are technically able to access the data and reduce the risks associated with a potential data theft, we decided to encrypt certain database fields.&lt;/p&gt;

&lt;h1 id=&#34;our-goal&#34;&gt;Our Goal&lt;/h1&gt;

&lt;p&gt;Encrypt sensitive fields without any downtime.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Retrospectives</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/05/17/ios-retrospectives/</link>
      <pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/05/17/ios-retrospectives/</guid>
      <description>&lt;p&gt;In the 1990s, Harvard researcher Amy Edmonson made the unexpected discovery that in hospitals, &lt;a href=&#34;https://www.researchgate.net/publication/250959492_Learning_from_Mistakes_Is_Easier_Said_Than_Done_Group_and_Organizational_Influences_on_the_Detection_and_Correction_of_Human_Error&#34;&gt;higher performing teams reported making more mistakes&lt;/a&gt;. This is unexpected because one would assume that &lt;em&gt;better&lt;/em&gt; performers would make &lt;em&gt;fewer&lt;/em&gt; mistakes. In fact, the number of mistakes isn&amp;rsquo;t what distinguishes higher-performing teams, but rather it&amp;rsquo;s their attitude towards discussing – and learning from – their failures.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve spent the past eight months reading more about &lt;a href=&#34;https://en.wikipedia.org/wiki/Psychological_safety&#34;&gt;psychological safety&lt;/a&gt;: the shared belief that team members won&amp;rsquo;t be punished for speaking up with mistakes or questions or ideas. As a result, I&amp;rsquo;ve been trying to operationalize psychological safety on my own team, and part of that includes discussing and learning from our mistakes. At Artsy, we candidly discuss site outages or production bugs on the web, but haven&amp;rsquo;t historically been great at communicating about iOS problems.&lt;/p&gt;

&lt;p&gt;I want to start doing more retrospectives after things go wrong. So this week, I held my first iOS retrospective.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Relay Mutations</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/26/Relay-Mutations/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/26/Relay-Mutations/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hey there everyone, it took us two years to &lt;a href=&#34;https://github.com/artsy/metaphysics/pull/583&#34;&gt;make our&lt;/a&gt; GraphQL implementation support any mutations. We opted to keep it read-only for quite a long time because we use GraphQL to consolidate multiple APIs, but as we start new projects as GraphQL + databases then understanding mutations becomes much more important.&lt;/p&gt;

&lt;p&gt;Last month, I talked with the team at &lt;a href=&#34;https://www.graph.cool/&#34;&gt;Graph.cool&lt;/a&gt; about having them talk through Relay mutations comprehensively as a guest post on the Artsy Engineering blog. So, I&amp;rsquo;m really excited to introduce this great post on the topic by &lt;a href=&#34;http://twitter.com/nikolasburk&#34;&gt;Nikolas Burk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;ndash; Orta&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;the-magic-behind-relay-mutations&#34;&gt;The Magic behind Relay Mutations&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/relay/&#34;&gt;Relay&lt;/a&gt; is a powerful GraphQL client for React and React Native applications. It was open sourced by Facebook alongside GraphQL in 2015 and is a great tool for supporting you with managing your app&amp;rsquo;s data layer.&lt;/p&gt;

&lt;p&gt;In this post, we are going to explore how Relay mutations work by looking at a React Native app. The code can be found on &lt;a href=&#34;https://github.com/graphcool-examples/react-native-relay-pokedex-example&#34;&gt;GitHub&lt;/a&gt;. Our sample application is a simple &lt;em&gt;Pokedex&lt;/em&gt;, where users can manage their Pokemons.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/S21GfEo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: We&amp;rsquo;re going to assume a basic familiarity with GraphQL in this article. If you haven&amp;rsquo;t heard of GraphQL before, the &lt;a href=&#34;www.graphql.org&#34;&gt;documentation&lt;/a&gt; and the &lt;a href=&#34;http://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&#34;&gt;GraphQL for iOS Developers&lt;/a&gt; post are great places to start. If you&amp;rsquo;re interested in learning more about Relay in general, head over to &lt;a href=&#34;www.learnrelay.org&#34;&gt;Learn Relay&lt;/a&gt; for a comprehensive tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Calculating the Importance of an Artwork with Apache Spark</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/21/calculating-the-importance-of-an-artwork-with-apache-spark/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/21/calculating-the-importance-of-an-artwork-with-apache-spark/</guid>
      <description>&lt;p&gt;How important is a single artwork within the artist&amp;rsquo;s body of work? At Artsy we try to answer this question by extracting and scoring a set of features across roughly one million artworks. We call it an &lt;em&gt;iconicity&lt;/em&gt; score and we calculate that in Apache Spark for the entire dataset in under 5 minutes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Artsy&#39;s Technology Stack, 2017</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/14/artsy-technology-stack-2017/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/14/artsy-technology-stack-2017/</guid>
      <description>&lt;h1 id=&#34;history&#34;&gt;History&lt;/h1&gt;

&lt;p&gt;Artsy was &lt;a href=&#34;http://www.nytimes.com/2012/10/09/arts/design/artsy-is-mapping-the-world-of-art-on-the-web.html&#34;&gt;launched in 2012 as the &amp;ldquo;Art Genome Project&amp;rdquo;&lt;/a&gt; and grew exponentially ever since.&lt;/p&gt;

&lt;p&gt;By 2014 we had 230,000 works of art from 600 museums and institutions and launched our first business, a subscription service for commercial galleries, bringing over 80,000 works for sale and partnerships with 37 art fairs and a handful of benefit auctions. That year collectors from 82 countries inquired on over $5.5B of art.&lt;/p&gt;

&lt;p&gt;By 2015 we doubled our &amp;ldquo;for sale&amp;rdquo; inventory and aggregated 4,000 of the world&amp;rsquo;s leading galleries and 60 art fairs. We also launched two new businesses: commercial auctions and online media.&lt;/p&gt;

&lt;p&gt;Finally, in 2016 we, again, doubled our paid gallery network size to become the largest gallery network in the world and grew to become the most-read online art publication as our highly engaging editorial traffic ballooned 320%. We also launched a platform to bid in live auctions and a consignments service with all major auction houses.&lt;/p&gt;

&lt;h1 id=&#34;the-artsy-business-in-2017&#34;&gt;The Artsy Business in 2017&lt;/h1&gt;

&lt;p&gt;Artsy in 2017 is a very wide platform and it can be challenging to characterize simply. But when you boil it down to its essence, Artsy offers information and a marketplace. Our written content and fair coverage keep people informed about the art world, and the Art Genome powers our tools for exploration. Through our partnerships with the major player in the art market, galleries and auction houses, we offer our users a unified platform for buying and selling art.&lt;/p&gt;

&lt;p&gt;Internally we consider Artsy to have three businesses: &lt;em&gt;Auctions&lt;/em&gt;, &lt;em&gt;Content&lt;/em&gt; and &lt;em&gt;Listings&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Auctions&lt;/em&gt;: Auction houses and charities use Artsy as a sales channel for a commission because collectors want to discover and buy art in a single, central platform that excels at surfacing the art they want from a global market.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Content&lt;/em&gt;: Brands pay Artsy to reach the first art audience at scale by enabling evergreen content online and for offline engagement during art world events.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Listings&lt;/em&gt;: Galleries, Fairs and Institutions subscribe to Artsy for a fee because we bring a very large audience of art collectors and enthusiasts to their virtual doors.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Artsy team is now 166 employees across three offices in New York, Berlin and London. The Engineering organization is now 28 engineers, including 4 leads, 3 directors and a CTO. In this post, we&amp;rsquo;d like to comprehensively cover what, and how we make the technical and human sides of Artsy businesses work.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What is fastlane match?</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/05/what-is-fastlane-match/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/05/what-is-fastlane-match/</guid>
      <description>&lt;p&gt;Like anyone working on a non-trivial app in the iOS world who values their time, we use fastlane. &lt;a href=&#34;https://fastlane.tools&#34;&gt;fastlane&lt;/a&gt; is a suite
of tools that makes it much simpler to automate the very manual processes provided by Apple for deployment.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve adopted it in a relatively piece-meal manner in different projects, converting custom in-house code to something
provided by the gem.  Over time we found what pieces of the suite work for us. &lt;a href=&#34;https://github.com/artsy/energy/pull/266&#34;&gt;I&amp;rsquo;ve adopted another today&lt;/a&gt;: &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/match&#34;&gt;match&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;match automates setting up your iOS projects for code signing. One of the most arduous orthogonal tasks which every dev team learns and then forgets.&lt;/p&gt;

&lt;p&gt;In using match, we have given away a bit of control with code signing, and so this post is going to dig into; what we used
to have, and how it works now with match instead.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating Sitemaps with Apache Spark</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/02/generating-sitemaps-with-apache-spark/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/02/generating-sitemaps-with-apache-spark/</guid>
      <description>&lt;p&gt;While Artsy is the largest database of Contemporary Art online, it&amp;rsquo;s not exactly &amp;ldquo;big data&amp;rdquo;. To date, we have published over 500,000 artworks by more than 50,000 artists from over 4,000 galleries, 700 museums and institutions across over 40,000 shows. Our team has written thousands of articles, hosted hundreds of art fairs and a few dozen auctions. We have over 1,000 genes from the Art Genome project, too.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re just over a million web pages generated from this data on &lt;a href=&#34;https://www.artsy.net&#34;&gt;artsy.net&lt;/a&gt;. Generating sitemaps to submit to Google and other search engines for a million pages never seemed like a big deal. In this post I&amp;rsquo;ll describe 3 generations of code, including our most recent iteration that uses Apache Spark to generates static sitemap files in S3.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bringing Artsy to Google Assistant &#34;Home&#34; with Actions</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/03/04/bringing-artsy-to-google-actions-assistant-home/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/03/04/bringing-artsy-to-google-actions-assistant-home/</guid>
      <description>&lt;p&gt;Last month we &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/11/30/bringing-artsy-to-amazon-echo-alexa/&#34;&gt;brought Artsy to Amazon Alexa&lt;/a&gt;. In this post we&amp;rsquo;ll repeat that process and enable Artsy for Google Assistant, including Google Home.&lt;/p&gt;

&lt;p&gt;tl;dr You can try Artsy on your Google Home now, say &amp;ldquo;Ok Google, talk to Artsy&amp;rdquo; or see &lt;a href=&#34;http://assistant.artsy.net&#34;&gt;assistant.artsy.net&lt;/a&gt; for more info.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/i9EpF18xZqQ?ecver=1&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Workshop: React Native</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/06/React-Native-Workshop/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/06/React-Native-Workshop/</guid>
      <description>&lt;p&gt;Hey there, so you&amp;rsquo;ve decided to take a look at React Native? Well, last week I ran a workshop inside Artsy on &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt; and &lt;a href=&#34;https://facebook.github.io/relay/&#34;&gt;Relay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The video takes you from &lt;code&gt;react-native init&lt;/code&gt; to having the initial structure of a View Controller based on Relay with a real working API request. The video is about 45 minutes, with inline questions.&lt;/p&gt;

&lt;p&gt;If you wanted to just run through the notes, you could probably get it working in about 10 minutes.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=PYC47YKnK4k&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview, as well as all of the speakers notes to copy &amp;amp; paste from. There is also a full copy of the end-result at &lt;a href=&#34;https://github.com/orta/Relay-Artist-Example&#34;&gt;orta/Relay-Artist-Example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploration: Front-end JavaScript at Artsy in 2017</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/05/Front-end-JavaScript-at-Artsy-2017/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/05/Front-end-JavaScript-at-Artsy-2017/</guid>
      <description>&lt;p&gt;&lt;center&gt;
 &lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/js2017/js.svg&#34; style=&#34;width:300px;&#34;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The Artsy web team have been early adopters of node, and for the last 4 years the stable stack for the Artsy website has been predominantly been Node + CoffeeScript + Express + Backbone. In 2016 the mobile team &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/08/15/React-Native-at-Artsy/&#34;&gt;announced&lt;/a&gt; that it had moved to React Native, matching the web team as using JavaScript as the tools of their trade.&lt;/p&gt;

&lt;p&gt;Historically we have always had two separate dev teams for building Artsy.net and the corresponding iOS app, we call them (Art) Collector Web, and Collector Mobile. By the end of 2016 we decided to merge the teams. The merger has given way to a whole plethora of ideas about what contemporary JavaScript looks like and we&amp;rsquo;ve been experimenting with finding common, natural patterns between web and native.&lt;/p&gt;

&lt;p&gt;This post tries to encapsulate what we consider to be our consolidated stack for web/native Artsy in 2017.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&#34;#TypeScript&#34;&gt;TypeScript&lt;/a&gt;, &lt;a href=&#34;#GraphQL&#34;&gt;GraphQL&lt;/a&gt;, &lt;a href=&#34;#React...React.Native&#34;&gt;React/React Native&lt;/a&gt;, &lt;a href=&#34;#Relay&#34;&gt;Relay&lt;/a&gt;, &lt;a href=&#34;#Yarn&#34;&gt;Yarn&lt;/a&gt;, &lt;a href=&#34;#Jest&#34;&gt;Jest&lt;/a&gt;, and &lt;a href=&#34;#Visual.Studio.Code&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Retrospective: Swift at Artsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/05/Retrospective-Swift-at-Artsy/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/05/Retrospective-Swift-at-Artsy/</guid>
      <description>&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/swift-in-rn/swift-in-react-native.svg&#34; style=&#34;width:300px;&#34;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Swift became public in June 2014, by August we had started using it in Artsy. By October, we had &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;Swift in production&lt;/a&gt; channelling hundreds of thousands of dollars in auction bids.&lt;/p&gt;

&lt;p&gt;It is pretty obvious that Swift is the future of native development on Apple platforms. It was a no-brainer to then build an &lt;a href=&#34;https://github.com/artsy/emergence&#34;&gt;Apple TV app&lt;/a&gt; in Swift, integrated Swift-support into our key app Eigen and built non-trivial parts of that &lt;a href=&#34;http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/&#34;&gt;application in Swift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We first started experimenting with React Native in February 2016, and by August 2016, we announced that &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/08/15/React-Native-at-Artsy/&#34;&gt;Artsy moved to React Native&lt;/a&gt; effectively meaning new code would be in JavaScript from here onwards.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re regularly asked &lt;em&gt;why&lt;/em&gt; we moved, and it was touched on briefly in our announcement but I&amp;rsquo;d like to dig in to this and try to cover a lot of our decision process. So, if you&amp;rsquo;re into understanding why a small team of iOS developers with decades of native experience switched to JavaScript, read on.&lt;/p&gt;

&lt;p&gt;This post will cover: &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#What.are.Artsy.s.apps.&#34;&gt;What are Artsy&amp;rsquo;s apps?&lt;/a&gt;, Swifts &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Swift.s.upsides&#34;&gt;positives&lt;/a&gt; and &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Native.Downsides&#34;&gt;negatives&lt;/a&gt; for us, &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#React.Native&#34;&gt;React Native&lt;/a&gt;, and our &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#React.Native..one.year.later&#34;&gt;1-year summary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Animating the Year In Art</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/01/year-in-art/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/01/year-in-art/</guid>
      <description>&lt;p&gt;Artsy&amp;rsquo;s end of year features are an annual chance to walk through highlights of the year while also exploring front-end experiments. Created in collaboration with UBS and designed by Owen Dodd, &lt;a href=&#34;https://www.artsy.net/2016-year-in-art&#34;&gt;The Year In Art 2016&lt;/a&gt; presents an interactive timeline of singular moments in art and culture over the past year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2017-02-01-year-in-art/blog-eoy-headeranimation.gif&#34; alt=&#34;2017 Year In Art Animation Sample&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The piece opens with header animation, a series of transparent sliding boxes that presented a unique challenge. The finalized look is somewhat like a slinky- a stack of containers that are stretched open from the bottom, and compress again as they reach the top of the viewport, collapsing inward without ever crossing outside the screen.&lt;/p&gt;

&lt;p&gt;Achieving this effect required animating elements in response both to the size of other elements in the viewport, and to the client’s scroll interactions, all while sitting transparently over a video background.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mashing Data, Making Maps</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/01/25/mashing-maps/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/01/25/mashing-maps/</guid>
      <description>&lt;p&gt;We have a lot of really awesome data. Things worth exploring, and visualizing. We have an entire team devoted to it, &lt;a href=&#34;https://www.artsy.net/article/artsy-jobs-data-analyst&#34;&gt;looks like they&amp;rsquo;re hiring too&lt;/a&gt;. Not all of the output of the data comes from that team though, 2 years ago our Director of Product Engineering, &lt;a href=&#34;https://github.com/craigspaeth&#34;&gt;Craig Spaeth&lt;/a&gt; created a &lt;a href=&#34;https://github.com/artsy/partner-map&#34;&gt;static-site generator&lt;/a&gt; that mapped our partners around the globe. Last week I&amp;rsquo;ve been improving it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/mappings/preview.gif&#34; alt=&#34;An animated map of galleries&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Projects like these happen in most companies, quick hacks for one offs that are opened 2 years later by someone completely different to build on top of it. In trying to follow &lt;a href=&#34;http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule&#34;&gt;the Boy Scout rule&lt;/a&gt;, I&amp;rsquo;ve cleaned it up and consolidated some other similar projects. This post is a rough road-map of what making &lt;a href=&#34;https://github.com/artsy/partner-map/pull/3&#34;&gt;this PR&lt;/a&gt; looked like.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Xcode 8 Manual Codesigning with Fastlane</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/01/13/xcode-8-fastlane-codesigning/</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/01/13/xcode-8-fastlane-codesigning/</guid>
      <description>&lt;p&gt;New year, new deploy process! Late last year our mobile team completed the update to Swift 3 (and thus, the update to Xcode 8). The latest version of Apple&amp;rsquo;s IDE includes a lovely feature: automating provisioning profile management! (Note: not sarcasm, the feature is really nice. Check out the &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2016/401/&#34;&gt;WWDC video&lt;/a&gt; for an in-depth exploration.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2017-01-13-xcode-8-fastlane-codesigning/xcode-screenshot.png&#34; alt=&#34;Automatic code signing settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;However, when I went to make our first &lt;a href=&#34;http://artsy.github.io/blog/2015/12/15/Automating-Testflight-Deploys/&#34;&gt;automated deploy&lt;/a&gt; today, things didn&amp;rsquo;t work; I got a somewhat cryptic error about code signing.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Open Source FAQ for Engineers</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/01/04/OSS-FAQ/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/01/04/OSS-FAQ/</guid>
      <description>&lt;p&gt;We have a lot of Open Source code. For engineers without considerable experience in the open source realm, understanding some of the copyright issues around code ownership can be tricky. I&amp;rsquo;ve been working with our CTO &lt;a href=&#34;http://artsy.github.io/author/db/&#34;&gt;dB.&lt;/a&gt;, and our senior counsel &lt;a href=&#34;http://www.theartgorgeous.com/yayoi-shionoiri/&#34;&gt;Yayoi Shionoiri&lt;/a&gt; on creating an open-source FAQ for engineers.&lt;/p&gt;

&lt;h3 id=&#34;what-is-open-source&#34;&gt;What is Open Source?&lt;/h3&gt;

&lt;p&gt;Open Source code is code that can be freely examined, used, adapted, and shared by all through a license that sets forth these principles.  The only potential limitation that an Open Source license is likely to impose is that future copies of the code (whether in adapted or un-adapted form) be themselves licensed in a manner consistent with the original license.  At Artsy, we are committed to making our engineering work &lt;a href=&#34;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&#34;&gt;Open Source by default&lt;/a&gt;.  A list of our Open Source projects can be &lt;a href=&#34;http://artsy.github.io/open-source/&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bringing Artsy to Amazon Echo &#34;Alexa&#34;</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/11/24/bringing-artsy-to-amazon-echo-alexa/</link>
      <pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/11/24/bringing-artsy-to-amazon-echo-alexa/</guid>
      <description>&lt;p&gt;tl;dr You can try Artsy on your Amazon Echo now, say &amp;ldquo;Alexa, enable Artsy&amp;rdquo; or see &lt;a href=&#34;http://alexa.artsy.net&#34;&gt;alexa.artsy.net&lt;/a&gt; for more info.&lt;/p&gt;

&lt;p&gt;With its powerful automatic speech recognizer, accurate natural language understanding and outstanding text-to-speech capabilities, the Amazon Echo, nicknamed &amp;ldquo;Alexa&amp;rdquo;, always impressed me. While not the first in its category and introduced in late 2014, Alexa was the first consumer device in my home to truly enable the conversation between human and machine. It was stationary, always listening for a wake word, and clearly outperformed all previous attempts when it came to the ability to receive commands from the other side of the apartment.&lt;/p&gt;

&lt;p&gt;Alexa knows about the weather, but it doesn&amp;rsquo;t know much about art.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll dig a little inside the Alexa software platform and go over the technical details of bringing Artsy to the Echo, starting with a very simple &amp;ldquo;Ask Artsy about Norman Rockwell.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=zi3OubNiV9U&#39; target=&#39;_blank&#39;&gt;
&lt;iframe width=&#34;280&#34; height=&#34;280&#34; src=&#34;https://www.youtube.com/embed/zi3OubNiV9U&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the &lt;a href=&#34;http://alexa.amazon.com/spa/index.html#skills/dp/B01MYLJO1N&#34;&gt;Artsy skill in the Alexa app&lt;/a&gt; and &lt;a href=&#34;https://github.com/artsy/elderfield&#34;&gt;the complete Skill code on Github&lt;/a&gt;. And if you just want to learn to write a skill quickly, watch &lt;a href=&#34;https://www.youtube.com/watch?v=pzM4jv7k7Rg&#34;&gt;@dblock live-code a skill in this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript Glossary for 2017</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/11/14/JS-Glossary/</link>
      <pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/11/14/JS-Glossary/</guid>
      <description>&lt;p&gt;Getting to grips with the entire JavaScript ecosystem is a tough job when you&amp;rsquo;re getting started. Coming from the native mobile space, there&amp;rsquo;s a lot to learn. I&amp;rsquo;ve spent a few months immersed in the environment now, and can try summerize a lot of topics. This should make it easier to find more information when you need it. This post is semi-opinionated, with links for further reading so you can get a different perspective too.&lt;/p&gt;

&lt;p&gt;This post focus specifically on the JavaScript tooling around React Native projects, but is applicable to all JavaScript projects.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improving Page Speed with GraphQL</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/11/02/improving-page-speed-with-graphql/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/11/02/improving-page-speed-with-graphql/</guid>
      <description>&lt;p&gt;This past year, our team started using a GraphQL orchestration layer that connects various APIs with multiple front-end apps including &lt;a href=&#34;http://artsy.github.io/blog/2016/06/19/graphql-for-mobile&#34;&gt;iOS&lt;/a&gt;. It also handles caching and extracts some business logic out of our client apps. This helped us not only to be more consistent with the way we fetch data across apps, but also improved developer happiness and even bridged teams by having our web and iOS developers work with the same API layer. This got me thinking what other problems GraphQL could solve at Artsy.&lt;/p&gt;

&lt;p&gt;I work on the Publishing Team at Artsy, and we&amp;rsquo;ve recently been focused on page speed as a KPI. With so many ways of measuring speed, it&amp;rsquo;s a daunting task but for this post, I&amp;rsquo;ll focus on the way we handled things on the server-side and how integrating GraphQL on our API improved page speed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JSON Web Tokens: Artsy&#39;s Journey</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/26/jwt-artsy-journey/</link>
      <pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/26/jwt-artsy-journey/</guid>
      <description>&lt;p&gt;At Artsy we currently have thousands of client applications hitting our API and requesting authentication. When a user successfully authenticates through one of these clients, we want to embed basic user and application data in the resulting token rather than have to look up a session ID in the database on each request. For that we want to use JWT.&lt;/p&gt;

&lt;p&gt;JWT (JSON Web Token) is a self-contained, secure and standard way of transmitting data between applications and clients as JSON objects. Using JWTs lets us use a standardized technology to cut our authentication workflow down by one round-trip.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve recently switched our authentication flow to use &lt;a href=&#34;https://jwt.io&#34;&gt;JWT&lt;/a&gt;, and I&amp;rsquo;m going to cover what they are, how we&amp;rsquo;ve used them and how we&amp;rsquo;re handling the transition.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Accessing the app&#39;s Source Code from your Simulator</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/14/Accessing-the-Source-Code-from-your-Simulator/</link>
      <pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/14/Accessing-the-Source-Code-from-your-Simulator/</guid>
      <description>&lt;p&gt;In the last few months twice I&amp;rsquo;ve wanted to access the source code of our application. The first time I did it I came up with a pretty neat hack, but it wouldn&amp;rsquo;t really work in many places. The second time however, I &lt;a href=&#34;https://twitter.com/orta/status/786470282093625344&#34;&gt;asked the internet&lt;/a&gt;, and the &lt;a href=&#34;https://twitter.com/saniul/status/786470857635827712&#34;&gt;internet&lt;/a&gt; &lt;a href=&#34;https://twitter.com/0xced/status/786619335116750848&#34;&gt;replied&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TLDR: You can use your &lt;a href=&#34;https://github.com/artsy/emission/pull/350/commits/2a39c743bcaaf2e3b848ad60621198f40365fdd2&#34;&gt;project&amp;rsquo;s scheme&lt;/a&gt; to expose derived Xcode environment variables to your source code.&lt;/p&gt;

&lt;p&gt;The rest of the blog post is a little bit about &lt;em&gt;why&lt;/em&gt; I wanted to do that and what I did with it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Help! I&#39;m becoming Post-Junior</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/10/Help-Im-becoming-Post-Junior/</link>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/10/Help-Im-becoming-Post-Junior/</guid>
      <description>&lt;p&gt;I’ve lived in NYC for 2 years now. I’ve been around long enough that some of the people I helped when they started learning have begun to feel like they’re not “Juniors” anymore.&lt;/p&gt;

&lt;p&gt;They have begun feeling confident in their code, their responsibilities at the company and wanting to improve both. It&amp;rsquo;s a feeling that maybe, just maybe, &lt;a href=&#34;https://ashfurrow.com/blog/normalizing-struggle/&#34;&gt;you&amp;rsquo;re not struggling to stay afloat anymore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post aims to be technology-agnostic, and if you sit somewhere at 1.5 - 3 years of programming experience then you’ll probably get something out of it. On top of that,  I’ll give some pragmatic JS and iOS specific tips at the end.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Eidolon Deploy Process</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/08/eidolon-deploy-process/</link>
      <pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/08/eidolon-deploy-process/</guid>
      <description>&lt;p&gt;Since we &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;originally built&lt;/a&gt; Eidolon – an auction bidding kiosk app – the project has largely remained in maintenance mode. Eidolon was one of the first projects that we used automated deploys for, and the deploy process has remained largely unchanged. I believe this stability of the deploy process is a testament to how well the automated deploys have gone.&lt;/p&gt;

&lt;p&gt;This post is going to detail the mechanics of automated deploys for an enterprise-distributed iOS application, discuss lessons we learned and applied to other projects&amp;rsquo; deploy processes, and describe some of the changes we&amp;rsquo;d like to make. Our project is entirely open source, so you can check out any part of the code on your own or &lt;a href=&#34;https://github.com/artsy/eidolon/issues/new&#34;&gt;open an issue&lt;/a&gt; with questions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Professional Development at Artsy Engineering</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/09/22/professional-development-at-artsy-engineering/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/09/22/professional-development-at-artsy-engineering/</guid>
      <description>&lt;p&gt;In considering an offer to join us at Artsy, one of our newest incoming engineers asked me a great question: &lt;em&gt;How does the tech team do professional development?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As I thought about it, I began to realize that the answer is “a lot”! Most of our efforts evolved organically. Someone had an idea, and people rallied around it. I thought it would be useful to share, in case others are inspired by what&amp;rsquo;s caught on here. Here are some of the things we do.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dev Interviews: Maxim Cramer</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/09/16/Dev-Interview-Maxim-Cramer/</link>
      <pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/09/16/Dev-Interview-Maxim-Cramer/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m happy to introduce the next in the &lt;a href=&#34;http://artsy.github.io/series/dev-interviews/&#34;&gt;Dev Interviews&lt;/a&gt; series - &lt;a href=&#34;http://www.mennenia.com/&#34;&gt;Maxim Cramer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maxim has been at Artsy for 6 month, working on our mobile app Eigen. Our interview covers how being a remote developer, advice for people at a HQ working with remotes, her work with React Native and what the future holds for the Artsy mobile team.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=ftsBR_KqHcE&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a inline video.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Helping the Web Towards OSS by Default</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/09/06/Milestone-on-OSS-by-Default/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/09/06/Milestone-on-OSS-by-Default/</guid>
      <description>&lt;p&gt;The main Artsy.net website for the desktop, &lt;a href=&#34;https://github.com/artsy/force&#34;&gt;Force&lt;/a&gt;, was our first Artsy application to open its source code, &lt;a href=&#34;http://artsy.github.io/author/craig&#34;&gt;Craig&lt;/a&gt; and &lt;a href=&#34;http://artsy.github.io/author/brennan&#34;&gt;Brennan&lt;/a&gt; did it &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/&#34;&gt;back in 2014&lt;/a&gt;. Force&amp;rsquo;s public offering laid the groundwork for the iOS OSS projects to come afterwards: &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2014/11/13/eidolon-retrospective/&#34;&gt;Eidolon&lt;/a&gt;, &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/04/28/how-we-open-sourced-eigen/&#34;&gt;Eigen&lt;/a&gt;, &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/08/06/open-sourcing-energy/&#34;&gt;Energy&lt;/a&gt; and &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/11/05/Emergence-Code-Review/&#34;&gt;Emergence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Though Force wasn&amp;rsquo;t quite Open Source by Default, it represented a &lt;em&gt;really&lt;/em&gt; important step for  Artsy&amp;rsquo;s OSS perspective but was not the end goal. We were opening our source, but not opening our process.&lt;/p&gt;

&lt;p&gt;This month both &lt;a href=&#34;https://github.com/artsy/force&#34;&gt;Force&lt;/a&gt;, the desktop version of &lt;a href=&#34;https://www.artsy.net/&#34;&gt;Artsy.net&lt;/a&gt; and &lt;a href=&#34;https://github.com/artsy/microgravity&#34;&gt;Microgravity&lt;/a&gt;, the mobile version - moved to being built entirely in the open. Read on to find out how.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS Keyboard Shortcuts workshop video</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/31/Keyboard-Shortcuts-workshop/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/31/Keyboard-Shortcuts-workshop/</guid>
      <description>&lt;p&gt;Hey all, I was asked to talk internally about ways in which anyone can improve their day-to-day computer usage. For me, using keyboard shortcuts shows a greater level of control of your machine - and more importantly can be considerably faster.&lt;/p&gt;

&lt;p&gt;I have all of my notes, annotated with images inside a personal GitHub repo: &lt;a href=&#34;https://github.com/orta/keyboard_shortcuts&#34;&gt;orta/keyboard_shortcuts&lt;/a&gt;. We covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pressing menu items via keyboard&lt;/li&gt;
&lt;li&gt;Window Management&lt;/li&gt;
&lt;li&gt;Text Management, e.g. jumping between words etc.&lt;/li&gt;
&lt;li&gt;Searching for text&lt;/li&gt;
&lt;li&gt;Taking Screenshots&lt;/li&gt;
&lt;li&gt;Slack and Chrome&lt;/li&gt;
&lt;li&gt;Using a Window Manager and Clipboard History Manager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=1mIRCL_lGbg&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learn Swift at Artsy, Beginners Lesson Three</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/30/swift-at-artsy-beginners-lesson-three/</link>
      <pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/30/swift-at-artsy-beginners-lesson-three/</guid>
      <description>&lt;p&gt;And we&amp;rsquo;re back! With lesson three of the beginners&amp;rsquo; Swift-at-Artsy course. To recap, Orta and I &lt;a href=&#34;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&#34;&gt;led a course at Artsy&lt;/a&gt; to teach our colleagues Swift &lt;em&gt;last&lt;/em&gt; August, and we&amp;rsquo;re doing it again. I&amp;rsquo;m leading the stream for people who&amp;rsquo;ve never programmed before.&lt;/p&gt;

&lt;p&gt;Yesterday was lesson three and I have a &lt;a href=&#34;https://youtu.be/e2ErzD8ibG8&#34;&gt;screen recording&lt;/a&gt; of my walkthrough of &lt;a href=&#34;https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three&#34;&gt;the material&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On our implementation of React Native</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/24/On-Emission/</link>
      <pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/24/On-Emission/</guid>
      <description>&lt;p&gt;&lt;center&gt;
 &lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/emission/emission-logo-artsy.svg&#34; style=&#34;height:300px;&#34;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I arrived fashionably late to the &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/08/15/React-Native-at-Artsy/&#34;&gt;React Native party&lt;/a&gt; in Artsy. I had been a part of our &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/08/09/the-tech-behind-live-auction-integration/&#34;&gt;Auctions Team&lt;/a&gt;, where we worked in Swift with &lt;a href=&#34;https://cocoapods.org/pods/Interstellar&#34;&gt;some light-FRP&lt;/a&gt;. We were not affected by the 4 months of simultaneous work on moving to React Native, at all.&lt;/p&gt;

&lt;p&gt;It was a quiet revolution. I did not have to install &lt;code&gt;npm&lt;/code&gt;, I made zero changes to the code for auctions and the whole app&amp;rsquo;s infrastructure barely changed. Yet we moved to making all new code inside our 3 year old iOS app use React Native. What gives?&lt;/p&gt;

&lt;p&gt;Well, first up we weren&amp;rsquo;t planning a re-write, we don&amp;rsquo;t have that kind of luxury and the scope of our app is too big compared to the team working on it. Second, we reused existing dependency infrastructure to support JavaScript based apps. Read on to find out what that looks like.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learn Swift at Artsy, Beginners Lesson Two</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/23/swift-at-artsy-beginners-lesson-two/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/23/swift-at-artsy-beginners-lesson-two/</guid>
      <description>&lt;p&gt;And we&amp;rsquo;re back! With lesson two of the beginners&amp;rsquo; Swift-at-Artsy course. To recap, Orta and I &lt;a href=&#34;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&#34;&gt;led a course at Artsy&lt;/a&gt; to teach our colleagues Swift &lt;em&gt;last&lt;/em&gt; August, and we&amp;rsquo;re doing it again. I&amp;rsquo;m leading the stream for people who&amp;rsquo;ve never programmed before.&lt;/p&gt;

&lt;p&gt;Yesterday was lesson two and I have a &lt;a href=&#34;https://youtu.be/EBtzqx1YRBg&#34;&gt;screen recording&lt;/a&gt; of my walkthrough of &lt;a href=&#34;https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20Two&#34;&gt;the material&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learn Swift at Artsy, Beginners Lesson One</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/15/swift-at-artsy-beginners-lesson-one/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/15/swift-at-artsy-beginners-lesson-one/</guid>
      <description>&lt;p&gt;Last August, Orta and I &lt;a href=&#34;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&#34;&gt;led a course at Artsy&lt;/a&gt; to teach our colleagues Swift. There were two parallel groups of learners: a &amp;ldquo;beginners&amp;rdquo; group who had never coded before, and an &amp;ldquo;informed&amp;rdquo; group who already knew how to code. This year, we&amp;rsquo;re leading the course again with a slight twist: we&amp;rsquo;re repeating the course for absolute beginners, and we&amp;rsquo;re introduce a new course for anyone who completed last year&amp;rsquo;s beginner course.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re really excited both to help new colleagues take their first steps into programming, and to help returning colleagues continue their journey.&lt;/p&gt;

&lt;p&gt;Today was lesson one of the beginner group, and I have a &lt;a href=&#34;https://youtu.be/OLdSg0XpFqA&#34;&gt;screen recording&lt;/a&gt; of my walkthrough of &lt;a href=&#34;https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20One&#34;&gt;lesson one&amp;rsquo;s material&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Native at Artsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/15/React-Native-at-Artsy/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/15/React-Native-at-Artsy/</guid>
      <description>&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/react-native/artsy_react_logo.svg&#34; style=&#34;width:300px;&#34;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://github.com/artsy/eigen&#34;&gt;the Artsy iOS app&lt;/a&gt; grew larger, we started hitting pain
points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We want to support other future platforms such as Android without creating more teams.&lt;/li&gt;
&lt;li&gt;We want different business teams to work on the app without disrupting each other.&lt;/li&gt;
&lt;li&gt;We want our architecture to evolve in order to increase programmer efficiency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It took us &lt;a href=&#34;https://github.com/artsy/mobile/issues/22&#34;&gt;about a year&lt;/a&gt; to start resolving these issues.
Ideally, we wanted to find a solution to our architectural issues that would also improve the user
experience. Notably we wanted more efficient networking, due to mobile device constraints.&lt;/p&gt;

&lt;p&gt;It would have been an easy leap to start using Swift and, as a matter of fact, we do use Swift in parts of
our flagship application and entirely in &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;2 other apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, while Swift is a great language, it’s also just that: &lt;em&gt;another&lt;/em&gt; language. It does not do much in terms of new
paradigms that solved our architectural needs, it does not help in terms of cross-platform - as most of our code is
building views and thus very framework specific, and it did not really offer anything in terms of more efficient network
data fetching.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve seen that the web teams integrate React in their projects with really great results. We&amp;rsquo;ve been
&lt;a href=&#34;https://github.com/artsy/mobile/issues/22&#34;&gt;paying attention&lt;/a&gt; to React Native since it came out; the solutions provided
by the React ecosystem ticked all of our boxes.&lt;/p&gt;

&lt;p&gt;Six months ago we took the plunge, and last month we formalized that this is the direction we want to go.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using VS Code for JavaScript</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/15/vscode/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/15/vscode/</guid>
      <description>&lt;p&gt;&lt;center&gt;
 &lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/vscode/vscode_logo_artsy.svg&#34; style=&#34;width:300px;&#34;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m an old school TextMate user, who has also been using Xcode for the last decade. These two sit at a very opposite ends of an &amp;ldquo;editor&amp;rdquo; spectrum.&lt;/p&gt;

&lt;p&gt;TextMate is extremely bare bones at the core, but introduced the idea of bundles as plugins. Making it really easy for others to build their own plugins for their own contexts. Xcode on the other-hand includes a 3D scene editor, the best interface builder I&amp;rsquo;ve seen, super rich debugging tools and close to zero support for improving it yourself.&lt;/p&gt;

&lt;p&gt;As we agreed on moving to React Native, we needed to decide what the team should use for &lt;a href=&#34;https://github.com/artsy/emission/blob/master/docs/vscode.md&#34;&gt;working in that environment&lt;/a&gt;. After experimentation with many editors, we decided on Microsoft&amp;rsquo;s &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We wanted to keep a lot of the best features from Xcode, while working in a completely JavaScript environment. For example: debuggers, inline errors, auto-complete, symbol mapping and to ideally have them all inside a single editor.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dig into the principals of how Visual Studio Code works, what makes it a better option for us, and what parts of it really shine.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dev Interviews: Craig Spaeth</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/09/Dev-Interview-Craig-Spaeth/</link>
      <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/09/Dev-Interview-Craig-Spaeth/</guid>
      <description>&lt;p&gt;Hello everyone! Orta here, over the summer I&amp;rsquo;ve started a series of interviews with the entire development team at Artsy. They&amp;rsquo;re all on different topics, notably around technical and cultural issues. I&amp;rsquo;ve recorded a few of them already, and will be sporadically releasing them. I&amp;rsquo;m still getting the hang of editing and recording side of this, so give me some slack.&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;m pumped to introduce the first in the series - &lt;a href=&#34;http://craigspaeth.com/&#34;&gt;Craig Spaeth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Craig has been at Artsy for 6 years, moving from the first on-site developer to Director of Web. Our interview covered how Artsy&amp;rsquo;s development team has adapted over time to the changing demands of a growing company. When he joined, Artsy was 6 people, we&amp;rsquo;re now at ~145 people, ~20 developers and 3 businesses.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=-0WK1Ebis3M&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a inline video.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Tech Behind Live Auction Integration</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/09/the-tech-behind-live-auction-integration/</link>
      <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/09/the-tech-behind-live-auction-integration/</guid>
      <description>&lt;p&gt;In late June, the &lt;a href=&#34;https://www.artsy.net/auctions/&#34;&gt;Artsy auctions&lt;/a&gt; team launched our Live Auction Integration (LAI) product. It allows people to participate online in live sales held at auction houses &lt;a href=&#34;https://www.artsy.net/auction-partnerships&#34;&gt;that partner with Artsy&lt;/a&gt;. It was a big project, begun in December, involving both brand new software and extensive integration work with the rest of our systems. This is the first in what will be a series of blog posts discussing the engineering work we did to get a complex product from inception to launch in such a brief time window, with a go-live deadline set in stone weeks in advance. In this, I’ll dig into what we shipped on a high level, as well as some of the overarching technical decisions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handling Large OSS Projects Defensively</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/07/03/handling-big-projects/</link>
      <pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/07/03/handling-big-projects/</guid>
      <description>&lt;p&gt;I help maintain big OSS projects: from a third-party &lt;a href=&#34;https://cocoapods.org&#34;&gt;dependency manager&lt;/a&gt; used in most iOS apps (&lt;a href=&#34;https://github.com/CocoaPods/cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;), to the most popular Objective-C &lt;a href=&#34;http://cocoapods.org/pods/Specta&#34;&gt;testing framework&lt;/a&gt; and the most popular Swift &lt;a href=&#34;http://cocoapods.org/pods/Moya&#34;&gt;networking API client&lt;/a&gt;. I&amp;rsquo;ve been doing this for years.&lt;/p&gt;

&lt;p&gt;Projects with this much impact are big time-sinks. This time comes from ensuring infrastructure continues to work, support tickets need replies, new code needs reviewing and releases need coordinating.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2016-07-03-big-oss/danger_logo_black@2x.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Last September, almost a year ago, I started work on a new project, &lt;a href=&#34;https://github.com/danger/danger/&#34;&gt;Danger&lt;/a&gt;. Danger fixes a problem we were seeing in the Artsy mobile team around adding &amp;ldquo;&lt;a href=&#34;https://github.com/artsy/mobile/issues/31&#34;&gt;process&lt;/a&gt;&amp;rdquo; to our team.&lt;/p&gt;

&lt;p&gt;As a part of discussing Danger internally, I&amp;rsquo;ve referenced that building CocoaPods has greatly influenced Danger. This blog post is about the way I&amp;rsquo;ve built Danger, knowing fully well that I cannot afford the level of time to maintain it at the scale it may get to.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Spelunking: Injection for Xcode Plugin</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/29/code-spelunking-injection/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/29/code-spelunking-injection/</guid>
      <description>&lt;p&gt;It was only three months ago that I came to the conclusion of just how much time I had wasted &lt;a href=&#34;http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/&#34;&gt;on code compilation cycles&lt;/a&gt;, once I started to play with &lt;a href=&#34;https://github.com/johnno1962/injectionforxcode&#34;&gt;Injection for Xcode&lt;/a&gt;. I still feel guilt about the time I wasted. However, I&amp;rsquo;m trying to turn that into something constructive. In order to do that, I need to have a solid understanding of the fundamentals on how Injection For Xcode works.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ashfurrow.com/&#34;&gt;Ash&lt;/a&gt; says one of the best ways to &lt;a href=&#34;https://ashfurrow.com/blog/teaching-learning/&#34;&gt;learn is to teach&lt;/a&gt;. So I&amp;rsquo;m going to try take you through a guided tour of the code-base. You need some pretty reasonable Objective-C chops to get this, but anyone with an app or two under their belt should be able to &lt;a href=&#34;https://en.wikipedia.org/wiki/Grok&#34;&gt;grok&lt;/a&gt; it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Depedency Injection in Swift</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/27/dependency-injection-in-swift/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/27/dependency-injection-in-swift/</guid>
      <description>&lt;p&gt;Dependency Injection (DI) is a &lt;a href=&#34;http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html&#34;&gt;$25 word for a 5¢ idea&lt;/a&gt;, but it&amp;rsquo;s an idea that has become wholly foundation to how I write software. I want to take a look at some of the ways our team have been using DI in Swift.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift Type Aliases: Use Early and Often</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/24/typealias-for-great-good/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/24/typealias-for-great-good/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been so fun to watch the Swift developer community experiment with Swift and to experiment with what idiomatic Swift will look like. No one really knows the answer yet, but we&amp;rsquo;re starting to see some design patterns used more than others. We&amp;rsquo;re seeing some language features used in key ways that define idiomatic Swift, and other language features that are being mostly ignored.&lt;/p&gt;

&lt;p&gt;Regrettably, one of my favourite features of Swift has not enjoyed the meteoric rise in popularity I believe it deserves: &lt;code&gt;typealias&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL for iOS Developers</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/19/graphql-for-mobile/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/19/graphql-for-mobile/</guid>
      <description>&lt;p&gt;GraphQL is something you may have heard in passing, usually from the web team. It&amp;rsquo;s a Facebook API technology, that describes itself as a &lt;em&gt;A Data Query Language and Runtime&lt;/em&gt;. GraphQL is a &lt;a href=&#34;http://facebook.github.io/graphql/&#34;&gt;spec&lt;/a&gt;, and there are &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql#libraries&#34;&gt;multiple implementations&lt;/a&gt; of it. As mobile engineers, we can consider it an API, where the front-end team have as much control as the backend.&lt;/p&gt;

&lt;p&gt;This blog post covers our usage of GraphQL, and what I&amp;rsquo;ve learned in the last 3 months of using it in &lt;a href=&#34;https://github.com/artsy/eigen/&#34;&gt;Eigen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why does my team&#39;s Podfile.lock Podspec checksums change?</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/05/03/podspec-checksums/</link>
      <pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/05/03/podspec-checksums/</guid>
      <description>&lt;p&gt;We use CocoaPods, and &lt;a href=&#34;https://github.com/artsy/eigen/issues/418&#34;&gt;we don&amp;rsquo;t check in our Pods&lt;/a&gt; directory for one of our fastest moving apps, &lt;a href=&#34;https://github.com/artsy/eigen/&#34;&gt;Eigen&lt;/a&gt;. This sometimes can cause an &lt;a href=&#34;https://github.com/artsy/eigen/pull/1464&#34;&gt;interesting data churn&lt;/a&gt; inside the &lt;code&gt;Podfile.lock&lt;/code&gt; when developers have different sha checksums for their Pods. This is weird, what gives?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Paw with Per-Developer Settings</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/04/14/net-working-with-paw/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/04/14/net-working-with-paw/</guid>
      <description>&lt;p&gt;I am a big fan of developer tooling, as spending time upfront on improving your process can pay a lot of dividends over time. I want to talk about one in particular: &lt;a href=&#34;https://luckymarmot.com/paw&#34;&gt;Paw&lt;/a&gt;. Paw is a native HTTP client with a bunch of features. I want to cover one that means that we can now &lt;a href=&#34;https://github.com/artsy/energy/pull/192&#34;&gt;introduce&lt;/a&gt; &lt;code&gt;[AppName].paw&lt;/code&gt; files in our mobile projects, making it easy for us to discuss networking requests.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Xcode&#39;s Schemes to run a subset of your tests</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/04/06/Testing-Schemes/</link>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/04/06/Testing-Schemes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/artsy/eigen&#34;&gt;Eigen&lt;/a&gt; has hit the point where testing is a chore. This is a positive sign, the app has grown in terms of size, complexity, and number of developers considerably over the last 3 years. The test suite makes us feel comfortable making changes.&lt;/p&gt;

&lt;p&gt;On my fastest computer, we&amp;rsquo;re just under a minute - &lt;code&gt;Executed 1105 tests, with 1 failure (0 unexpected) in 43.221 (48.201) seconds&lt;/code&gt;  for the whole suite. I think I could probably live with 20 seconds max. So I studied how &lt;a href=&#34;https://www.jetbrains.com/objc/&#34;&gt;AppCode&lt;/a&gt; handles running tests, and this will be an illustrated guide as to how you can easily run the subset of tests in Xcode based on their techniques.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&#34;https://github.com/orta/life/issues/71&#34;&gt;have ideas&lt;/a&gt; on how to improve time for testing in general, based on &lt;a href=&#34;http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/&#34;&gt;Code Injection&lt;/a&gt;, but they aren&amp;rsquo;t fully fleshed out and I expect it to be time-intensive to pull off. Time I haven&amp;rsquo;t made yet.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Artsy&#39;s Engineering Organization Stack, 2016</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/28/artsy-engineering-organization-stack/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/28/artsy-engineering-organization-stack/</guid>
      <description>&lt;div style=&#34;max-width: 50%; text-align: center; float: right; padding: 0 0 10px 10px; line-height: 1;&#34;&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2016-03-28-artsy-engineering-organization-stack/stack.jpg&#34;&gt;&lt;br&gt;&lt;font size=&#34;2px&#34;&gt;&lt;em&gt;The Artsy Engineering Organization &#34;Stack&#34; in 2012&lt;br&gt;from &lt;a target=&#34;_blank&#34; href=&#34;http://code.dblock.org/2011/07/12/sitting-is-killing-you-move-to-new-york.html&#34;&gt;&#34;Sitting is Killing You? Move to New York&#34;&lt;/a&gt;&lt;/em&gt;&lt;/font&gt;&lt;/div&gt;

&lt;p&gt;Artsy has now grown past 140 team members and our Engineering organization is a nimble 25. We&amp;rsquo;ve recently performed a large organizational change (I highly recommend reading &lt;a href=&#34;https://www.artsy.net/article/robert-lenne-the-secret-s-to-company-re-orgs&#34;&gt;&amp;ldquo;The Secret(s) to Company Re-Orgs&amp;rdquo;&lt;/a&gt;), so this is a good time to describe our updated Engineering organization, starting from the top - Artsy as a company and business.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Public Speaking - Part 2: Where To Start?</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/14/public-speaking-part2-where-to-start/</link>
      <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/14/public-speaking-part2-where-to-start/</guid>
      <description>&lt;p&gt;So you’ve decided &lt;a href=&#34;http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/&#34;&gt;you’d like to give speaking a go&lt;/a&gt;, or perhaps you were always interested. By now you’re probably wondering where to start.&lt;/p&gt;

&lt;p&gt;There are various options depending on what you’re looking for. Would you prefer a smaller, intimate audience or would you like to reach far and wide? Is the topic of your choice suited for a quick talk or would you rather discuss it at length? Let’s have a look.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Public Speaking - Part 1: Is It For Me?</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/09/public-speaking-part1-is-it-for-me/</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/09/public-speaking-part1-is-it-for-me/</guid>
      <description>&lt;p&gt;At Artsy, sharing knowledge is heavily encouraged and so we write our code in the open, document using blog posts, and speak about our experiences. Many have &lt;a href=&#34;https://twitter.com/qnoid/status/702955785064677376&#34;&gt;bumped into us&lt;/a&gt; at various places around the world. And so I often get the question: “How did you get started? I’m interested in speaking too”.&lt;/p&gt;

&lt;p&gt;In the name of sharing experiences with others, I can’t encourage this enough. Unfortunately though, public speaking is still considered &lt;a href=&#34;https://www.washingtonpost.com/news/wonk/wp/2014/10/30/clowns-are-twice-as-scary-to-democrats-as-they-are-to-republicans/&#34;&gt;man’s biggest fear&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d like to share with you the benefits of public speaking, tips on how to get started, and how to give great presentations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Injection for Xcode</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/05/iOS-Code-Injection/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/05/iOS-Code-Injection/</guid>
      <description>&lt;p&gt;I have been writing code for roughly a decade. A large chunk of that time has been sitting waiting for my project to compile. It&amp;rsquo;s a nice excuse to &lt;a href=&#34;https://xkcd.com/303/&#34;&gt;practice sword fighting&lt;/a&gt; in the office, but really, deep down. It&amp;rsquo;s frustrating. It&amp;rsquo;s so easy to become &lt;a href=&#34;https://xkcd.com/356/&#34;&gt;nerd-sniped&lt;/a&gt; when you wait for a long time.&lt;/p&gt;

&lt;p&gt;As we integrate Swift into our projects, I&amp;rsquo;ve been seeing our compile times increase. So, I took some time to look at ways to improve this. The best option, so far, has been dynamic code injection via &lt;a href=&#34;https://github.com/johnno1962/injectionforxcode&#34;&gt;Injection Plugin for Xcode&lt;/a&gt;. In a gist: This means that we don&amp;rsquo;t recompile and re-launch, instead we inject new bits of code into a running application. This reduced the compile cycle on Eigen from 7 seconds to 1 second.&lt;/p&gt;

&lt;p&gt;I took some time over the weekend to try and put together a video showing how I used code injection on a trivial app to create a view controller in code. It covers the technique I&amp;rsquo;ve &lt;a href=&#34;https://github.com/artsy/eigen/pull/1236&#34;&gt;started using in Eigen&lt;/a&gt; and talks a little bit about how the pieces come together.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=uftvtmyZ8TM&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Being a Better Programmer When You&#39;re Actually Lazy.</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/02/Lazily-Automation/</link>
      <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/03/02/Lazily-Automation/</guid>
      <description>&lt;p&gt;I juggle a bunch of projects, both in Artsy and in the Open Source community. If you don&amp;rsquo;t work with me directly, you&amp;rsquo;d be mistaken for believing that I was an organized person. I&amp;rsquo;m pretty far from that, and &lt;a href=&#34;https://github.com/artsy/mobile/issues/68&#34;&gt;don&amp;rsquo;t really&lt;/a&gt; plan on changing that.&lt;/p&gt;

&lt;p&gt;However, I work with other people and very strongly believe that programming is mostly a social problem once you&amp;rsquo;re good enough at writing code. It&amp;rsquo;d be hypocritical of me to not improve the people process side, so I try to automate processes that makes me a better team-mate.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to cover four things I&amp;rsquo;ve worked on lately to improve this: &lt;a href=&#34;https://github.com/danger/danger/&#34;&gt;Danger&lt;/a&gt;, &lt;a href=&#34;https://github.com/orta/github-clippers&#34;&gt;GitHub-Clippers&lt;/a&gt; and improving how I write commits and prefixing my name on branches.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Review: Energy Sync</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/02/12/Code-Review-Energy-Sync/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/02/12/Code-Review-Energy-Sync/</guid>
      <description>&lt;p&gt;We are slowly trying to do high-level code-review views for all of our iOS apps. So far, we&amp;rsquo;ve covered &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/01/14/eidolon-code-review/&#34;&gt;Eidolon&lt;/a&gt; and &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/11/05/Emergence-Code-Review/&#34;&gt;Emergence&lt;/a&gt; and now &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/02/11/Code-Review-Energy/&#34;&gt;Energy&lt;/a&gt;. This is the second part of the Energy code review. The &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/02/11/Code-Review-Energy/&#34;&gt;first part&lt;/a&gt; covers the the critical codepaths that go from the App&amp;rsquo;s launch to sending an email, which is the main use-case for the app. This video covers how Folio does sync between the Artsy API and the app.&lt;/p&gt;

&lt;p&gt;Sync is a complex problem. This video covers our old techniques, how we changed them, the underlying abstractions we use now and how we can test each component individually. It&amp;rsquo;s an hour long, and it&amp;rsquo;s a little computer-sciencey. So I think people who have shipped some small apps would get a lot out of it.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=05HaKChPe_g&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Review: Energy overview</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/02/11/Code-Review-Energy/</link>
      <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/02/11/Code-Review-Energy/</guid>
      <description>&lt;p&gt;We are slowly trying to do high-level code-review views for all of our iOS apps. So far, we&amp;rsquo;ve covered &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/01/14/eidolon-code-review/&#34;&gt;Eidolon&lt;/a&gt; and &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/11/05/Emergence-Code-Review/&#34;&gt;Emergence&lt;/a&gt;. Folio is an app that&amp;rsquo;s shipped to the App Store in early 2012, it&amp;rsquo;s used by our Partners to showcase their works offline, at fairs and on the go. If you want the full spiel, check out &lt;a href=&#34;http://folio.artsy.net&#34;&gt;this microsite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This video talks through a lot of the critical codepaths that go from the App&amp;rsquo;s launch to sending an email, which is the main use-case for the app. We have another video coming up which exclusively covers how Folio does sync between the Artsy API and the app.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=Xhd25hFzN4o&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interviewing, applying and getting your first job in iOS</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/30/iOS-Junior-Interviews/</link>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/30/iOS-Junior-Interviews/</guid>
      <description>&lt;p&gt;When I was at the beginning of my career, my first developer job application was to a design agency who were doing Mac development too. It was pretty nerve-wracking to apply for my first programming job, and I came into the interview with no idea what to expect. I had just graduated from university and was at the first few steps of my career, I&amp;rsquo;d call this being a junior. It was a time period where I would need mentoring, and supervision in order to grow. A good explanation is in &lt;a href=&#34;http://programmers.stackexchange.com/questions/14914/whats-the-difference-between-entry-level-jr-sr-developers&#34;&gt;this StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that I&amp;rsquo;m both further on in my career, and involved with so many juniors in NYC, I&amp;rsquo;m meeting with a lot of people who are in the same position I was then and I get a lot of questions asking what they can do to prepare. This post &lt;em&gt;attempts&lt;/em&gt; at being a comprehensive collection of recommendations. It is subjective, of course, and strongly biased towards my experiences.&lt;/p&gt;

&lt;p&gt;Before I jump through to the article, there&amp;rsquo;s one thing that should be above the fold. &lt;em&gt;Chill out&lt;/em&gt;. You might not get it right on the first try, I&amp;rsquo;ve applied for jobs and received a &amp;ldquo;no thanks.&amp;rdquo; Yet eventually I became the head of mobile at Artsy. Everyone finds their place in time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Being a Good OSS Citizen</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/28/being-a-good-open-source-citizen/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/28/being-a-good-open-source-citizen/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s take a look at the day in the life of an open source citizen: me. On our app, I was given &lt;a href=&#34;https://github.com/artsy/eigen/issues/971&#34;&gt;an issue&lt;/a&gt; that would allow users to refine what kinds of sale artworks they were looking at, and it included this &lt;em&gt;awesome&lt;/em&gt; slider control so they could set min/max price ranges.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Teaching Swift at Artsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/26/swift-at-artsy/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/26/swift-at-artsy/</guid>
      <description>&lt;p&gt;While the Artsy engineering team includes many disciplines, tech stacks, and personalities, we all share a few things in common: a respect for each other, an appreciation of art-meets-science, and a celebration of learning. These are actually traits shared with our entire company, even non-engineers. So last Summer when Orta and I had some down time, it occurred to us how we could do something super-productive that was congruent with our values: we could teach the company Swift.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Review: Eidolon</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/14/eidolon-code-review/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/14/eidolon-code-review/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;Eidolon&lt;/a&gt; is the third app from Artsy&amp;rsquo;s mobile team, and it was the &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;first to be developed totally in the open&lt;/a&gt;. It&amp;rsquo;s often used as a reference for what an app written in Swift, or written using FRP, should look like. Given how interested the community seems to be around the app, it&amp;rsquo;s about time we did a walkthrough of the code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Open Expectations</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/13/OSS-Expectations/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/01/13/OSS-Expectations/</guid>
      <description>&lt;p&gt;The Artsy engineering team has been moving towards Open Source by Default. In 2015 the Mobile team managed to get there. Since then, we&amp;rsquo;ve been writing up our process on this blog and offering advice to anyone would would ask for it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been in talks with lots of companies you&amp;rsquo;ve heard of, on the how and the why of this. Recently &lt;a href=&#34;https://ello.co&#34;&gt;Ello&lt;/a&gt; got in touch, and we tried to &lt;a href=&#34;https://en.wikipedia.org/wiki/Dyson_sphere&#34;&gt;capture the process&lt;/a&gt;.  They came out with a great post that I&amp;rsquo;d strongly &lt;a href=&#34;https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg&#34;&gt;recommend reading&lt;/a&gt;. I&amp;rsquo;d like to try and come from the other side, and address what are the questions people ask. Consider this a FAQ for how the mobile team does/got to OSS by default.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Future Fridays</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/22/future-fridays/</link>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/22/future-fridays/</guid>
      <description>&lt;p&gt;Artsy&amp;rsquo;s Platform engineering team is responsible for much of our shared infrastructure and services. Some of that responsibility is naturally focused on the very near term, such as diagnosing service interruptions and fixing bugs. However, we must regularly balance that with more long-term-focused work such as evaluating new technologies, paying off technical debt, and devising foundational improvements to our platform.&lt;/p&gt;

&lt;p&gt;This is a tricky balance! Near-term work is appealing. It&amp;rsquo;s well-understood, more easily scoped, and often promises a satisfying &amp;ldquo;quick fix.&amp;rdquo; Sometimes, there&amp;rsquo;s even a customer (internal or external) eagerly awaiting the result. We recently introduced &amp;ldquo;Future Fridays&amp;rdquo; to help dedicate time to longer-term, open-ended work despite these urgent temptations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automating TestFlight Deploys using Fastlane</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/15/Automating-Testflight-Deploys/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/15/Automating-Testflight-Deploys/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been a really &lt;a href=&#34;http://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/&#34;&gt;strong supporter&lt;/a&gt; of the &lt;a href=&#34;https://fastlane.tools&#34;&gt;fastlane&lt;/a&gt; toolset. I think it fixes a lot of common developer problems, in a space that Apple doesn&amp;rsquo;t really touch. The command line.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve added hints of fastlane to our apps at different rates, &lt;a href=&#34;https://github.com/artsy/eidolon/&#34;&gt;Eidolon&lt;/a&gt; uses fastlane for everything but &lt;a href=&#34;https://github.com/artsy/eigen/&#34;&gt;Eigen&lt;/a&gt;/&lt;a href=&#34;https://github.com/artsy/energy&#34;&gt;Energy&lt;/a&gt;/&lt;a href=&#34;https://github.com/artsy/emergence&#34;&gt;Emergence&lt;/a&gt; have been pretty slow on the uptake, though they have more complicated setups, being App Store apps.&lt;/p&gt;

&lt;p&gt;When &lt;a href=&#34;https://krausefx.com/&#34;&gt;Felix&lt;/a&gt; announced &lt;a href=&#34;https://krausefx.com/blog/introducing-match-a-new-approach-to-code-signing&#34;&gt;match&lt;/a&gt; this week, I felt like he tackled a problem we face in our &lt;a href=&#34;http://artsy.net/job/mobile-engineer&#34;&gt;small dev team&lt;/a&gt;. I integrated this, only to find that it could also fix my problems with deployment. The rest of this post goes into the &amp;ldquo;how I did this.&amp;rdquo; You can also cheat and look at the &lt;a href=&#34;https://github.com/artsy/eigen/compare/d06270882aadec8f03927455a5229b53dd0a73c8...9eaf9082ebdcdf75f12ad2804260587e01526f2d&#34;&gt;commits&lt;/a&gt; directly.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Licenses for OSS Code</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/11/License-and-You/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/11/License-and-You/</guid>
      <description>&lt;p&gt;As a part of our internal Lunch and Learn series, I  gave a talk to our developers with an overview of the different types of source code licenses available.&lt;/p&gt;

&lt;p&gt;We always recommend MIT within Artsy, but understanding what the other ones are and &lt;a href=&#34;http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/&#34;&gt;why we made&lt;/a&gt; the choices we have done is valuable.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=0r7JcN3Q_LY&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview, as well as all of the speakers notes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Docker and Dusty for Development</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/09/docker-for-development/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/09/docker-for-development/</guid>
      <description>&lt;p&gt;When I first proposed using Docker for development, and began doing my work that way, there were some doubts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn&amp;rsquo;t it seem like a lot of trouble to set up Docker to get my work done?&lt;/li&gt;
&lt;li&gt;Isn&amp;rsquo;t it easier to use &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; to install the services and database servers I need?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Upgrading to RxSwift</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/08/reactive-cocoa-to-rxswift/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/08/reactive-cocoa-to-rxswift/</guid>
      <description>&lt;p&gt;When we &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;built Eidolon last year&lt;/a&gt;, Swift was still pre-1.0 and we couldn&amp;rsquo;t rely on the wide variety of available Swift libraries we enjoy today. I wanted to build it using functional reactive programming, because that&amp;rsquo;s how I believe &lt;a href=&#34;https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/&#34;&gt;everyone should write software&lt;/a&gt;, but there were no Swift-based FRP libraries at the time. As a compromise, I used ReactiveCocoa&amp;rsquo;s Objective-C API (the Swift API was months away from an alpha).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using OCR To Fix a Hilarious Bug</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/11/12/Using-OCR-To-Fix-A-Hilarious-Bug/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/11/12/Using-OCR-To-Fix-A-Hilarious-Bug/</guid>
      <description>&lt;p&gt;For a little while, we would get very strange bug reports. People would complain that artist thumbnails (viewed in several different contexts across the web and our iOS apps) would not be an image of the artist&amp;rsquo;s work, but rather text, which had inexplicably become an actual JPG. This wasn&amp;rsquo;t just text appearing in a &lt;code&gt;div&lt;/code&gt; that should contain an &lt;code&gt;img&lt;/code&gt; or something like that, these were actual JPG&amp;rsquo;s that were pictures of text.&lt;/p&gt;

&lt;p&gt;We would fix these as they came up, chalking the strangeness up to some relic of an old image processing pipeline, data being migrated, etc.&lt;/p&gt;

&lt;p&gt;However, the reports kept coming in. This blog post is about how we diagnosed this actual bug, and how we used a simple Ruby script and OCR to help us detect and fix the existing images.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Review: Emergence</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/11/05/Emergence-Code-Review/</link>
      <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/11/05/Emergence-Code-Review/</guid>
      <description>&lt;p&gt;We released the fourth app from the mobile team, &lt;a href=&#34;https://github.com/artsy/Emergence/&#34;&gt;Emergence&lt;/a&gt;, on day one for the new Apple TV and are currently getting around 2k downloads a day. The codebase was created by a single developer, and we didn&amp;rsquo;t want to keep that knowledge siloed. So, I ran an hour long code review session last night where I talked through the codebase, explained why some decisions were made and about the differences between tvOS and UIKit.&lt;/p&gt;

&lt;p&gt;Given that I had been asked to write a blog post about tvOS in general, I felt that making the code review public for anyone to watch would be a nice alternative to the usual long-form writing on this blog.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=NErVWhEzIBM&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Work Offline More</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/30/Work-Offline-More/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/30/Work-Offline-More/</guid>
      <description>&lt;p&gt;Want to know what I love writing in a pull request? &lt;em&gt;Sorry this is such a big PR, but I was working offline…&lt;/em&gt; It is one of &lt;a href=&#34;https://github.com/artsy/Emergence/pull/23&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;https://github.com/artsy/Emergence/pull/39&#34;&gt;key&lt;/a&gt; &lt;a href=&#34;https://github.com/artsy/Emergence/pull/45&#34;&gt;reasons&lt;/a&gt; I managed to get our &lt;a href=&#34;https://github.com/artsy/emergence&#34;&gt;Artsy Shows TV&lt;/a&gt; app released ahead of schedule with a looming unknown App Store &lt;a href=&#34;https://github.com/artsy/Emergence/issues?q=milestone%3A%221.0+Ship+to+Apple%22&#34;&gt;deadline&lt;/a&gt;. Offering more time for polish like thumbnail image &lt;a href=&#34;https://github.com/artsy/Emergence/compare/84855a310d47e071419b52b78978d14d751ec4e0...40966752111a309a20b4878e00a1c8e27cb53261&#34;&gt;pre-caching&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the last week before shipping I was scheduled to get a H1B VISA stamp for my passport, which means a trip to London. London is basically a &lt;strong&gt;million&lt;/strong&gt; miles away from where I occasionally live in Huddersfield. So I opted for a coach. On the 5 and a half hours of travel, I had gone from behind schedule to feature complete prototype. On the way back, I had started to remove the word prototype from what we were looking at.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;always&lt;/em&gt; optimise to work offline on every iOS project. Here&amp;rsquo;s some tips on how we do it in all our apps.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MVVM in Swift</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/24/mvvm-in-swift/</link>
      <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/24/mvvm-in-swift/</guid>
      <description>&lt;p&gt;Model View ViewModel has become the default way I write apps on iOS – it makes writing iOS apps a joy. I&amp;rsquo;ve written &lt;a href=&#34;https://www.objc.io/issues/13-architecture/mvvm/&#34;&gt;about it&lt;/a&gt; &lt;a href=&#34;http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/&#34;&gt;again&lt;/a&gt; and &lt;a href=&#34;https://speakerdeck.com/ashfurrow/reactivecocoa-at-mdevcon-2014&#34;&gt;again&lt;/a&gt; and &lt;a href=&#34;https://leanpub.com/iosfrp&#34;&gt;oh my&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But last Autumn, as our team was all-hands-on-deck to wrap up the &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;auctions kiosk app&lt;/a&gt;, we chose not to use MVVM. Why not?&lt;/p&gt;

&lt;p&gt;We were building a &lt;em&gt;new app&lt;/em&gt; in a &lt;em&gt;new language&lt;/em&gt; using a &lt;em&gt;non-Swift framework&lt;/em&gt; for functional reactive programming. I was also teaching colleagues what they needed to know about ReactiveCocoa to help write the app. We used the MVC pattern because the relative cost of MVVM was too high.&lt;/p&gt;

&lt;p&gt;&amp;rdquo;&amp;hellip; &lt;em&gt;was&lt;/em&gt; &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Splitting up a large test suite</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/24/splitting-up-a-large-test-suite/</link>
      <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/24/splitting-up-a-large-test-suite/</guid>
      <description>&lt;p&gt;A while back, we wrote about &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/&#34;&gt;How to Run RSpec Test Suites in Parallel with Jenkins CI Build Flow&lt;/a&gt;. A version of that still handles our largest test suite, but over time the initial division of specs became unbalanced. We ended up with some tasks that took twice as long as others. Even worse, in an attempt to rebalance task times, we ended up with awkward file patterns like &lt;code&gt;&#39;spec/api/**/[a-m]*_spec.rb&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To keep our parallel spec tasks approximately equal in size and to support arbitrary concurrency, we&amp;rsquo;ve added a new &lt;code&gt;spec:sliced&lt;/code&gt; task:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cocoa Architecture: Dependencies</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/18/Cocoa-Architecture-Dependencies/</link>
      <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/18/Cocoa-Architecture-Dependencies/</guid>
      <description>&lt;p&gt;As a part of going through the design patterns we&amp;rsquo;ve found in the creation of the Artsy iOS apps, I&amp;rsquo;d like to talk a bit about some of
the way in which we decide our apps dependencies.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to think of your dependencies as being things in your Podfile, but it&amp;rsquo;s a bit more nuanced than that. The tools you use for development, deployment, testing and external integrations are all things in which you depend on others to make your app work. I&amp;rsquo;d like to look into the hows and the whys of the decisions we&amp;rsquo;ve made.&lt;/p&gt;

&lt;h2 id=&#34;hugomore42&#34;&gt;&lt;/h2&gt;

&lt;p&gt;The mobile team of is a collection of smart people; we aim to work with people who have different opinions, and different backgrounds. This means we often don&amp;rsquo;t agree on project direction but moving forwards is about finding compromise. Every technical project within Artsy has a de-facto leader, and they get to make the call at the end of the day.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Releasecop Tracks Stale Releases</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/04/releasecop-tracks-stale-releases/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/04/releasecop-tracks-stale-releases/</guid>
      <description>&lt;p&gt;Artsy practices a sort of &lt;a href=&#34;http://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;continuous delivery&lt;/a&gt;. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices &lt;a href=&#34;http://artsy.github.io/blog/categories/testing/&#34;&gt;multiple&lt;/a&gt; &lt;a href=&#34;http://artsy.github.io/blog/categories/continuous-integration&#34;&gt;times&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From developers&amp;rsquo; working branches&lt;/li&gt;
&lt;li&gt;To the master branch&lt;/li&gt;
&lt;li&gt;Through a hopefully-successful build&lt;/li&gt;
&lt;li&gt;To a staging environment&lt;/li&gt;
&lt;li&gt;To production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The number of apps and services we deploy has grown to &lt;em&gt;dozens&lt;/em&gt; per team, so sometimes things fall through the cracks. We&amp;rsquo;ve been using &lt;a href=&#34;https://github.com/joeyAghion/releasecop&#34;&gt;Releasecop&lt;/a&gt; for the last few months to get gentle email reminders when an environment could use a deploy.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cocoa Architecture: Dropped Design Patterns</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/</guid>
      <description>&lt;p&gt;As a part of going through the design patterns we&amp;rsquo;ve found in the creation of the Artsy iOS apps, I&amp;rsquo;d like to talk a bit about some of the patterns that we&amp;rsquo;ve had and migrated away from. This is not 100% comprehensive, as there has been a lot of time, and a lot of people involved. Instead I&amp;rsquo;m going to try and give a birds eye view, and zoom in on some things that feel more important overall.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift Trek 2: The Wrath of count()</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/27/swift-trek-2-the-wrath-of-count/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/27/swift-trek-2-the-wrath-of-count/</guid>
      <description>&lt;p&gt;On Tuesday at our mobile practice standup, I mentioned that I was in-between projects and looking for something to do. Orta suggested migrating Eidolon, the Artsy bidding kiosk app, to Swift 2.&lt;/p&gt;

&lt;p&gt;Our CI is &lt;a href=&#34;https://github.com/artsy/eidolon/pull/466&#34;&gt;broken anyway&lt;/a&gt;, so now is the perfect opportunity to make changes that would break CI. Additionally, Swift 2 seems to have more-or-less stabilized in the latest betas, so we don&amp;rsquo;t expect many gotchas leading up to the GM. Finally, this is an enterprise-distributed app, so we don&amp;rsquo;t have to worry about submitting to the App Store using betas of Xcode.&lt;/p&gt;

&lt;p&gt;So Swift 2 it is!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cocoa Architecture: Hybrid Apps</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/24/Cocoa-Architecture-Hybrid-Apps/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/24/Cocoa-Architecture-Hybrid-Apps/</guid>
      <description>&lt;p&gt;As a part of going through the design patterns we&amp;rsquo;ve found in the creation of the Artsy iOS apps, I&amp;rsquo;d like to talk a bit about &lt;em&gt;Hybrid Applications&lt;/em&gt;. A hybrid application refers to an app that uses native code and web content intertwined. Our flagship iOS app, &lt;a href=&#34;https://github.com/artsy/eigen&#34;&gt;eigen&lt;/a&gt; is a hybrid app, and it seems to get more and more hybrid-y each release. Let&amp;rsquo;s talk a little bit about the pros and cons of this approach.&lt;/p&gt;

&lt;h2 id=&#34;hugomore42&#34;&gt;&lt;/h2&gt;

&lt;h1 id=&#34;what-is-a-hybrid-app&#34;&gt;What is a Hybrid App&lt;/h1&gt;

&lt;p&gt;Above is the widest possible definition above, so let&amp;rsquo;s dig in as this can be a contentious. There is a whole spectrum of which an app can be classed as a hybrid app. This ranges from more or less web-tech everywhere to 100% native code like Objective-C / Swift.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cocoa Architecture: ARSwitchboard</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cocoa Architecture: ARRouter</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/15/Cocoa-Architecture-Router-Pattern/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/15/Cocoa-Architecture-Router-Pattern/</guid>
      <description>&lt;p&gt;I want to talk about a pattern that we&amp;rsquo;ve been using for the last few years on the Artsy Mobile team. This pattern pre-dates me joining Artsy by a few weeks, and was introduced into our codebase by &lt;a href=&#34;http://90wpm.com&#34;&gt;Ben Jackson&lt;/a&gt;, this was the &lt;code&gt;ARRouter&lt;/code&gt;&amp;rsquo;s first method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;  + (NSURL *)newOAuthURLWithUsername:(NSString *)username password:(NSString *)password {
      NSDictionary *params = [[NSDictionary alloc] initWithObjectsAndKeys:
                              username, @&amp;quot;email&amp;quot;,
                              password, @&amp;quot;password&amp;quot;,
                              ARAuthClientID, @&amp;quot;client_id&amp;quot;,
                              ARAuthSecret, @&amp;quot;client_secret&amp;quot;,
                              @&amp;quot;credentials&amp;quot;, @&amp;quot;grant_type&amp;quot;,
                              nil];
      NSString *url_string = [[NSString alloc] initWithFormat:@&amp;quot;%@%@&amp;quot;, AROAuthURL, [params queryString]];
      NSURL *url = [ARRouter newURLWithPath:url_string];
      [url_string release];
      [params release];
      return url;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep, that&amp;rsquo;s pre-ARC, pre-Dictionary Literals, memory-managed code. We took this pattern and rolled with it for the next 4 years, this article is about where we&amp;rsquo;ve taken it.&lt;/p&gt;

&lt;p&gt;Within Eigen, &lt;code&gt;ARRouter&lt;/code&gt; is one of our &lt;a href=&#34;https://github.com/artsy/eigen/blob/904e8abfc11ce6ea4b6e81f0e02684b755a280c3/Artsy/Networking/ARRouter.m&#34;&gt;biggest classes&lt;/a&gt;, coming in at almost 1,000 lines of code. Whereas in Energy, it sits at a &lt;a href=&#34;https://github.com/artsy/energy/blob/e51529250ede359c781042f222d5836eb9e8a979/Classes/Util/App/ARRouter.m&#34;&gt;more reasonable&lt;/a&gt; 300 lines. Eidolon does not have an ARRouter, what gives?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Peer Lab</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/10/peer-lab/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/10/peer-lab/</guid>
      <description>&lt;p&gt;When I was living in Amsterdam, I participated in plenty of &lt;a href=&#34;https://appsterdam.rs&#34;&gt;Appsterdam&lt;/a&gt; events. Things like the weekly Meeten en Drinken. I even helped lead a class in Swift. One of the events I liked the most was called Peer Lab, organized every Saturday morning by &lt;a href=&#34;https://twitter.com/samuelgoodwin&#34;&gt;Samuel Goodwin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of Peer Lab is pretty simple, but also somewhat profound: developers gather in a physical space to work on things. If someone has a question, they ask the group. If you can help, you offer assistance. The goal is to foster a collaborative learning environment where everyone feels fulfilled.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Open Sourcing Energy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/06/open-sourcing-energy/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/06/open-sourcing-energy/</guid>
      <description>&lt;p&gt;The Artsy Mobile team is pretty aggressive in our stance on &lt;a href=&#34;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&#34;&gt;Open Source by Default&lt;/a&gt;. We&amp;rsquo;ve talked about it at &lt;a href=&#34;https://www.youtube.com/watch?v=2DvDeEZ0NDw&amp;amp;spfreload=10&#34;&gt;conferences&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=SjjvnrqDjpM&#34;&gt;around&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=zPbLYWmLPow&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;https://speakerdeck.com/orta/ios-at-artsy&#34;&gt;world&lt;/a&gt;, in &lt;a href=&#34;http://www.objc.io/issues/22-scale/artsy&#34;&gt;renowned magazines&lt;/a&gt; and on &lt;a href=&#34;http://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&#34;&gt;our blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth mentioning that we don&amp;rsquo;t just talk externally about Open Source. Internally, the Mobile team runs talks about Open Source for the rest of the Artsy staff. As well, we discuss the tooling and business implications of having our work in public repos. Artsy strives for an open culture, in this case the development team, on the whole, is just further along in the process.&lt;/p&gt;

&lt;p&gt;The Open Source app idea started with an experiment in the Summer of 2014, asking, &amp;ldquo;What does a truly Open Source App look like?&amp;rdquo; The outcome of that was our Swift Kiosk app, &lt;a href=&#34;https://github.com/artsy/eidolon/&#34;&gt;Eidolon&lt;/a&gt;. Open from day one. We took the knowledge from that and applied it to our public facing app, &lt;a href=&#34;https://github.com/artsy/eigen/&#34;&gt;Eigen&lt;/a&gt;. Open from day 806. That made 2/3rds of our apps Open Source.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to talk about our final app, &lt;a href=&#34;https://github.com/artsy/energy&#34;&gt;Energy&lt;/a&gt;. Open from day 1433 and ~3500 commits.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notorious BUG – The Unbugged Sessions Part 1</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/30/Notorious-BUG-Part-1/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/30/Notorious-BUG-Part-1/</guid>
      <description>&lt;p&gt;When the odds are stacked against you, your mind is overflowing, and you are ready to just pop, there’s always practical
debugging tips to help you through a cloudy day.&lt;/p&gt;

&lt;p&gt;In this post I’ll take you through a debugging session where I reproduce a crash, for which we were receiving a bunch of
crash reports, but I was unable to reproduce by just using the application.&lt;/p&gt;

&lt;p&gt;It will cover the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Narrow down the breakpoint to the method invocation where the crash occurs.&lt;/li&gt;
&lt;li&gt;Locate the exact instruction that causes the crash.&lt;/li&gt;
&lt;li&gt;Look at the implementation of the method where the crash occurs.&lt;/li&gt;
&lt;li&gt;Simulate the crash.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How To Write Unit Tests Like a Brood Parasite</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/</guid>
      <description>&lt;p&gt;To a beginner, &lt;a href=&#34;http://ocmock.org/&#34;&gt;OCMock&lt;/a&gt; looks scary. The syntax is strange, the idea of stubbing seems complicated, and skirting around the need to use it at all times kind of works out for a while.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[[mock stub] // three brackets!!

[OCMockObject niceMockForClass:UINavigationItem.class]; // it has to be told to be nice?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of this can be overwhelming for someone who just wants to write simple unit tests for a particular view controller.&lt;/p&gt;

&lt;p&gt;Once you look into the specifics of OCMock, however, things get less terrifying really quickly. It is helpful to compare OCMock’s approach to stubbing to the &lt;a href=&#34;https://vimeo.com/60553870&#34;&gt;behaviors of certain bird species&lt;/a&gt;. As always, the soothing voice of David Attenborough brings clarity and joy to even the most mundane puzzles of life’s journey.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Eigenstate of Mind</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/06/04/an-eigenstate-of-mind/</link>
      <pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/06/04/an-eigenstate-of-mind/</guid>
      <description>&lt;p&gt;Prior to starting at Artsy, I followed a few online tutorials on iOS development. But a simple application demonstrating how to &lt;a href=&#34;http://www.raywenderlich.com/85578/first-core-data-app-using-swift&#34;&gt;build a todo list&lt;/a&gt; didn&amp;rsquo;t illustrate the nuances of a production codebase. Tutorials are an important learning tool for beginners, but can&amp;rsquo;t possibly prepare you for everything you would encounter within an application like Artsy&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;I was lucky to have a mentor at Artsy to help me get started, and I wrote this post to pass along the lessons I learned. This is meant to be a guide for iOS beginners to get to know an open source production codebase. I&amp;rsquo;ll cover the Xcode project organization and where to find things.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How we Open Source&#39;d Eigen</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/28/how-we-open-sourced-eigen/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/28/how-we-open-sourced-eigen/</guid>
      <description>&lt;p&gt;It was 95 days ago, and I was sitting before of my computer in NYC. I loaded my terminal, opened &lt;a href=&#34;https://taptalk.me&#34;&gt;TapTalk&lt;/a&gt; on my phone, tapped on my collegue &lt;a href=&#34;http://ashfurrow.com&#34;&gt;Ash&amp;rsquo;s&lt;/a&gt; avatar and held my finger there. I paused, this moment was a long time, it was worth waiting. I switched the camera from my face to the screen with the terminal open.&lt;/p&gt;

&lt;p&gt;This moment was probably the most nervous I had been in years. It showed &lt;code&gt;git push origin master&lt;/code&gt;. I said &amp;ldquo;it&amp;rsquo;s happening.&amp;rdquo; I hit return. A new era in the Artsy mobile team had started. A few minutes later, I wrote this tweet:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; lang=&#34;en&#34;&gt;&lt;p&gt;We have open source’d the &lt;a href=&#34;https://twitter.com/artsy&#34;&gt;@Artsy&lt;/a&gt; iOS app.&amp;#10;&amp;#10;&lt;a href=&#34;https://t.co/c1SWtHmUgy&#34;&gt;https://t.co/c1SWtHmUgy&lt;/a&gt;&amp;#10;&amp;#10;🎉&lt;/p&gt;&amp;mdash; Ørta (@orta) &lt;a href=&#34;https://twitter.com/orta/status/558395611754819586&#34;&gt;January 22, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go over the process we went through to get to that point.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>So You Want an SSL Certificate? A Pragmatic Handbook</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/09/so-you-want-an-ssl-certificate/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/09/so-you-want-an-ssl-certificate/</guid>
      <description>&lt;p&gt;Obtaining, reissuing and installing SSL certificates across various pieces of Artsy infrastructure (read about our tech stack &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/03/23/artsy-technology-stack-2015/&#34;&gt;here&lt;/a&gt;) is a mind-numbing excercise dreaded by every platform engineer. Few people really understand what&amp;rsquo;s going on, installing SSL certificates is right up there in the opaque world of user-unfriendliness, along with onboarding a new iOS developer in an organization with Xcode.&lt;/p&gt;

&lt;p&gt;Still, it can be done - below is our cookbook.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;https://hizkifw.github.io/artsy.github.io-hugo/images/2015-04-09-so-you-want-an-ssl-certificate/ev.png&#39;&gt;
&lt;img src=&#39;https://hizkifw.github.io/artsy.github.io-hugo/images/2015-04-09-so-you-want-an-ssl-certificate/cert.png&#39;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Trying out React</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react/</guid>
      <description>&lt;p&gt;We recently picked up a Rails application that was a few features away from completion. This application allows our &lt;a href=&#34;https://www.artsy.net/about/the-art-genome-project&#34;&gt;Genome Team&lt;/a&gt; to classify multiple artworks based on visual and art historical characteristics. These characteristics, or &amp;ldquo;genes&amp;rdquo;, can be added, removed, and changed for any of the artworks on the panel.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#39;https://hizkifw.github.io/artsy.github.io-hugo/images/2015-04-08-creating-a-dynamic-single-page-app-for-our-genome-team-using-react/helix_screenshot.png&#39;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Our genomers are masters of efficiency, and over the years we have worked closely with them to tailor a dynamic interface to their specific workflow.&lt;/p&gt;

&lt;p&gt;When we started working on the app, the back-end was organized, modular, and interfaced seamlessly with the Artsy API, but there were still a few front-end features we needed to implement before it could be used by the Genome Team. The app did not use a front-end framework, and as our features scaled it was difficult to keep track of UI state with pure CoffeeScript and global event listeners. Eventually, we decided to stop trying to patch our leaky roof and build a new one.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Artsy&#39;s Engineering Compensation Framework</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/03/artsy-engineering-compensation-framework/</link>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/03/artsy-engineering-compensation-framework/</guid>
      <description>&lt;p&gt;Fair compensation is an important part of cultivating and growing engineers, and determining how much money someone is going to make is often more art than science, especially in young start-ups. We wanted this to be a collaborative process and not an adversarial one, and as our engineering team grew past 20 members it became important to think about compensation more systematically.&lt;/p&gt;

&lt;p&gt;In this post I will share our individual contributor engineering ladder and our performance evaluation and compensation process.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Culture of Openness in the Artsy Mobile Team</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/03/31/the-culture-of-openness-artsy-mobile/</link>
      <pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/03/31/the-culture-of-openness-artsy-mobile/</guid>
      <description>Recently, the Artsy Mobile team had the pleasure of working together on an article for objc.io, an online publication dedicated to in-depth articles about iOS and OS X development. Each monthly issue consists of several articles centered around a theme—past issues include Testing, Animations and Swift. objc.io’s latest issue, iOS at Scale, features articles by a handful of developers about how they approach iOS development at their respective companies. Our contribution to the issue is a collaboratively-written article by and about Artsy’s Mobile team from the angle of Artsy&amp;rsquo;s focus on the core value of openness that is foundational to how we (and the greater Artsy team) work.</description>
    </item>
    
    <item>
      <title>Artsy&#39;s Technology Stack, 2015</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/03/23/artsy-technology-stack-2015/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/03/23/artsy-technology-stack-2015/</guid>
      <description>&lt;p&gt;Artsy has now grown past 100 team members and our Engineering organization is now 20 strong. For a brief overview of what the company has accomplished in the last two years, check out our &lt;a href=&#34;http://2013.artsy.net&#34;&gt;2013&lt;/a&gt; and &lt;a href=&#34;http://2014.artsy.net&#34;&gt;2014&lt;/a&gt; reviews.&lt;/p&gt;

&lt;p&gt;This is a good opportunity to describe our updated technology stack. Last time &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2012/10/10/artsy-technology-stack&#34;&gt;we did this&lt;/a&gt; was when Artsy launched publicly in 2012.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#39;https://hizkifw.github.io/artsy.github.io-hugo/images/2015-03-23-artsy-technology-stack-2015/stats.png&#39;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Three years ago Artsy was a classic &lt;a href=&#34;http://rubyonrails.org&#34;&gt;Ruby-on-Rails&lt;/a&gt; monolith with a handful of adjacent processes and tools. We&amp;rsquo;ve since broken it up into many independent services, and continue to heavily be a Ruby and JavaScript shop, using Rails where appropriate, with native code on mobile devices and some JVM-based experiments in micro-services.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#39;https://hizkifw.github.io/artsy.github.io-hugo/images/2015-03-23-artsy-technology-stack-2015/languages.png&#39;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CocoaPods-Keys and CI</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/01/21/cocoapods-keys-and-CI/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/01/21/cocoapods-keys-and-CI/</guid>
      <description>&lt;p&gt;We built CocoaPods-Keys as a way to remove API keys and secrets from our source code. We use it to open up our code to the public, without leaking private details. One of the cool things about doing it this way was that we could all use different API keys stashed away in each developers Keychain.&lt;/p&gt;

&lt;p&gt;To ensure we could run CI on our apps we came up with two different ways to use keys on CI. This post explains them both.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CocoaPods and Frameworks</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/01/04/cocoapods-and-frameworks/</link>
      <pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/01/04/cocoapods-and-frameworks/</guid>
      <description>&lt;p&gt;As I mentioned in my &lt;a href=&#34;https://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;retrospective on Eidolon&lt;/a&gt;, Artsy iOS codebases are often used as testbeds for new CocoaPods features. With Eidolon, we had the opportunity to try out CocoaPods&amp;rsquo; support for frameworks and Swift. This post is a look back at the month of using dependencies as dynamic frameworks instead of static libraries.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Write Great Outage Post-Mortems</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/11/19/how-to-write-great-outage-post-mortems/</link>
      <pubDate>Wed, 19 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/11/19/how-to-write-great-outage-post-mortems/</guid>
      <description>&lt;p&gt;The website is finally back up after crashing hard for 4 hours straight.&lt;/p&gt;

&lt;p&gt;Recently AWS decided to &lt;a href=&#34;http://aws.amazon.com/blogs/aws/ec2-maintenance-update&#34;&gt;reboot a few of your servers for a critical update&lt;/a&gt;. It didn&amp;rsquo;t seem like it was going to be a big deal, except that the schedule was only accommodating if you were in the Pacific Northwest. The first reboot took out a secondary replica of our MongoDB database. Unfortunately &lt;a href=&#34;https://github.com/mongoid/moped/issues/321&#34;&gt;the driver handled that poorly&lt;/a&gt; and spent the first 400ms of every subsequent HTTP request trying to reconnect to the missing instance. That server came back up, but failed to find its storage volumes because of a human mistake in a past migration and the alerts were mistakenly silenced by someone monitoring the system. A few hours later the primary was being stepped down and rebooted, sending the driver into panic over &lt;a href=&#34;https://github.com/mongoid/moped/issues/323&#34;&gt;another bug&lt;/a&gt;. The site went down.&lt;/p&gt;

&lt;p&gt;None of this was obvious while it was happening as the rate of automated alerts grew. Engineers communicated to the team that they are actively focusing on bringing the systems back up. This helped to fend off a large amount of instant messages, e-mails, texts and phone calls from various people on the team that were in the middle of demoing something to a very important prospective customer on the other side of the planet. It was also the middle of the night in New York.&lt;/p&gt;

&lt;p&gt;Now that all the systems are back up, lets write a detailed outage post-mortem.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Close to the Metal: Debugging Our Hardware Problem</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/11/18/debugging-our-hardware-problem/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/11/18/debugging-our-hardware-problem/</guid>
      <description>&lt;p&gt;For the past few months, Artsy’s mobile team has been working on &lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;Eidolon&lt;/a&gt;, a bidding kiosk for Artsy’s auctions platform. While we’ve written a &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;retrospective&lt;/a&gt; on the process of making Eidolon from the software side of things, we didn’t really touch on how our software is being used.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Developing a Bidding Kiosk for iOS in Swift</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/11/13/eidolon-retrospective/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/11/13/eidolon-retrospective/</guid>
      <description>&lt;p&gt;In the Summer of 2014, we began developing a bidding kiosk for the Artsy auctions platform (code-named &lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;Eidolon&lt;/a&gt;). Typically, the iOS team here at Artsy worked on two main apps: a &lt;a href=&#34;http://iphone.artsy.net&#34;&gt;consumer-facing iPhone app&lt;/a&gt; and an iPad app used by art galleries. For Eidolon, we followed &lt;a href=&#34;https://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/&#34;&gt;Artsy’s standard practices&lt;/a&gt; for building our software and use GitHub issues as our canonical source for bug reports and feature requests. Many of the components used in our apps are &lt;a href=&#34;https://github.com/artsy&#34;&gt;open source&lt;/a&gt;, but the codebases themselves remain in private repositories.&lt;/p&gt;

&lt;p&gt;Initial planning for Eidolon began over the Summer. Our designer &lt;a href=&#34;http://twitter.com/katarinabatina&#34;&gt;Katarina&lt;/a&gt; had the main features sketched out. I was scheduled to work on it at first, with &lt;a href=&#34;http://twitter.com/orta&#34;&gt;Orta&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/1aurabrown&#34;&gt;Laura&lt;/a&gt; joining me near the end of the project. We had a rough scope: the app would be able to list artworks at an auction and allow prospective bidders to learn more about these artworks. The user would be able to register to bid and place bids using the Kiosk, including credit card processing for identity-checking.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How we customized Google Site Search at Artsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/10/23/how-we-customized-google-site-search-at-artsy/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/10/23/how-we-customized-google-site-search-at-artsy/</guid>
      <description>&lt;p&gt;This post is about how, in a week, we switched from Solr to &lt;a href=&#34;https://support.google.com/customsearch/answer/72326?hl=en&#34;&gt;Google Site Search&lt;/a&gt; and customized it into a fast, &lt;a href=&#34;https://artsy.net/search?q=banksy&#34;&gt;beautiful search service&lt;/a&gt;. Search is a difficult problem &amp;ndash; a really difficult problem. For small companies and startups, the common solution to search is to launch a custom search service based on &lt;a href=&#34;http://lucene.apache.org/solr/&#34;&gt;Solr&lt;/a&gt; or &lt;a href=&#34;http://www.elasticsearch.org/&#34;&gt;Elastic Search&lt;/a&gt;. While these services are very appropriate for private data, we think Google Site Search should be considered in addition to these services for a public website. It is often not considered because users search on a dedicated site with different intent than they search Google. We found that while this may be true, it is not necessarily a good reason to roll your own search service for your public site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-10-23-how-we-customized-google-site-search-at-artsy/photography-site-search.jpg&#34; alt=&#34;Search for photography on artsy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Launching a Security Bug Bounty Program at Artsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/24/launching-a-security-bug-bounty-program-at-artsy/</link>
      <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/24/launching-a-security-bug-bounty-program-at-artsy/</guid>
      <description>&lt;p&gt;Many established companies have bug bounty programs, including a recently publicized &lt;a href=&#34;http://www.forbes.com/sites/kashmirhill/2014/09/10/bug-bounty-programs&#34;&gt;Twitter Bug Bounty&lt;/a&gt;. Some use services, such as &lt;a href=&#34;https://hackerone.com&#34;&gt;HackerOne&lt;/a&gt; or &lt;a href=&#34;https://bugcrowd.com&#34;&gt;BugCrowd&lt;/a&gt;. In early September 2014 we quietly launched &lt;a href=&#34;https://artsy.net/security&#34;&gt;our own Security Bug Bounty&lt;/a&gt;. Since then we have fixed 14 issues reported by 15 security researchers and paid $750 in bounty. In the process we have learned a ton and wanted to share some things that would have probably done a little bit differently, knowing what we know now.&lt;/p&gt;

&lt;p&gt;In this post I will focus on both technical and non-technical takeaways, and will provide an extensive list of vulnerabilities that should have been dealt with before launching our bug bounty.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Pattern Recognition to Automatically Crop Framed Art</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/24/using-pattern-recognition-to-automatically-crop-framed-art/</link>
      <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/24/using-pattern-recognition-to-automatically-crop-framed-art/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://artsy.net/imamuseum&#34;&gt;Indianapolis Museum of Art&lt;/a&gt; (IMA) recently shared thousands of high-resolution images from its permanent collection with Artsy, including 5,000 images that were in an un-cropped state. These images contain color swatches, frames, and diverse backgrounds, as shown below. The clutter in these images made them inappropriate to display to end users, and invited an approach to automatically crop the images. This post explores some fully automated techniques to locate the piece of art within each photo. If you&amp;rsquo;re eager to jump straight to the code that worked best, you&amp;rsquo;ll find the implementation of the &amp;lsquo;Rectangular Contour Search&amp;rsquo; section &lt;a href=&#34;https://gist.github.com/ilyakava/b2dbca43991d6c668dbb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://f.cl.ly/items/2C0e2X1G1R1i1z1Y0M1B/banner.png&#34; alt=&#34;All of these images are open access. For reference, the accession numbers/names. 45-115.tif 45-9-v01.tif 54-4.tif 76-166-1-12b.tif 14-57.tif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Transparent Prerequisite Network Requests with Swift and ReactiveCocoa</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/18/transparent-prerequisite-network-requests/</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/18/transparent-prerequisite-network-requests/</guid>
      <description>&lt;p&gt;Artsy&amp;rsquo;s &lt;a href=&#34;http://developers.artsy.net&#34;&gt;API&lt;/a&gt; requires something called an &lt;a href=&#34;https://developers.artsy.net/docs/authentication&#34;&gt;XApp
token&lt;/a&gt; in order to perform
requests. The token comes back with an expiry date, after which the token will
no longer work. A new token will have to be fetched.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;xapp_token&amp;quot;: &amp;quot;SOME_TOKEN&amp;quot;,
	&amp;quot;expires_in&amp;quot;:&amp;quot;2014-09-19T12:22:21.570Z&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our previous iOS apps, tragically written in Objective-C, we have a lot of
code that looks like the following. &lt;code&gt;getXappTokenWithCompletion:&lt;/code&gt; checks to
make sure that there is a valid token. If there is, it invokes the completion
block immediately. Otherwise, it fetches a token, sets it in a static variable,
and then invokes the completion block.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[ArtsyAPI getXappTokenWithCompletion:^(NSString *xappToken, NSDate *expirationDate) {
    [ArtsyAPI getSomething:^(NSDictionary *results) {
       // do something
    } failure:^(NSError *error) {
        // handle herror
    }];
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s kind of ugly. A better approach might be to embed the token-requesting
logic within the &lt;code&gt;getSomething:&lt;/code&gt; method. But that kind of sucks, since we&amp;rsquo;d have
to reproduce that logic for &lt;em&gt;every&lt;/em&gt; network-accessing method. If we have ten
methods, that&amp;rsquo;s ten times we need to duplicate that logic.&lt;/p&gt;

&lt;p&gt;With our &lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;new app&lt;/a&gt; (written in Swift), we&amp;rsquo;re
using a network abstraction layer we&amp;rsquo;ve created called &lt;a href=&#34;https://github.com/AshFurrow/Moya&#34;&gt;Moya&lt;/a&gt;.
Moya sits on top of &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; and
provides an abstraction for API endpoints. Instead of having ten different
network-accessing methods, there is only &lt;em&gt;one&lt;/em&gt; method to which you pass one of
the ten different possible &lt;code&gt;enum&lt;/code&gt; values. This means you have compile-time
safety in your networking code, but that&amp;rsquo;s not really what we&amp;rsquo;re here to talk
about.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Designing the Public Artsy API</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/12/designing-the-public-artsy-api/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/12/designing-the-public-artsy-api/</guid>
      <description>&lt;p&gt;Today we are happy to announce that we&amp;rsquo;re making a new public API generally available, along with over 26,000 artworks from many of our institutional partners.&lt;/p&gt;

&lt;p&gt;The Artsy API currently provides access to images of historic artwork and related information on &lt;a href=&#34;https://artsy.net&#34;&gt;artsy.net&lt;/a&gt; for educational and other non-commercial purposes. You can try it for playing, testing, and learning, but not yet for production. The scope of the API will expand in the future as it gains some traction.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.artsy.net&#34;&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-09-12-designing-the-public-artsy-api/the-art-world-in-your-app.png&#34; border=&#34;0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you just want to use the API, you can stop reading here and head to the &lt;a href=&#34;https://developers.artsy.net/&#34;&gt;developers.artsy.net&lt;/a&gt; website. (The developers website itself is a classic Rails + Bootstrap example and is also &lt;a href=&#34;https://github.com/artsy/doppler&#34;&gt;open-source&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;In this post we will step back and describe some of the technical decisions made during the development of the new API.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>We open sourced our Isomorphic Javascript website</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/</link>
      <pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/force.png&#34; alt=&#34;May The Force be With You&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;re happy to announce we&amp;rsquo;ve open sourced the entire Artsy.net web app, &lt;a href=&#34;https://github.com/artsy/force&#34;&gt;Force&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the past few months, we&amp;rsquo;ve rewritten our web front-end to move off Rails and on to a &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; stack that shares Javascript code and rendering between the server and client, otherwise known as &lt;a href=&#34;http://nerds.airbnb.com/isomorphic-JavaScript-future-web-apps/&#34;&gt;Isomorphic Javascript&lt;/a&gt;. After migrating to this new stack, we open-sourced our boilerplate, &lt;a href=&#34;http://ezeljs.com&#34;&gt;Ezel&lt;/a&gt;, and have now gone a step further and open sourced Artsy.net.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using CocoaPods Caching with Travis CI</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/08/08/CocoaPods-Caching/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/08/08/CocoaPods-Caching/</guid>
      <description>&lt;p&gt;As &lt;a href=&#34;http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/&#34;&gt;Ash said earlier&lt;/a&gt; we like using Continuous Integration. Today I spent a large amount of time migrating us to use the new CocoaPods caching system in Travis CI. To make up for my lost time I&amp;rsquo;m passing on what I&amp;rsquo;ve learned and also showing how we do CI at Artsy with Objective-C apps. If you&amp;rsquo;re interested in how we do it in Swift, you can just check &lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;Eidolon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Taking a Snapshot with Second Curtain</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/08/04/taking-a-snapshot-with-second-curtain/</link>
      <pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/08/04/taking-a-snapshot-with-second-curtain/</guid>
      <description>&lt;p&gt;At Artsy, we try hard to &lt;a href=&#34;https://speakerdeck.com/orta/getting-eigen-out?slide=35&#34;&gt;test&lt;/a&gt;
our iOS applications to ensure that we avoid regressions and have a clearly
defined spec of how our apps should look and behave. One of the core pieces of
our testing setup is &lt;a href=&#34;https://github.com/facebook/ios-snapshot-test-case&#34;&gt;FBSnapshotTestCase&lt;/a&gt;,
a library written by Facebook to compare views at runtime with images of those
views that are known to be correct. If the images differ, the test fails. We
also use &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis&lt;/a&gt; for continuous integration.&lt;/p&gt;

&lt;p&gt;Lately, we&amp;rsquo;ve been noticing a friction between the developers on the iOS team
and the tools we&amp;rsquo;re using to test our apps: while Travis allows us to easily
access the logs of test runs, it can only indicate that a snapshot test failed,
not why it failed. That&amp;rsquo;s because the images that are compared are locked on
Travis&amp;rsquo; machine – we cannot access those images, so we can&amp;rsquo;t see the
differences. This is &lt;em&gt;really&lt;/em&gt; promblematic when the tests pass locally but fail
only on Travis.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Retain scroll position in infinite scroll</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/07/09/retain-scroll-position-in-infinite-scroll/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/07/09/retain-scroll-position-in-infinite-scroll/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/4b7e6aefa00b96ba2804b235aaaa811bbb893c4e/687474703a2f2f7777772e6578706c61696e786b63642e636f6d2f77696b692f696d616765732f352f35362f696e66696e6974655f7363726f6c6c696e672e706e67&#34; alt=&#34;Maybe we should give up on the whole idea of a &#39;back&#39; button. &#39;Show me that thing I was looking at a moment ago&#39; might just be too complicated an idea for the modern web.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Although &lt;a href=&#34;https://news.ycombinator.com/item?id=7314965&#34;&gt;some find infinite scroll to be a contentious topic&lt;/a&gt; at Artsy we&amp;rsquo;ve found it to be a useful element in many portions of our site such as &lt;a href=&#34;https://artsy.net/browse/artworks?medium=prints&amp;amp;price_range=-1%3A1000&#34;&gt;filtering&lt;/a&gt;. However, we&amp;rsquo;ve run into a common and painful usability issue with infinite scroll. That is clicking on an item redirects to the next page, losing your scroll position, and losing your place when going back. To solve this we have come up with a clever little solution using an iframe.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Artsy&#39;s first closed source Pod</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/06/20/artsys-first-closed-source-pod/</link>
      <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/06/20/artsys-first-closed-source-pod/</guid>
      <description>&lt;p&gt;When I joined Artsy, &lt;a href=&#34;http://code.dblock.org&#34;&gt;dB&lt;/a&gt; pitched me this idea: &lt;em&gt;Open source as default.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I took this to heart. I genuinely believe the idea behind the philosophy. It&amp;rsquo;s cool that our real product isn&amp;rsquo;t our implementations on the web or native but the data which powers it - &lt;a href=&#34;https://artsy.net/theartgenomeproject&#34;&gt;the Art Genome Project&lt;/a&gt;. Similarly, I spend a bunch of time &lt;a href=&#34;https://github.com/AshFurrow/ARCollectionViewMasonryLayout&#34;&gt;on&lt;/a&gt; &lt;a href=&#34;https://github.com/dblock/ARASCIISwizzle&#34;&gt;open&lt;/a&gt; &lt;a href=&#34;https://github.com/dblock/ios-snapshot-test-case-expecta&#34;&gt;sourcing&lt;/a&gt; &lt;a href=&#34;https://github.com/dblock/ARTiledImageView&#34;&gt;solid&lt;/a&gt; &lt;a href=&#34;https://github.com/dstnbrkr/DRBOperationTree&#34;&gt;abstractions&lt;/a&gt; &lt;a href=&#34;https://github.com/orta/ORSimulatorKeyboardAccessor&#34;&gt;from&lt;/a&gt; &lt;a href=&#34;https://github.com/orta/ORStackView&#34;&gt;our&lt;/a&gt; &lt;a href=&#34;https://github.com/orta/ARAnalytics&#34;&gt;apps&lt;/a&gt;, always taking the opinion if something is used in more than one place, it should be open sourced.&lt;/p&gt;

&lt;p&gt;This week I pushed some libraries that were a bit different, read on to find out why.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building the Xcode Plugin Snapshots</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/06/17/building-the-xcode-plugin-snapshots/</link>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/06/17/building-the-xcode-plugin-snapshots/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m the kind of guy who thinks better tooling means better outcomes. But when good tooling isn&amp;rsquo;t available, it&amp;rsquo;s time to build it yourself. It&amp;rsquo;s this attitude that lead to my work on &lt;a href=&#34;http://cocoadocs.org&#34;&gt;CocoaDocs.org&lt;/a&gt;, and then to &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods.org&lt;/a&gt; &amp;amp; its documentation.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been trying to apply this to testing, and in order to pull this off I&amp;rsquo;ve had to extend Xcode to show off the results of failing tests in a more visual way. To that end, I&amp;rsquo;ve extended Xcode to show the results of failing &lt;a href=&#34;https://github.com/facebook/ios-snapshot-test-case&#34;&gt;view tests&lt;/a&gt; in a more visual way by building &lt;a href=&#34;https://github.com/orta/snapshots&#34;&gt;Snapshots for Xcode&lt;/a&gt;.  Let&amp;rsquo;s go through the process of building an Xcode plugin so you can do this too. Screw stability.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing Core Data Migrations</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/06/11/testing-core-data-migrations/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/06/11/testing-core-data-migrations/</guid>
      <description>&lt;p&gt;The first time I released a patch release for &lt;a href=&#34;http://orta.github.io/#folio-header-unit&#34;&gt;Artsy Folio&lt;/a&gt; it crashed instantly, on every install. Turns out I didn&amp;rsquo;t understand Core Data migrations, now a few years on I grok it better but I&amp;rsquo;ve still lived with the memories of that dark dark day. Because of this I&amp;rsquo;ve had an informal rule of testing migrations with all the old build of Folio &lt;a href=&#34;http://artsy.github.io/blog/2013/03/29/musical-chairs/&#34;&gt;using chairs&lt;/a&gt; the day before submitting to the app store.&lt;/p&gt;

&lt;p&gt;This time round, I&amp;rsquo;ve made vast changes to the Core Data models but skipped the manual work. Here&amp;rsquo;s how:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Continuous integration for service-oriented architectures</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/05/12/continuous-integration-for-service-oriented-architectures/</link>
      <pubDate>Mon, 12 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/05/12/continuous-integration-for-service-oriented-architectures/</guid>
      <description>&lt;p&gt;Whatever you have against monolithic architectures, at least they&amp;rsquo;re easy to test. And when those tests succeed, you can be reasonably confident the live app will work the same way.&lt;/p&gt;

&lt;p&gt;Artsy began as one such monolithic app, but we&amp;rsquo;ve been refactoring into an ecosystem of related APIs and sites. Today, when you search for &lt;a href=&#34;https://artsy.net/gene/cultural-commentary&#34;&gt;&amp;ldquo;cultural commentary&amp;rdquo;&lt;/a&gt; or visit &lt;a href=&#34;https://artsy.net/artist/robert-longo&#34;&gt;Robert Longo&lt;/a&gt; on &lt;a href=&#34;https://artsy.net&#34;&gt;artsy.net&lt;/a&gt;, the page is rendered by a web app, sources data from an API, retrieves recommendations from a separate service, tracks trends in another, and records analytics in yet another.&lt;/p&gt;

&lt;p&gt;This was a boost for developer productivity and scaling, but eviscerated the value of our tests. We repeatedly encountered bugs that were failings of &lt;em&gt;the interaction between codebases&lt;/em&gt; rather than failings of individual ones. Test libraries and tools typically concern themselves with one isolated app. When you have services that consume services that consume services, those isolated tests (with their stubs of everything else) don&amp;rsquo;t necessarily reflect production&amp;rsquo;s reality.&lt;/p&gt;

&lt;p&gt;So how should we develop our small, focused apps (or &lt;a href=&#34;http://en.wikipedia.org/wiki/Service-oriented_architecture&#34;&gt;service-oriented architecture&lt;/a&gt;, or &lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;microservices&lt;/a&gt;&amp;hellip;) with confidence? We set out to build a dedicated acceptance test suite that would run tests across multiple services, configuring and integrating them in a way that closely matches the production environment.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aspect-Oriented Programming and ARAnalytics</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/05/06/aspect-oriented-programming-and-aranalytics/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/05/06/aspect-oriented-programming-and-aranalytics/</guid>
      <description>&lt;p&gt;Analytics are common in iOS applications. They help inform our decisions
about products. Since analytics are so common, Artsy developed a library called
&lt;a href=&#34;https://github.com/orta/ARAnalytics&#34;&gt;ARAnalytics&lt;/a&gt;. This library provides a
single interface to many different backend analytics providers, freeing
developers from having to write code for each of the providers that they&amp;rsquo;re
using.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider a typical view controller on iOS. View controllers on iOS
represent the glue code between models and views. When a model changes, the view
controller updates the appearance of the UI. Similarly, when the UI is
interacted with by the user, the view controller updates the model. This is the
core of any standard iOS application.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s say that a button is pressed. We&amp;rsquo;ll handle that interaction in a
method called &lt;code&gt;buttonWasPressed:&lt;/code&gt;. We&amp;rsquo;ll want to update our model, but also to
track the analytics event.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)buttonWasPressed:(id)sender
{
	self.model.hearted = YES;

	[ARAnalytics event:@&amp;quot;hearted&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough, but consider that the analytics tracking code doesn&amp;rsquo;t fall within
our definition of a view controller – the button handler just happens to be a
convenient place to put the tracking code. Also consider that &lt;em&gt;every single&lt;/em&gt;
button handler is going to have to have similar code implemented.&lt;/p&gt;

&lt;h2 id=&#34;there-has-to-be-a-better-way&#34;&gt;There has to be a better way.&lt;/h2&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating Notifications and Personalized Emails Efficiently</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/04/24/generating-notifications-and-personalized-emails-efficiently/</link>
      <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/04/24/generating-notifications-and-personalized-emails-efficiently/</guid>
      <description>&lt;p&gt;We recently launched a new personalized email here at &lt;a href=&#34;https://artsy.net&#34;&gt;Artsy&lt;/a&gt; that features content that a given user might find interesting. The goal of this post is to describe how we built a backend system that efficiently generates these e-mails for all our users. I&amp;rsquo;ll talk about the first, naive implementation that had performance problems right away, and how the second implementation (currently in production) solved those issues, and whose behavior at scale is well-defined and understood. I won&amp;rsquo;t go into the details of the design and layout of the mail itself and how we render the content - there are several earlier blog posts that deal with those: &lt;a href=&#34;http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/&#34;&gt;Presenters and Memoization&lt;/a&gt;, &lt;a href=&#34;http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/&#34;&gt;Pinterest-style Layouts&lt;/a&gt; and &lt;a href=&#34;http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/&#34;&gt;Email Layouts and Responsiveness&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-04-24-generating-notifications-and-personalized-emails-efficiently/percy_example.png&#34; alt=&#34;Personalized Email Example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building an English Auction with MongoDB</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/04/17/building-an-english-auction-with-mongodb/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/04/17/building-an-english-auction-with-mongodb/</guid>
      <description>&lt;p&gt;Artsy ran several successful auctions over the past few months. The first, &lt;a href=&#34;https://artsy.net/feature/two-x-two&#34;&gt;TWO x TWO&lt;/a&gt;, raised hundreds of thousands of dollars for amfAR (the AIDS Research foundation), and the Dallas Museum of Art. It was followed by &lt;a href=&#34;https://artsy.net/feature/ici-benefit-auction&#34;&gt;Independent Curators International&lt;/a&gt;, at which Artsy launched on-site auction projection screens, which displayed competing bids coming in online from places around the world, like Oslo and Santa Monica, in realtime. Users could place bids on the website, via the iPhone app or with one of the Artsy representatives in the room carrying an iPad.  All the auction lots sold, and Artsy helped ICI to raise 50% more than its target revenue goal. Other, recent Artsy auctions include &lt;a href=&#34;https://artsy.net/feature/public-art-fund-2014-spring-benefit&#34;&gt;Public Art Fund&lt;/a&gt; and the &lt;a href=&#34;https://artsy.net/feature/brooklyn-artists-ball&#34;&gt;Brooklyn Artists Ball&lt;/a&gt;, benefitting the Brooklyn Museum.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-04-17-implementing-bidding-in-an-english-auction-with-mongodb/ici-live-auction.jpg&#34; alt=&#34;ICI Auction: Live&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The domain of auctions is a fascinating one, and includes everything from buying items on eBay to trading livestock and selling investment products on the stock exchange. For those interested in the large spectrum of auctions I highly recommend &lt;a href=&#34;http://www.sci.brooklyn.cuny.edu/~parsons/projects/mech-design/publications/bluffers-final.pdf&#34;&gt;Auctions and bidding: A guide for computer
scientists&lt;/a&gt; by Simon Parsons (CUNY), Juan A. Rodriguez-Aguilar (CSIC) and Mark Klein (MIT).&lt;/p&gt;

&lt;p&gt;At Artsy we implemented a classic English auction with, so called, &amp;ldquo;book bids&amp;rdquo;. I spent a fair amount of time visiting engineering teams that have built internet auctions, most of which were transactional systems where taking a position on an item involved starting a transaction, running an auction round and committing the changes. In contrast, we chose to deliver a simpler, eventually consistent system on top of MongoDB, in which all data is immutable and where some level of serialization occurs within a single background process.&lt;/p&gt;

&lt;p&gt;In this post we&amp;rsquo;ll go over some data modeling and examine the auction engine implementation details.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Refactoring Infrastructure</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/04/02/refactoring-infrastructure/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/04/02/refactoring-infrastructure/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://martinfowler.com/books/refactoring.html&#34;&gt;Refactoring&lt;/a&gt; usually describes chages to &lt;em&gt;code&lt;/em&gt;. Specifically, small changes that bring a codebase closer to the desired state. By making these changes incrementally and without modifying the end-to-end behavior, we avoid risk and the intermediate broken states that usually plague large-scale changes. But refactoring need not be limited to code. It&amp;rsquo;s also an effective way to make infrastructure improvements.&lt;/p&gt;

&lt;p&gt;Take the most common&amp;ndash;and simplest&amp;ndash;example: database schema changes. Environments that demand constant uptime have long had to chunk schema changes into steps that allow for a graceful transition. In the simple case of replacing a column, this might look like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the new column&lt;/li&gt;
&lt;li&gt;Redirect code references there from the old column&lt;/li&gt;
&lt;li&gt;Migrate data as necessary, and finally&lt;/li&gt;
&lt;li&gt;Remove the old column&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The same sequencing applies to making larger infrastructure changes gracefully. Some recent examples from our own experience:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Presenters and Memoization: Moving Logic out of Templates</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/</guid>
      <description>&lt;p&gt;When dealing with rendering data for an email, one frequently has to make many database calls to assemble the required data. This can be slow, and depending on how you structure the code that is assembling the data vs rendering the data in a template, it&amp;rsquo;s very easy to be making repeated calls, which can significantly slow down your process. Additionally, whether you are using &lt;a href=&#34;http://haml.info/&#34;&gt;Haml&lt;/a&gt;, &lt;a href=&#34;http://mustache.github.io/&#34;&gt;Mustache&lt;/a&gt;, &lt;a href=&#34;http://jade-lang.com/&#34;&gt;Jade&lt;/a&gt;, or any other templating language, embedding too much logic in the template can making things hard to maintain (especially if some logic lives in the template and some elsewhere in your domain code). Of course some logic in the template (a conditional: should I render this section?, or loops: render this hash of data) is necessary, but I like to keep as much out of there as possible. It&amp;rsquo;s easier to optimize, debug and maintain that logic elsewhere, and also writing complex logic in &lt;a href=&#34;https://www.ruby-lang.org&#34;&gt;Ruby&lt;/a&gt; is much more fun than in a templating language!&lt;/p&gt;

&lt;p&gt;In this article I&amp;rsquo;ll present what I&amp;rsquo;ve been doing to keep my templates relatively logic-free, and how I make sure I don&amp;rsquo;t repeat any heavy database calls in assembling my data.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Detecting trends using Forgetsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/detecting-trends-with-forgetsy/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/detecting-trends-with-forgetsy/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-03-17-detecting-trends-with-forgetsy/monolith.jpg&#34; alt=&#34;Armory Trending Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As part of our partnership with &lt;a href=&#34;https://www.thearmoryshow.com/&#34;&gt;The New York Armory Show&lt;/a&gt; this year, we installed a number of terminals throughout the fair. These screens used our own real-time data to display an ever shifting set of trending artworks, artists, and booths, to the attendees.&lt;/p&gt;

&lt;p&gt;Out of this work, we&amp;rsquo;ve open-sourced &lt;a href=&#34;https://github.com/cavvia/forgetsy&#34;&gt;Forgetsy&lt;/a&gt;, a lightweight Ruby trending library. Put simply, Forgetsy implements data structures that forget. Loosely based on Bit.ly&amp;rsquo;s &lt;a href=&#34;http://word.bitly.com/post/41284219720/forget-table&#34;&gt;Forget Table&lt;/a&gt; concept, Forgetsy uses decaying counters to track temporal trends in categorical distributions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ruby Helper to Group Artworks into a Pinterest-style Layout for Email</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-03-17-ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/two-column-layout.png&#34; alt=&#34;Example of two column layout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Something we&amp;rsquo;d like to do is email our users some suggested artworks as part of their personalized emails. The layout of those suggestions should look something like our newly re-designed &lt;a href=&#34;https://artsy.net/browse/artworks?price_range=-1%3A1000000000000&#34;&gt;Browse&lt;/a&gt; page, with a &amp;lsquo;salon&amp;rsquo; style layout. Here&amp;rsquo;s some simple Ruby code that can group artworks into columns for you, that can then be directly rendered in an email (via &lt;a href=&#34;http://haml.info/&#34;&gt;Haml&lt;/a&gt;, &lt;a href=&#34;http://mustache.github.io/&#34;&gt;Mustache&lt;/a&gt;, &lt;a href=&#34;http://jade-lang.com/&#34;&gt;Jade&lt;/a&gt;, or your templating language of choice.)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Some Tips for Email Layout and Responsiveness</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/some-tips-for-email-layout-and-responsiveness/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/some-tips-for-email-layout-and-responsiveness/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/analytics.png&#34; alt=&#34;Example of Analytics Email&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Email can be one of the most powerful ways to engage with your users, and can serve a multitude of purposes. It can be used as a way to highlight selected content (weekly/monthly newsletters, &amp;lsquo;year in review&amp;rsquo;, etc.), provide a service to users (analytics breakdown of visits to your profile/favorites page), or re-engage with users (new feature announcements, etc.). Here at Artsy we use all of these kinds of emails and have found them to be a very valuable asset. However, best practices for template layout and CSS (keeping in mind the variety of devices and screen sizes that your users have) are quite different from, and very far behind, the current HTML5 standards and practices for making beautiful web pages. In this article, I&amp;rsquo;d like to present some techniques I&amp;rsquo;ve successfully used at Artsy to create emails that look good on your browser or mobile device, in some of the most popular email clients out there.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Isolating Spurious and Nondeterministic Tests</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/01/30/isolating-spurious-and-nondeterministic-tests/</link>
      <pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/01/30/isolating-spurious-and-nondeterministic-tests/</guid>
      <description>&lt;p&gt;Testing is a critical part of our workflow at &lt;a href=&#34;https://artsy.net&#34;&gt;Artsy&lt;/a&gt;. It gives us confidence to make regular, aggressive enhancements. But anyone who has worked with a large, complex test suite has struggled with occasional failures that are difficult to reproduce or fix.&lt;/p&gt;

&lt;p&gt;These failures might be due to slight timing differences or lack of proper isolation between tests. Integration tests are particularly thorny, since problems can originate not only in application code, but in the browser, testing tools (e.g., &lt;a href=&#34;http://docs.seleniumhq.org/&#34;&gt;Selenium&lt;/a&gt;), database, network, or external APIs and dependencies.&lt;/p&gt;

&lt;h2 id=&#34;the-quarantine&#34;&gt;The Quarantine&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve been &lt;a href=&#34;http://artsy.github.io/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/&#34;&gt;automatically retrying failed tests&lt;/a&gt;, with some success. However, these problems tend to get worse. (If you have 10 tests that each have a 1% chance of failing, roughly 1 in 10 builds will fail. If you have 50, 4 in 10 builds will fail.)&lt;/p&gt;

&lt;p&gt;Martin Fowler offers the most compelling thoughts on this topic in &lt;a href=&#34;http://martinfowler.com/articles/nonDeterminism.html&#34;&gt;Eradicating Non-Determinism in Tests&lt;/a&gt;. (Read it, really.) He suggests quarantining problematic tests in a separate suite, so they don&amp;rsquo;t block the build pipeline.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rendering on the Server and Client in Node.js</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/12/18/rendering-on-the-server-and-client-in-node-dot-js/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/12/18/rendering-on-the-server-and-client-in-node-dot-js/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/isomorphic.png&#34; alt=&#34;Diagram of Shared Server/Client Architecture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At Artsy we&amp;rsquo;ve been building &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; applications that share code and rendering between the server and browser. We&amp;rsquo;ve seen many benefits from this &amp;ndash; pages load faster, we can optimize SEO, developers are more productive, and JavaScript coding is just an overall better experience.&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;re happy to announce &lt;a href=&#34;http://ezeljs.com/&#34;&gt;Ezel&lt;/a&gt;, our open source boilerplate we use to bootstrap our Node projects and the &lt;a href=&#34;https://github.com/artsy/benv&#34;&gt;various&lt;/a&gt; &lt;a href=&#34;https://github.com/artsy/backbone-super-sync&#34;&gt;node&lt;/a&gt; &lt;a href=&#34;https://github.com/artsy/sharify&#34;&gt;modules&lt;/a&gt; that built up to it.&lt;/p&gt;

&lt;p&gt;In his article, &lt;a href=&#34;http://nerds.airbnb.com/isomorphic-JavaScript-future-web-apps/&#34;&gt;&lt;em&gt;Isomorphic JavaScript: The Future of Web Apps&lt;/em&gt;&lt;/a&gt;, Spike Brehm from AirBnB describes this growing trend well and we&amp;rsquo;re excited to be a part of it. In this article I&amp;rsquo;ll tell Artsy&amp;rsquo;s story of moving from a single monolithic application to modular &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone&lt;/a&gt; apps that run in Node and the browser and consume our external API.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Upgrading to Mongoid 4.x</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/11/07/upgrading-to-mongoid4/</link>
      <pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/11/07/upgrading-to-mongoid4/</guid>
      <description>&lt;p&gt;I recently went through an exercise of upgrading one of Artsy&amp;rsquo;s largest web projects to the current HEAD of Mongoid 4.x. This is going to be a major release with numerous changes and I wanted to flush out bugs before the final version of the ODM is released. All Mongoid changes currently live on &lt;a href=&#34;https://github.com/mongoid/mongoid&#34;&gt;master&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;mongoid&#39;, github: &#39;mongoid/mongoid&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the process I&amp;rsquo;ve worked on making a few gems compatible with Mongoid 4 and learned a couple of things that should help you make this process smooth for your own applications.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to AWS OpsWorks</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/08/27/introduction-to-aws-opsworks/</link>
      <pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/08/27/introduction-to-aws-opsworks/</guid>
      <description>&lt;p&gt;OpsWorks is a new service from Amazon that promises to provide high-level tools to manage your EC2-based deployment. From &lt;a href=&#34;http://aws.typepad.com/aws/2013/02/aws-opsworks-flexible-application-management-in-the-cloud.html&#34;&gt;the announcement&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS OpsWorks features an integrated management experience for the entire application lifecycle including resource provisioning, configuration management, application deployment, monitoring, and access control. It will work with applications of any level of complexity and is independent of any particular architectural pattern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After scratching our heads about exactly what that meant, we tried it anyway. If you&amp;rsquo;ve been straining at the limits of your Platform as a Service (PaaS) provider, or just wishing for more automation for your EC2 deployment, you may want to try it out too.&lt;/p&gt;

&lt;p&gt;Artsy has been experimenting with OpsWorks for a few months now and recently adopted it for the production &lt;a href=&#34;http://artsy.net&#34;&gt;artsy.net&lt;/a&gt; site. We&amp;rsquo;re excited to share what we&amp;rsquo;ve learned in the process.&lt;/p&gt;

&lt;p&gt;{% include expanded_img.html url=&amp;ldquo;/images/2013-08-27-introduction-to-aws-opsworks/opsworks.png&amp;rdquo; title=&amp;ldquo;OpsWorks overview&amp;rdquo; %}&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Normalizing GMail E-Mail Addresses with CanonicalEmails</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails/</link>
      <pubDate>Sun, 23 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails/</guid>
      <description>&lt;p&gt;A whopping 49% of Artsy users have &amp;ldquo;gmail.com&amp;rdquo; email addresses. The next domain name, &amp;ldquo;hotmail.com&amp;rdquo;, doesn&amp;rsquo;t even come close, with only 6%.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-06-23-normalizing-gmail-email-addresses-with-canonical-emails/artsy-email-domains.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GMail addresses ignore periods and are case-insensitive. For example, &amp;ldquo;Donald.Duck@gmail.com&amp;rdquo; and &amp;ldquo;donaldduck@gmail.com&amp;rdquo; are the same account. You can log-in to GMail with both. Users often register with the former and try to log-in to Artsy with the latter. With so many GMail users, expect a dozen support emails per day.&lt;/p&gt;

&lt;p&gt;The solution is to normalize these emails into a canonical form.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding API Docs with Grape and Swagger</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/21/adding-api-documentation-with-grape-swagger/</link>
      <pubDate>Fri, 21 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/21/adding-api-documentation-with-grape-swagger/</guid>
      <description>&lt;p&gt;The Artsy website, Partner CMS, mobile tools, and all our hackathon experiments are built on top of a core API. We&amp;rsquo;ve put a lot of effort into documenting it internally. But developers don&amp;rsquo;t want to have to grok through code. With &lt;a href=&#34;https://github.com/intridea/grape&#34;&gt;Grape&lt;/a&gt; and &lt;a href=&#34;https://developers.helloreverb.com/swagger&#34;&gt;Swagger&lt;/a&gt;, adding an API explorer and exposing the API documentation has never been easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-06-21-adding-api-documentation-with-grape-swagger/swagger-ui.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing Headless Backbone Tests With Node.js</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/14/writing-headless-backbone-tests-with-node-dot-js/</link>
      <pubDate>Fri, 14 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/14/writing-headless-backbone-tests-with-node-dot-js/</guid>
      <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Write fast, headless, tests for Backbone using Node.js. See this project as an example  &lt;a href=&#34;https://github.com/craigspaeth/backbone-headless-testing&#34;&gt;https://github.com/craigspaeth/backbone-headless-testing&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-brief-history&#34;&gt;A Brief History&lt;/h2&gt;

&lt;p&gt;Artsy is mostly a thick client &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone&lt;/a&gt; app that sits on &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Rails&lt;/a&gt; and largely depends on &lt;a href=&#34;http://jnicklas.github.io/capybara/&#34;&gt;Capybara&lt;/a&gt; (&lt;a href=&#34;http://docs.seleniumhq.org/&#34;&gt;Selenium&lt;/a&gt; backed bot that clicks around Firefox) for testing it&amp;rsquo;s javascript. This leads to some seriously brittle and slow integration tests. &lt;a href=&#34;http://artsy.github.io/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/&#34;&gt;Despite being able to wrangle Capybara&lt;/a&gt; to do most of our client-side testing, we knew there must be a better way.&lt;/p&gt;

&lt;p&gt;When building a CMS app for our gallery partners to manage their Artsy inventory, we built a new Backbone app on top of &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt;. The result was a headless test suite that runs around 60 times faster.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how it&amp;rsquo;s done.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bootstrapping JSON Data with Rails and Backbone.js</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js/</link>
      <pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://artsy.net&#34;&gt;artsy.net website&lt;/a&gt; is a Backbone.js application that talks to a server-side RESTful Grape API sitting on top of a Rails app which serves minimal HTML markup. The latter includes such things as a page title, along with links to JavaScript and stylesheet packages. A page loads, scripts run, data is fetched from the API. The result is merged into a HAMLJS template and rendered client-side.&lt;/p&gt;

&lt;p&gt;Building this kind of one-page apps allows for clean separation between the presentation and API layers. The downside is that it will slow page render times - fetching data after page load means waiting for an AJAX request to complete before displaying anything.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re many solutions to this problem, all involving some kind of server-side rendering. You could, for example, share views and JavaScript between client and server. This would be a major paradigm shift for a large application like ours and not something we could possibly maneuver in a short amount of time.&lt;/p&gt;

&lt;p&gt;Without changing the entire architecture of the system, how can we bootstrap JSON data server-side and avoid the data roundtrip on every page load?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ARAnalytics - Analytics for iOS Apps</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/10/aranalytics/</link>
      <pubDate>Wed, 10 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/10/aranalytics/</guid>
      <description>&lt;p&gt;In both my &lt;a href=&#34;http://orta.github.com&#34;&gt;personal apps&lt;/a&gt; and Artsy Folio, I&amp;rsquo;m always after a deeper understanding of how people use the app. There&amp;rsquo;s three ways to do this: ask users, watch users and track usage. I&amp;rsquo;d like to talk about the third of these.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve experimented with quite a lot of analytics tools for the Artsy website, and it seemed fitting to do the same for our mobile app. We wanted the freedom to change the analytics tool without having to change the code, and so &lt;a href=&#34;http://github.com/orta/ARAnalytics&#34;&gt;ARAnalytics&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Easter Egg for Curl</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/01/an-easter-egg-for-curl/</link>
      <pubDate>Mon, 01 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/01/an-easter-egg-for-curl/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s implement an Easter egg that requires &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt; and is HTTP-compliant.&lt;/p&gt;

&lt;p&gt;We accept access tokens on our API endpoints. These can come from an &lt;code&gt;access_token&lt;/code&gt; query string parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://api.artsy.net/api/v1/system/up?access_token=invalid -v

&amp;lt; HTTP/1.1 401 Unauthorized
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 24

{ &amp;quot;error&amp;quot; : &amp;quot;Unauthorized&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, so good. Now try this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://api.artsy.net/api/v1/system/up?access_token=10013 -v

&amp;lt; HTTP/1.1 401 Broadway
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 76

{ &amp;quot;error&amp;quot; : &amp;quot;Inspiration from the Engineering team at http://artsy.github.com&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What?! &lt;strong&gt;401 Broadway&lt;/strong&gt;? See, our office address is &lt;em&gt;401 Broadway, 10013, New York, NY&lt;/em&gt;. We just tried to add a more developer-friendly way to find us in the New York grid. And here&amp;rsquo;s the view from our 25th floor office - that&amp;rsquo;s SOHO right below us and the Empire State Building a bit North.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-04-01-an-easter-egg-for-curl/artsy-office-view.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&#34;https://github.com/zamiang&#34;&gt;@zamiang&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Easter egg implementation follows.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Musical Chairs</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/03/29/musical-chairs/</link>
      <pubDate>Fri, 29 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/03/29/musical-chairs/</guid>
      <description>&lt;p&gt;At Artsy we make Artsy Folio. Folio is an awesome portfolio app that shows our gallery and museum partners their artworks in one place, allows them to easily get information about their inventory and to send works by email to their contacts.&lt;/p&gt;

&lt;p&gt;Folio has to deal with large multi-gigabyte syncs in order to operate offline. That makes for a great user experience, but for the developer working on the sync, it&amp;rsquo;s not as pleasant. Combined with our use of Core Data, the app’s maturity, and dealing with data store migrations, things can get hairy. We needed a tool that could freeze and restore app data at will, obviating the need for constant syncing and resyncing.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why I built &lt;a href=&#34;https://github.com/orta/chairs&#34;&gt;chairs&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Impact of Heroku&#39;s Routing Mesh and Random Routing</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/17/impact-of-heroku-routing-mesh-and-random-routing/</link>
      <pubDate>Sun, 17 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/17/impact-of-heroku-routing-mesh-and-random-routing/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://rapgenius.com/James-somers-herokus-ugly-secret-lyrics&#34;&gt;Heroku&amp;rsquo;s Ugly Secret&lt;/a&gt; blog post went viral last week. I &lt;a href=&#34;http://code.dblock.org/in-defense-of-heroku&#34;&gt;wrote&lt;/a&gt; in defense of Heroku, which has now responded with an official &lt;a href=&#34;https://blog.heroku.com/archives/2013/2/16/routing_performance_update/&#34;&gt;Routing Performance Update&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Random request queuing has been discussed in the past in &lt;a href=&#34;http://tiwatson.com/blog/2011-2-17-heroku-no-longer-using-a-global-request-queue&#34;&gt;Tim Watson&amp;rsquo;s post&lt;/a&gt; based on a &lt;a href=&#34;https://groups.google.com/forum/?fromgroups=#!msg/heroku/8eOosLC5nrw/Xy2j7GapebIJ&#34;&gt;response&lt;/a&gt; by Heroku&amp;rsquo;s Adam Wiggins. While the documentation may not have been accurate or even somewhat misleading, we, at Artsy, understood the strategy and the limitations of the routing mesh for quite sometime. Therefore, we have been making continuous efforts to improve our application&amp;rsquo;s performance and reduce the negative impact of random routing inside the routing mesh over the past few months.&lt;/p&gt;

&lt;p&gt;One thing we didn&amp;rsquo;t do, was to measure the actual wait time inside a dyno. In restrospect, it seems obvious that we should have. In this post we&amp;rsquo;ll describe a middleware to do so. This is entirely based on the work of &lt;a href=&#34;https://gist.github.com/daveyeu/4960893&#34;&gt;David Yeu&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/jasonrclark/d82a1ea7695daac0b9ee&#34;&gt;Jason R Clark&lt;/a&gt; and RG&amp;rsquo;s own &lt;a href=&#34;https://gist.github.com/a-warner/f5db30857ed3423cea79&#34;&gt;Andrew Warner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this code in place, here&amp;rsquo;s a 12 hour graph of our website&amp;rsquo;s API performance. The dyno wait time for our application, in green, averaged 61.1ms for a total of 301ms average per request, which is 1/5th of the total request time. It&amp;rsquo;s certainly a lot, but we do spend a lot more time in our own code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-02-17-impact-of-heroku-routing-mesh-and-random-routing/newrelic-12-hours.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Note that the single peak on the right of the graph corresponds to a dyno auto-scale job. We double the number of dynos with early morning traffic, which causes new dynos to boot up and accumulate requests before they are &amp;ldquo;warm&amp;rdquo; enough to process requests at their normal rate.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Infinite Scroll with MongoDB</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/15/infinite-scroll-with-mongodb/</link>
      <pubDate>Fri, 15 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/15/infinite-scroll-with-mongodb/</guid>
      <description>&lt;p&gt;An infinite scroll can be a beautiful and functional way to present feed data. You can see ours on the &lt;a href=&#34;https://artsy.net/&#34;&gt;homepage of artsy.net&lt;/a&gt;. It works by fetching a few items from the API, then fetching some more items as the user scrolls down the feed. Each API call returns the items along with a &amp;ldquo;cursor&amp;rdquo;, which marks the position of the last item retrieved. Subsequent API calls include the cursor in the query string and the iteration resumes from there.&lt;/p&gt;

&lt;p&gt;Why use a cursor and not standard pagination? Because inserting an item on top of the feed would shift the existing items down, causing the API to return a duplicate item on the page boundary. Removing an item from the top of the feed would pull the remaining items up, causing an item to be missed in the next request on the page boundary.&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;re open-sourcing a small gem called &lt;a href=&#34;https://github.com/dblock/mongoid-scroll&#34;&gt;mongoid-scroll&lt;/a&gt;, which implements this cursor-like behavior for MongoDB using mongoid or moped. Here&amp;rsquo;s how it works.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data Corruption and Concurrent Updates to Embedded Objects with MongoDB</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/09/data-corruption-and-concurrent-updates-to-embedded-objects-with-mongoid/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/09/data-corruption-and-concurrent-updates-to-embedded-objects-with-mongoid/</guid>
      <description>&lt;p&gt;We use &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; at Artsy as our primary data store via the &lt;a href=&#34;http://mongoid.org/&#34;&gt;Mongoid ODM&lt;/a&gt;. Eventually, we started noticing data corruption inside embedded objects at an alarming rate of 2-3 records a day. The number of occurrences increased rapidly with load as our user growth accelerated.&lt;/p&gt;

&lt;p&gt;The root cause was not a HN-worthy sensational declaration about how MongoDB trashes data, but our lack of understanding of what can and cannot be concurrently written to the database, neatly hidden behind the object data mapping layer.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Master the Heroku CLI with Heroku Commander</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/01/master-heroku-command-line-with-heroku-commander/</link>
      <pubDate>Fri, 01 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/01/master-heroku-command-line-with-heroku-commander/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-02-01-master-heroku-command-line-with-heroku-commander/heroku-commander.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Heroku users frequently run the &lt;strong&gt;heroku&lt;/strong&gt; command-line tool that ships with the &lt;a href=&#34;https://toolbelt.heroku.com/&#34;&gt;Heroku Toolbelt&lt;/a&gt;. It has two very convenient features: it will remember API credentials and default to the &amp;ldquo;heroku&amp;rdquo; GIT remote to figure out the application to connect to. Neither of these features are available in the Heroku client API, so it&amp;rsquo;s not unusual to find developers invoke the Heroku CLI from Rake tasks and other automation scripts.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re several problems with using the Heroku CLI for automation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The exit code from &lt;code&gt;heroku run&lt;/code&gt; is not the exit code from the process being run on Heroku. See &lt;a href=&#34;https://github.com/heroku/heroku/issues/186&#34;&gt;#186&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Gathering console output from &lt;code&gt;heroku run:detached&lt;/code&gt; requires an external &lt;code&gt;heroku logs --tail&lt;/code&gt; process that will never finish.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/dblock/heroku-commander&#34;&gt;heroku-commander&lt;/a&gt; gem wraps execution of the Heroku CLI to overcome these common limitations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create MongoDB Command-Lines from Mongoid Configuration</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/01/31/create-mongodb-command-lines-with-mongo/</link>
      <pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/01/31/create-mongodb-command-lines-with-mongo/</guid>
      <description>&lt;p&gt;We use MongoDB as our primary store and have built a healthy amount of automation around various database instances and operational environments. For example, we backup databases to S3 using &lt;code&gt;mongodump&lt;/code&gt;, mirror data between instances with &lt;code&gt;mongorestore&lt;/code&gt; and often need to open a MongoDB shell with &lt;code&gt;mongo&lt;/code&gt; to examine data at the lowest level.&lt;/p&gt;

&lt;p&gt;Generating MongoDB command-lines is tedious and error-prone. Introducing a new gem called &lt;a href=&#34;https://github.com/dblock/mongoid-shell&#34;&gt;mongoid-shell&lt;/a&gt; to help with this. The library can generate command-lines for various MongoDB shell tools from your Mongoid configuration.&lt;/p&gt;

&lt;p&gt;For example, connect to your production MongoDB instance from a &lt;code&gt;db:production:shell&lt;/code&gt; Rake task.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :db
  namespace :production
    task :shell
      Mongoid.load! &amp;quot;mongoid.yml&amp;quot;, :production
      system Mongoid::Shell::Commands::Mongo.new.to_s
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improving Performance of Mongoid-Cached-Json</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/01/20/improving-performance-of-mongoid-cached-json/</link>
      <pubDate>Sun, 20 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/01/20/improving-performance-of-mongoid-cached-json/</guid>
      <description>&lt;p&gt;Last year, we have open-sourced and made extensive use of two Ruby libraries in our API: &lt;a href=&#34;https://github.com/dblock/mongoid-cached-json&#34;&gt;mongoid-cached-json&lt;/a&gt; and &lt;a href=&#34;https://github.com/artsy/garner&#34;&gt;garner&lt;/a&gt;. Both transform the procedural nightmare of caching and JSON generation into a declarative and easily manageable DSL. It was worth the investment, since our service spends half of its time generating JSON and reading from and writing to Memcached.&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;ve released mongoid-cached-json 1.4 with two interesting performance improvements.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debugging Bundler Issues on Heroku</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/01/15/debugging-bundler-issues-with-heroku/</link>
      <pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/01/15/debugging-bundler-issues-with-heroku/</guid>
      <description>&lt;p&gt;A few days ago we have started seeing the Heroku deployments of one of our applications randomly hang during &lt;code&gt;bundle install&lt;/code&gt;. The problem worsened with time and we were not able to do a deployment for days.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push -f git@heroku.com:application.git FETCH_HEAD:master
-----&amp;gt; Deleting 12 files matching .slugignore patterns.
-----&amp;gt; Ruby/Rails app detected
-----&amp;gt; Using Ruby version: ruby-1.9.3
-----&amp;gt; Installing dependencies using Bundler version 1.3.0.pre.5
       Running: bundle install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin
       Fetching gem metadata from http://rubygems.org/.......
       Fetching gem metadata from http://rubygems.org/..
/app/slug-compiler/lib/utils.rb:66:in `block (2 levels) in spawn&#39;: command=&#39;/app/slug-compiler/lib/../../tmp/buildpacks/ruby/bin/compile /tmp/build_1p6071sni4hh1 /app/tmp/repo.git/.cache&#39; exit_status=0 out=&#39;&#39; at=timeout elapsed=900.1056394577026 (Utils::TimeoutError)
  from /app/slug-compiler/lib/utils.rb:52:in `loop&#39;
  from /app/slug-compiler/lib/utils.rb:52:in `block in spawn&#39;
  from /app/slug-compiler/lib/utils.rb:47:in `popen&#39;
  from /app/slug-compiler/lib/utils.rb:47:in `spawn&#39;
  from /app/slug-compiler/lib/buildpack.rb:37:in `block in compile&#39;
  from /app/slug-compiler/lib/buildpack.rb:35:in `fork&#39;
  from /app/slug-compiler/lib/buildpack.rb:35:in `compile&#39;
  from /app/slug-compiler/lib/slug.rb:497:in `block in run_buildpack&#39;
 !     Heroku push rejected, failed to compile Ruby/rails app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seeing bundler hang on &amp;ldquo;Fetching gem metadata from &lt;a href=&#34;http://rubygems.org/&amp;quot;&#34;&gt;http://rubygems.org/&amp;quot;&lt;/a&gt;, my immediate reaction was to blame the RubyGems Dependency API for its poor performance and attempt the &lt;a href=&#34;http://hone.herokuapp.com/bundler%20heroku/2012/10/22/rubygems-and-the-dependency-api.html&#34;&gt;recommended workaround&lt;/a&gt; of switching to &lt;em&gt;&lt;a href=&#34;http://bundler-api.herokuapp.com&#34;&gt;http://bundler-api.herokuapp.com&lt;/a&gt;&lt;/em&gt;. That didn&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;I also tried to reproduce the issue on a local environment, including a (what I thought was) a completely clean machine at no avail. My &lt;code&gt;bundle install&lt;/code&gt; would always succeed.&lt;/p&gt;

&lt;p&gt;Finally, everything pointed at an infrastructure problem with Heroku itself, so I opened a ticket (#72648), &lt;a href=&#34;https://twitter.com/dblockdotorg/status/290221530892365824&#34;&gt;tweeted&lt;/a&gt; endlessly to Heroku devs, pinged a  contact at Heroku on Skype and generally annoyed people for 5 straight days. It was a frustrating problem and I was getting no useful help.&lt;/p&gt;

&lt;p&gt;Fast forward, this turned out to be &lt;a href=&#34;https://github.com/carlhuda/bundler/issues/2248&#34;&gt;an issue in Bundler&lt;/a&gt;. Narrowing it down would have been relatively easy if I had known where to look.&lt;/p&gt;

&lt;p&gt;I hope this post helps you with similar issues.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beat Heroku&#39;s 60 Seconds Application Boot Timeout with a Proxy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/12/13/beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/</link>
      <pubDate>Thu, 13 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/12/13/beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-12-13-beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/heroku-logo-light-234x60.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Heroku will log an &lt;a href=&#34;https://devcenter.heroku.com/articles/error-codes#r10-boot-timeout&#34;&gt;R10 - Boot Timeout&lt;/a&gt; error when a web process takes longer than 60 seconds to bind to its assigned port. This error is often caused by a process being unable to reach an external resource, such as a database or because you have a lot of gems in your &lt;code&gt;Gemfile&lt;/code&gt; which take a long time to load.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Dec 12 12:12:12 prod heroku/web.1:
  Error R10 (Boot timeout)
  Web process failed to bind to $PORT within 60 seconds of launch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s currently no way to increase this boot timeout, but we can beat it with a proxy implemented by our new &lt;a href=&#34;https://github.com/dblock/heroku-forward&#34;&gt;heroku-forward&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Measuring Performance in Grape APIs with NewRelic RPM</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/29/measuring-performance-in-grape-apis-with-new-relic/</link>
      <pubDate>Thu, 29 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/29/measuring-performance-in-grape-apis-with-new-relic/</guid>
      <description>&lt;p&gt;Knowing how well your API performs in real time is essential to any successful project. That&amp;rsquo;s because you can&amp;rsquo;t fix what you can&amp;rsquo;t measure.&lt;/p&gt;

&lt;p&gt;We use and heavily contribute to &lt;a href=&#34;http://github.com/intridea/grape&#34;&gt;Grape&lt;/a&gt;, a Ruby API DSL. Grape is a Rack middleware and we have been reporting API performance data to &lt;a href=&#34;http://newrelic.com/&#34;&gt;NewRelic&lt;/a&gt; with code from &lt;a href=&#34;http://code.dblock.org/new-relic-performance-instrumentation-with-grape-api&#34;&gt;my older blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s time to improve the reporting implementation and address performance monitoring in both development and production environments. Here&amp;rsquo;s what a single API request breakdown is going to look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/transaction-detail.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Friendly URLs with Mongoid::Slug</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/22/friendly-urls-with-mongoid-slug/</link>
      <pubDate>Thu, 22 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/22/friendly-urls-with-mongoid-slug/</guid>
      <description>&lt;p&gt;All Artsy URLs shared publicly are humanly readable. For example, you&amp;rsquo;ll find all Barbara Kruger&amp;rsquo;s works at &lt;a href=&#34;https://artsy.net/artist/barbara-kruger&#34;&gt;artsy.net/artist/barbara-kruger&lt;/a&gt; and a post by Hyperallergic entitled &amp;ldquo;Superfluous Men Can&amp;rsquo;t Get No Satisfaction&amp;rdquo; at artsy.net/hyperallergic/post/superfluous-men-cant-get-no-satisfaction. This is a lot prettier than having &lt;code&gt;id=42&lt;/code&gt; in the browser&amp;rsquo;s address and is a big improvement for SEO.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-11-22-friendly-urls-with-mongoid-slug/barbara-kruger.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;We construct these URLs with a gem called &lt;a href=&#34;https://github.com/digitalplaywright/mongoid-slug&#34;&gt;mongoid_slug&lt;/a&gt;. Interesting implementation details under the cut.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Monitor 503s and Timeout Requests on Heroku</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku/</link>
      <pubDate>Thu, 15 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku/</guid>
      <description>&lt;p&gt;We have recently started hitting an unusually high number of &amp;ldquo;503: Service Unavailable&amp;rdquo; errors with one of our applications on Heroku. What are these? How can we monitor their quantity and frequency? What&amp;rsquo;s the fix?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-11-15-how-to-monitor-503s-and-timeout-on-heroku/503-error.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>So you want to do a CSS3 3D transform?</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/10/18/so-you-want-to-do-a-css3-3d-transform/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/10/18/so-you-want-to-do-a-css3-3d-transform/</guid>
      <description>&lt;p&gt;This post details the first of many challenges we faced in 3D
transforming the &lt;a href=&#34;http://artsy.net&#34;&gt;homepage of Artsy&lt;/a&gt; (inspired by
&lt;a href=&#34;https://github.com/hakimel/meny&#34;&gt;Meny&lt;/a&gt;): detecting CSS 3D transform
support.&lt;/p&gt;

&lt;p&gt;Front-end development is messy in today&amp;rsquo;s fragmented world. At Artsy,
our goal is to do what it takes to provide an incredible experience
for &lt;em&gt;all&lt;/em&gt; of our users (IE8+, iOS and the usual suspects). Deploying
bleeding edge tech, like CSS 3D transforms, is an exercise in
compromising principals for practicality &amp;ndash; and managing these
&amp;ldquo;compromises&amp;rdquo; in well-documented code.&lt;/p&gt;

&lt;p&gt;We looked to &lt;a href=&#34;http://modernizr.com/&#34;&gt;Modernizr&amp;rsquo;s&lt;/a&gt; feature detection approach to provide us with
a reliable way to detect CSS3 3D transform support across browsers. They have some
&lt;a href=&#34;https://github.com/Modernizr/Modernizr/issues/590&#34;&gt;well&lt;/a&gt;-
&lt;a href=&#34;https://github.com/Modernizr/Modernizr/issues/465&#34;&gt;documented&lt;/a&gt;
&lt;a href=&#34;https://github.com/Modernizr/Modernizr/issues/240&#34;&gt;struggles&lt;/a&gt; around
the issue. After flipping most of the tables in the office ┻━┻ ︵ヽ
(`Д´)ﾉ︵﻿ ┻━┻ , we settled on user agent sniffing as the most robust
method for detecting CSS3 3D transform support. But why did none
of the available methods work for us?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The perils of iOS user agent strings</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/10/18/the-perils-of-ios-user-agent-sniffing/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/10/18/the-perils-of-ios-user-agent-sniffing/</guid>
      <description>&lt;p&gt;There is a great deal of misinformation on the web about detecting an
iPad or an iPhone in JavaScript. The
&lt;a href=&#34;http://stackoverflow.com/a/4617648&#34;&gt;top answer on stackoverflow&lt;/a&gt; -
and many &lt;a href=&#34;http://www.sitepoint.com/identify-apple-iphone-ipod-ipad-visitors/&#34;&gt;blog posts&lt;/a&gt; using &lt;a href=&#34;http://www.askdavetaylor.com/detect_apple_iphone_user_web_site_server.html&#34;&gt;this technique&lt;/a&gt; - are all incorrect.&lt;/p&gt;

&lt;p&gt;The conventional wisdom is that iOS devices have a user agent for
Safari and a user agent for the UIWebView. This assumption is
incorrect as iOS apps can and do
&lt;a href=&#34;http://stackoverflow.com/a/8666438&#34;&gt;customize their user agent&lt;/a&gt;. The
main offender here is Facebook, whose iOS app alone accounts for about
1-3% of Artsy&amp;rsquo;s daily traffic.&lt;/p&gt;

&lt;p&gt;Compare these user agent strings from iOS devices:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# iOS Safari
iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3
iPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3

# UIWebView
iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/98176
iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Mobile/8B117

# Facebook UIWebView
iPad: Mozilla/5.0 (iPad; U; CPU iPhone OS 5_1_1 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1.1;FBBV/4110.0;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/5.1.1;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US;FBSF/1.0]
iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; ru_RU) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1;FBBV/4100.0;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.1.1;FBSS/2; tablet;FBLC/en_US]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Artsy&#39;s Technology Stack</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/10/10/artsy-technology-stack/</link>
      <pubDate>Wed, 10 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/10/10/artsy-technology-stack/</guid>
      <description>&lt;p&gt;The public launch of Artsy via the &lt;a href=&#34;http://www.nytimes.com/2012/10/09/arts/design/artsy-is-mapping-the-world-of-art-on-the-web.html&#34;&gt;New York Times&lt;/a&gt; is a good opportunity to describe our current technology stack.&lt;/p&gt;

&lt;p&gt;What you see when you go to &lt;a href=&#34;http://artsy.net&#34;&gt;Artsy&lt;/a&gt; is a website built with &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone.js&lt;/a&gt; and written in &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt;. It renders JSON data from &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt;, &lt;a href=&#34;https://github.com/intridea/grape&#34;&gt;Ruby Grape&lt;/a&gt; and &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; services. Text search is powered by &lt;a href=&#34;http://lucene.apache.org/solr/&#34;&gt;Apache Solr&lt;/a&gt;. We also have an &lt;a href=&#34;https://developer.apple.com/devcenter/ios/index.action&#34;&gt;iOS&lt;/a&gt; application that talks to the same back-end Ruby API. We run all our web processes on &lt;a href=&#34;http://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; and all job queues on &lt;a href=&#34;http://aws.amazon.com/&#34;&gt;Amazon EC2&lt;/a&gt;. Our data store is &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;, operated by &lt;a href=&#34;https://mongohq.com/&#34;&gt;MongoHQ&lt;/a&gt; and we have some &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt; instances. Our assets, including images, are served from &lt;a href=&#34;http://aws.amazon.com/s3/&#34;&gt;Amazon S3&lt;/a&gt; via the &lt;a href=&#34;http://aws.amazon.com/cloudfront/&#34;&gt;CloudFront CDN&lt;/a&gt;. We heavily rely on &lt;a href=&#34;http://memcached.org/&#34;&gt;Memcached&lt;/a&gt; Heroku addon and we use &lt;a href=&#34;http://sendgrid.com/&#34;&gt;SendGrid&lt;/a&gt; and &lt;a href=&#34;http://mailchimp.com/&#34;&gt;MailChimp&lt;/a&gt; to send e-mail. Systems are monitored by a combination of &lt;a href=&#34;http://newrelic.com/&#34;&gt;New Relic&lt;/a&gt; and &lt;a href=&#34;https://www.pingdom.com/&#34;&gt;Pingdom&lt;/a&gt;. All of this is built, tested and deployed with &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-10-10-artsy-technology-stack/artsy-infrastructure.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll go in depth in our current system architecture and tell you the story about how these parts all came together.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Run RSpec Test Suites in Parallel with JenkinsCI Build Flow</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/</guid>
      <description>&lt;p&gt;We now have over 4700 RSpec examples in one of our projects. They are stable, using the techniques described in an &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/&#34;&gt;earlier post&lt;/a&gt; and organized in &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/&#34;&gt;suites&lt;/a&gt;. But they now take almost 3 hours to run, which is clearly unacceptable.&lt;/p&gt;

&lt;p&gt;To solve this, we have parallelized parts of the process with existing tools, and can turn a build around in just under an hour. This post will dive into our &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; build flow setup.&lt;/p&gt;

&lt;p&gt;To keep things simple, we&amp;rsquo;re going to only build the &lt;code&gt;master&lt;/code&gt; branch. When a change is committed on &lt;code&gt;master&lt;/code&gt; we&amp;rsquo;re going to push &lt;code&gt;master&lt;/code&gt; to a &lt;code&gt;master-ci&lt;/code&gt; branch and trigger a distributed build on &lt;code&gt;master-ci&lt;/code&gt;. Once all the parts have finished, we&amp;rsquo;ll complete the build by pushing &lt;code&gt;master-ci&lt;/code&gt; to &lt;code&gt;master-succeeded&lt;/code&gt; and notify the dev team of success or failure.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a diagram of what&amp;rsquo;s going on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-10-09-how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/master-ci.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Grid Thumbnails</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/09/13/on-grid-thumbnails/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/09/13/on-grid-thumbnails/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-09-13-on-grid-thumbnails/grid.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;Artsy Folio, our free iPad app for Gallery Partners, had been in the App Store for a couple of weeks before the iPad with a Retina display was announced. This had been something we expected internally and felt the application would be ready. We had all our image assets available in &lt;em&gt;@2x&lt;/em&gt; versions and an image pipeline that would take scaling into account. With that in mind, we changed our artwork grid view to show a double resolution image. Finally, once we were happy that it worked fine on the simulator, we sent the build off to Apple for review.&lt;/p&gt;

&lt;p&gt;The app passed review, and was Retina-ready before the actual release. But within hours of getting our hands on a real Retina iPad, we had to pull the app. This post will explain why, and what we did to work it out.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Artsy Builds Labs, Experiments and Easter Eggs</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs/</link>
      <pubDate>Wed, 12 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs/</guid>
      <description>&lt;p&gt;At Artsy Engineering we encourage a culture of experimentation with something called &lt;em&gt;labs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A new feature released into production is usually only turned on for a handful of users. We get feedback from our own team and a tiny group of early adopters, iterate, fix bugs, toss failed experiments and work on promoting complete, well behaved features to all users. The labs infrastructure gives us a chance to sleep on an idea and polish details. It also allows us to make progress continuously and flip a switch on the very last day.&lt;/p&gt;

&lt;p&gt;My favorite labs features push our collective imagination and give birth to productive brainstorms around coffee at a popular startup hangout around the corner from our Manhattan office. But the team&amp;rsquo;s favorite labs are, by far, those that ship as easter eggs. These are fun and sometimes useful features that don&amp;rsquo;t make much business sense. So, before I explain our rudimentary labs system, I want to invite you to our easter egg hunt. Check out &lt;a href=&#34;https://artsy.net/humans.txt&#34;&gt;https://artsy.net/humans.txt&lt;/a&gt; for instructions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing with Delayed Jobs</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/08/16/testing-with-delayed-jobs/</link>
      <pubDate>Thu, 16 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/08/16/testing-with-delayed-jobs/</guid>
      <description>&lt;p&gt;A mean bug made it into our production environment. It wasn&amp;rsquo;t caught by our extensive test suite and caused thousands of emails to be sent to a handful of people. The root cause was an unfortunate combination of &lt;a href=&#34;https://github.com/plataformatec/devise&#34;&gt;Devise&lt;/a&gt;, &lt;a href=&#34;https://github.com/collectiveidea/delayed_job&#34;&gt;DelayedJob&lt;/a&gt; and, of course, our own code. It was an easy fix, but nobody ever wants this to happen again.&lt;/p&gt;

&lt;p&gt;tl;dr DelayedJob says it&amp;rsquo;s possible to set &lt;code&gt;Delayed::Worker.delay_jobs = false&lt;/code&gt; for your tests. Don&amp;rsquo;t do it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Our Objective-C Code Standards</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/08/14/on-objective-c-code-standards/</link>
      <pubDate>Tue, 14 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/08/14/on-objective-c-code-standards/</guid>
      <description>&lt;p&gt;With the release of Xcode 4.4 I&amp;rsquo;ve taken a look back at our existing code standards and tried to come up with something that is cleaner and more elegant. Here are a few of the ideas I&amp;rsquo;ve been using to modernize the codebase.&lt;/p&gt;

&lt;h3 id=&#34;remove-private-method-declarations-and-use-class-extensions-to-add-ivars&#34;&gt;Remove private method declarations and use class extensions to add ivars.&lt;/h3&gt;

&lt;p&gt;First to get chopped by the deletion button are private method declarations. After Xcode 4.2 came out we took to using the class extension feature to add private method declarations at the top of implementation files. This was a nice way of keeping private methods out of the header files. Now that the compiler will check for pre-existing method signatures within the same object there&amp;rsquo;s no need to define their interfaces.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On-Demand Jenkins Slaves with Amazon EC2</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2/</link>
      <pubDate>Tue, 10 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://artsy.net&#34;&gt;Artsy&lt;/a&gt; team faithfully uses &lt;a href=&#34;http://jenkins-ci.org&#34;&gt;Jenkins&lt;/a&gt; for continuous integration. &lt;a href=&#34;http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/&#34;&gt;As we&amp;rsquo;ve described before&lt;/a&gt;, our Jenkins master and 8 slaves run on Linode. This arrangement has at least a few drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our Linode servers are manually configured. They require frequent maintenance, and inconsistencies lead to surprising build failures.&lt;/li&gt;
&lt;li&gt;The fixed set of slaves don&amp;rsquo;t match the pattern of our build jobs: jobs get backed up during the day, but servers are mostly unused overnight and on weekends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Plugin&#34;&gt;Amazon EC2 Plugin&lt;/a&gt; allowed us to replace those slaves with a totally scripted environment. Now, slaves are spun up in the cloud whenever build jobs need them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spend Time With Your Site</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/05/spend-time-with-your-site/</link>
      <pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/05/spend-time-with-your-site/</guid>
      <description>&lt;p&gt;Empathy with end users is critical when developing consumer-facing software. Many go &lt;a href=&#34;http://innonate.com/2011/03/09/hackers-the-canon-of-consumer-facing-products/&#34;&gt;even&lt;/a&gt; &lt;a href=&#34;http://www.uie.com/articles/self_design/&#34;&gt;further&lt;/a&gt; and argue that you should &lt;em&gt;be&lt;/em&gt; your own user to effectively deliver the best experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I&amp;rsquo;d encourage anyone starting a startup to become one of its users, however unnatural it seems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;mdash; Paul Graham &lt;a href=&#34;http://paulgraham.com/organic.html&#34;&gt;Organic Startup Ideas&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In practice, though, this can be difficult:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a developer, you&amp;rsquo;re just not representative of the intended audience.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re [appropriately] focused on the product&amp;rsquo;s next iteration, while your audience is occupied with the current state.&lt;/li&gt;
&lt;li&gt;You spend countless hours focused on product details&amp;mdash;of course it&amp;rsquo;s a challenge to empathize with a casual visitor&amp;rsquo;s first impression.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;keeping-it-real&#34;&gt;Keeping it Real&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve tried some best practices to overcome these tendencies. User feedback is emailed to everyone in the company. Engineers share customer support responsibilities. But one simple tool has been surprisingly useful: we stole a page from the agile development handbook and built an &lt;a href=&#34;http://alistair.cockburn.us/Information+radiator&#34;&gt;information radiator&lt;/a&gt;. Like a &lt;a href=&#34;http://en.wikipedia.org/wiki/Kanban_board&#34;&gt;kanban board&lt;/a&gt;, news ticker, or &lt;a href=&#34;https://demo.geckoboard.com/dashboard/B6782E562794C2F2/&#34;&gt;analytics wall board&lt;/a&gt;, our information radiator gives us an ambient awareness of end users&amp;rsquo; experiences. How?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Replacing #! Routes with PushState Using Backbone.js</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/06/25/replacing-hashbang-routes-with-pushstate/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/06/25/replacing-hashbang-routes-with-pushstate/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The only constant is change, continuing change, inevitable change, that is the dominant factor in society
[and web apps!] today. No sensible decision can be made any longer without taking into account not only
the world as it is, but the world as it will be.&lt;/p&gt;

&lt;p&gt;&amp;ndash; Isaac Asimov&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;r-i-p&#34;&gt;R.I.P #!&lt;/h2&gt;

&lt;p&gt;It did not take us long to discover we shared the concerns of Twitter&amp;rsquo;s
&lt;a href=&#34;http://danwebb.net/2011/5/28/it-is-about-the-hashbangs&#34;&gt;Dan Webb on hashbang routes&lt;/a&gt;,
but it was almost a year before we were able to remove them from Artsy. Here&amp;rsquo;s how it went down.&lt;/p&gt;

&lt;p&gt;Artsy relies on the &lt;a href=&#34;http://documentcloud.github.com/backbone/&#34;&gt;Backbone.js&lt;/a&gt; framework for our client application
which offers a solid pushState routing scheme. This includes a seamless hashtag fallback for
&lt;a href=&#34;http://caniuse.com/#feat=history&#34;&gt;browsers that don&amp;rsquo;t support the HTML5 History API&lt;/a&gt; (looking at you IE 9).&lt;/p&gt;

&lt;p&gt;The pushState routing is optional, but &lt;em&gt;&amp;ldquo;the world as it should be&amp;rdquo;&lt;/em&gt; suggests we say &amp;ldquo;Yes!&amp;rdquo; (or true) to pushState.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;Backbone.history.start({ pushState: true })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RESTful API Caching with Garner</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/06/23/restful-api-caching-with-garner/</link>
      <pubDate>Sat, 23 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/06/23/restful-api-caching-with-garner/</guid>
      <description>&lt;p&gt;Implementing server-side RESTful API caching is hard. In a straightforward API all the expiry decisions can be made automatically based on the URL, but most real world APIs that add requirements around object relationships or user authorization make caching particularly challenging.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&#34;http://goruco.com/&#34;&gt;GoRuCo&lt;/a&gt; we open-sourced &lt;a href=&#34;http://github.com/artsy/garner&#34;&gt;Garner&lt;/a&gt;, a cache implementation of the concepts described in this post. To &amp;ldquo;garner&amp;rdquo; means to gather data from various sources and to make it readily available in one place, kind-of like a cache! Garner works today with the &lt;a href=&#34;http://github.com/intridea/grape&#34;&gt;Grape API framework&lt;/a&gt; and the &lt;a href=&#34;http://github.com/mongoid/mongoid&#34;&gt;Mongoid ODM&lt;/a&gt;. We encourage you to fork the project, extend our library to other systems and contribute your code back, if you find it useful.&lt;/p&gt;

&lt;p&gt;Garner implements the Artsy API caching cookbook that has been tried by fire in production.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Jenkins for Ruby and Ruby-on-Rails Teams</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/</link>
      <pubDate>Sun, 27 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://jenkins-ci.org&#34;&gt;Jenkins CI&lt;/a&gt; project has grown tremendously in the past few months. There&amp;rsquo;re now hundreds of plugins and an amazing engaged community. Artsy is a happy user and proud contributor to this effort with the essential &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin&#34;&gt;jenkins-ansicolor plugin&lt;/a&gt;, eliminating boring console output since 2011.&lt;/p&gt;

&lt;p&gt;We are a continuous integration, deployment and devops shop and have been using Jenkins for over a year now. We&amp;rsquo;ve shared our experience at the &lt;a href=&#34;http://www.cloudbees.com/juc2012.cb&#34;&gt;Jenkins User Conference 2012&lt;/a&gt; in &lt;a href=&#34;http://www.slideshare.net/dblockdotorg/graduating-to-jenkins-ci-for-rubyonrails-teams&#34;&gt;a presentation&lt;/a&gt;. This blog post is an overview of how to get started with Jenkins for Ruby(-on-Rails) teams.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;Artsy Jenkins CI&#34; alt=&#34;/images/2012-05-27-using-jenkins-for-ruby-on-rails-teams/jenkins.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating Automatic Plain Text MIME Parts with Rails ActionMailer</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer/</link>
      <pubDate>Wed, 16 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer/</guid>
      <description>&lt;p&gt;E-mail is one of the most important ways to engage your users. And every time you touch a user&amp;rsquo;s inbox, it reflects on your brand. But getting email right has become increasing difficult due to the complexities introduced by the thousands of web-based, desktop and mobile mail clients. Email formatting is like the &amp;ldquo;Hunger Games&amp;rdquo; where the major players include online services such as GMail, Yahoo, Hotmail or AOL, desktop clients such as Outlook and a myriad mobile devices ranging from iPhone and Android to Blackberry.&lt;/p&gt;

&lt;p&gt;To deal with this landscape, the MIME standard allows systems to send e-mail with multiple parts: &lt;code&gt;plain/text&lt;/code&gt; for business-efficient devices such as the Blackberry, and &lt;code&gt;text/html&lt;/code&gt; for web-based e-mail readers, such as GMail. Furthermore, &lt;code&gt;ActionMailer&lt;/code&gt; supports multiple template formats: create an &lt;code&gt;.html.haml&lt;/code&gt; template along with a &lt;code&gt;.txt.haml&lt;/code&gt; template to generate both. We also know that &lt;code&gt;text/plain&lt;/code&gt; email helps deliverability, but we believe a disproportionately small amount of text e-mails are actually read - the vast majority of devices are capable of parsing some HTML.&lt;/p&gt;

&lt;p&gt;Is it possible to avoid having to maintain two separate templates without sacrificing deliverability? How can we inject a &lt;code&gt;text/plain&lt;/code&gt; part into HTML e-mail that is both useful and &amp;ldquo;free&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Organize Over 3000 RSpec Specs and Retry Test Failures</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/</link>
      <pubDate>Tue, 15 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/</guid>
      <description>&lt;p&gt;Having over three thousand RSpec tests in a single project has become difficult to manage. We chose to organize these into suites, somewhat mimicking our directory structure. And while we succeeded at making our Capybara integration tests more reliable (see &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/&#34;&gt;Reliably Testing Asynchronous UI with RSpec and Capybara&lt;/a&gt;), they continue relying on finicky timeouts. To avoid too many false positives we&amp;rsquo;ve put together a system to retry failed tests. We know that a spec that fails twice in a row is definitely not a fluke!&lt;/p&gt;

&lt;p&gt;Create a new Rake file in &lt;code&gt;lib/tasks/test_suites.rake&lt;/code&gt; and declare an array of test suites.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Making It Personal in iOS with Searchbars</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/</link>
      <pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/</guid>
      <description>&lt;p&gt;We make Folio, a pretty kick-ass iPad app that we give away to our partners to showcase their inventory at art fairs. Whilst making it we tried to ensure that all of the application fits in with the &lt;a href=&#34;http://artsy.net&#34;&gt;Artsy&lt;/a&gt; website aesthetic, and recently the last natively styled control fell to our mighty code hammers. That was the &lt;code&gt;UISearchBar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ortastuff.s3.amazonaws.com/images/custom_searchbar_example.jpg&#34; alt=&#34;Screenshot of Artsy Folio&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When displaying only search results in a table it makes a lot of sense to use Apple&amp;rsquo;s &lt;code&gt;UISearchDisplayController&lt;/code&gt; as it handles a lot of edge cases for you. However the downside is that you lose some control over how the views interact.&lt;/p&gt;

&lt;p&gt;The search bar was the only native control that actually made it into the version 1 release. This was mainly due to it requiring a bit of black magic in order to get it to work the way we wanted. So lets go through the code and rip it to pieces.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Start Small with Big Data and Google Analytics</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/01/how-to-start-small-with-big-data-and-google-analytics/</link>
      <pubDate>Tue, 01 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/01/how-to-start-small-with-big-data-and-google-analytics/</guid>
      <description>&lt;p&gt;Why do so many companies write a homegrown pageviews tracking system? Between Google Analytics, Kissmetrics and many others, isn&amp;rsquo;t that a completely solved problem?&lt;/p&gt;

&lt;p&gt;These popular solutions lack domain knowledge. They are easily capable of segmenting users by region or browser, but they fail to recognize rules core to your business. Tracking pageviews with a homegrown system becomes your next sprint&amp;rsquo;s goal.&lt;/p&gt;

&lt;p&gt;Implementing a hit counter service is quite tricky. This is a write-heavy, asynchronous problem that must minimize impact on page rendering time, while dealing with rapidly growing amounts of data. Is there a middle ground between using Google Analytics and rolling out our own homegrown implementation? How can we use Google Analytics for data collection and inject domain knowledge into gathered data, incrementally, without writing our own service?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSS Trick: Adjusting Text Underlines</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/04/10/css-trick-adjusting-text-underlines/</link>
      <pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/04/10/css-trick-adjusting-text-underlines/</guid>
      <description>Often times people will use border-bottom: 1px solid in favor of text-decoration: underline to give their links some breathing room. But what if you&amp;rsquo;re giving it too much breathing room and want to adjust the height of that underline. With Adobe Garamond that happened to be the case, so we&amp;rsquo;ve come up with this little css trick:
a { display: inline-block; position: relative; } a::after { content: &#39;&#39;; position: absolute; left: 0; display: inline-block; height: 1em; width: 100%; border-bottom: 1px solid; margin-top: 5px; }  This overlays a CSS pseudo element with a border-bottom that can be adjusted by changing margin-top.</description>
    </item>
    
    <item>
      <title>Simplifying Model-Level JSON Versioning with Mongoid-Cached-Json</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/03/23/simplifying-model-level-json-versioning-with-mongoid-cached-json/</link>
      <pubDate>Fri, 23 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/03/23/simplifying-model-level-json-versioning-with-mongoid-cached-json/</guid>
      <description>Did you know that Netflix has hundreds of API versions, one for each device? Daniel Jacobson&amp;rsquo;s Techniques for Scaling the Netflix API at QConSF 2011 explained why they chose this model. And while we don&amp;rsquo;t all build distributed services that supply custom-tailored data to thousands of heterogeneous TVs and set-top boxes, we do have to pay close attention to API versioning from day one.
Versioning is hard. Your data models evolve, but you must maintain backward-compatibility for your public interfaces.</description>
    </item>
    
    <item>
      <title>How To Redirect Bang Hash Urls</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/03/06/how-to-redirect-bang-hash-urls/</link>
      <pubDate>Tue, 06 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/03/06/how-to-redirect-bang-hash-urls/</guid>
      <description>Sometimes you type a hash-bang URL too fast, bang first.
Consider https://artsy.net/!#/log_in. Rails will receive /! as the file path, resulting in a 404, File Not Found error. The part of the URL after the hash is a position within the page and is never sent to the web server.
It&amp;rsquo;s actually pretty easy to handle this scenario and redirect to the corresponding hash-bang URL.
The most straightforward way is to create a file called !</description>
    </item>
    
    <item>
      <title>10x Rack and Rails Output Compression with Rack::Deflater</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater/</link>
      <pubDate>Fri, 24 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater/</guid>
      <description>&lt;p&gt;You can quickly reduce the amount of data transferred from your Rack or Rails application with &lt;a href=&#34;https://github.com/rack/rack/blob/master/lib/rack/deflater.rb&#34;&gt;Rack::Deflater&lt;/a&gt;. Anecdotal evidence shows a reduction from a 50Kb JSON response into about 6Kb. It may be a huge deal for your mobile clients.&lt;/p&gt;

&lt;p&gt;For a Rails application, modify config/application.rb or config/environment.rb.&lt;/p&gt;

&lt;p&gt;``` ruby config/application.rb
Acme::Application.configure do
  config.middleware.use Rack::Deflater
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
For a Rack application, add the middleware in config.ru.

``` ruby config.ru
use Rack::Deflater
run Acme::Instance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Caching Model JSON with Mongoid-Cached-Json</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/02/20/caching-model-json-with-mongoid-cached-json/</link>
      <pubDate>Mon, 20 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/02/20/caching-model-json-with-mongoid-cached-json/</guid>
      <description>Consider the following two Mongoid domain models, Widget and Gadget.
``` ruby widget.rb class Widget include Mongoid::Document
field :name has_many :gadgets end
``` ruby gadget.rb class Gadget include Mongoid::Document field :name field :extras belongs_to :widget end  And an API call that returns a collection of widgets.
get &#39;widgets&#39; do Widget.all.as_json end  Given many widgets, the API makes a subquery to fetch the corresponding gadgets for each widget.
Introducing mongoid-cached-json.</description>
    </item>
    
    <item>
      <title>Reliably Testing Asynchronous UI w/ RSpec and Capybara</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/</link>
      <pubDate>Fri, 03 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/</guid>
      <description>&lt;p&gt;tl;dr - You can write 632 rock solid UI tests with Capybara and RSpec, too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;Miami Weather in NYC&#34; alt=&#34;/images/2012-02-03-reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/jenkins-ci.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have exactly 231 integration tests and 401 view tests out of a total of 3086 in our core application today. This adds up to 632 tests that exercise UI. The vast majority use &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt; with &lt;a href=&#34;https://github.com/jnicklas/capybara&#34;&gt;Capybara&lt;/a&gt; and &lt;a href=&#34;http://seleniumhq.org/&#34;&gt;Selenium&lt;/a&gt;. This means that every time the suite runs we set up real data in a local MongoDB and use a real browser to hit a fully running local application, 632 times. The suite currently takes 45 minutes to run headless on a slow Linode, UI tests taking more than half the time.&lt;/p&gt;

&lt;p&gt;While the site is in private beta, you can get a glimpse of the complexity of the UI from the &lt;a href=&#34;http://artsy.net&#34;&gt;splash page&lt;/a&gt;. It&amp;rsquo;s a rich client-side Javascript application that talks to an API. You can open your browser&amp;rsquo;s developer tools and watch a combination of API calls and many asynchronous events.&lt;/p&gt;

&lt;p&gt;Keeping the UI tests reliable is notoriously difficult. For the longest time we felt depressed under the Pacific Northwest -like weather of our Jenkins CI and blamed every possible combination of code and infrastructure for the many intermittent failures. We&amp;rsquo;ve gone on sprees of marking many such tests &amp;ldquo;pending&amp;rdquo; too.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve learned a lot and stabilized our test suite. This is how we do UI testing.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beyond Heroku: &#34;Satellite&#34; Delayed Job Workers on EC2</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2/</link>
      <pubDate>Tue, 31 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2/</guid>
      <description>&lt;p&gt;[TL;DR: To supplement Heroku-managed app servers, we launched custom EC2 instances to host Delayed Job worker processes. See the &lt;a href=&#34;https://github.com/joeyAghion/satellite_setup&#34;&gt;satellite_setup github repo&lt;/a&gt; for rake tasks and Chef recipes that make it easy.]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://artsy.net&#34;&gt;Artsy&lt;/a&gt; engineers are big users and abusers of &lt;a href=&#34;http://heroku.com&#34;&gt;Heroku&lt;/a&gt;. It&amp;rsquo;s a neat abstraction of server resources, so we were conflicted when parts of our application started to bump into Heroku&amp;rsquo;s limitations. While we weren&amp;rsquo;t eager to start managing additional infrastructure, we found that&amp;ndash;with a few good tools&amp;ndash;we could migrate some components away from Heroku without fragmenting the codebase or over-complicating our development environments.&lt;/p&gt;

&lt;p&gt;There are a number of reasons your app might need to go beyond Heroku. It might rely on a locally installed tool (not possible on Heroku&amp;rsquo;s locked-down servers), or require heavy file-system usage (limited to &lt;code&gt;tmp/&lt;/code&gt; and &lt;code&gt;log/&lt;/code&gt;, and not permanent or shared). In our case, the culprit was Heroku&amp;rsquo;s 512 MB RAM limit&amp;ndash;reasonable for most web processes, but quickly exceeded by the image-processing tasks of our &lt;a href=&#34;https://github.com/collectiveidea/delayed_job&#34;&gt;delayed_job&lt;/a&gt; workers. We considered building a specialized image-processing service, but decided instead to supplement our web apps with a custom &lt;a href=&#34;http://aws.amazon.com/ec2/&#34;&gt;EC2&lt;/a&gt; instance dedicated to processing background tasks. We call these servers &amp;ldquo;satellites.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll walk through the pertinent sections here, but you can find Rake tasks that correspond with these scripts, plus all of the necessary cookbooks, in the &lt;a href=&#34;https://github.com/joeyAghion/satellite_setup&#34;&gt;satellite_setup github repo&lt;/a&gt;. Now, on to the code!&lt;/p&gt;

&lt;p&gt;First, generate a key-pair from &lt;a href=&#34;https://console.aws.amazon.com/ec2/home?#s=KeyPairs&#34;&gt;Amazon&amp;rsquo;s AWS Management Console&lt;/a&gt;. Then we&amp;rsquo;ll use &lt;a href=&#34;http://fog.io&#34;&gt;Fog&lt;/a&gt; to spawn the EC2 instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fog&#39;

# Update these values according to your environment...
S3_ACCESS_KEY_ID = &#39;XXXXXXXXXXXXXXXXXXXX&#39;
S3_SECRET_ACCESS_KEY = &#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;
KEY_NAME = &#39;satellite_keypair&#39;
KEY_PATH = &amp;quot;#{ENV[&#39;HOME&#39;]}/.ssh/#{KEY_NAME}.pem&amp;quot;
IMAGE_ID = &#39;ami-c162a9a8&#39;  # 64-bit Ubuntu 11.10
FLAVOR_ID = &#39;m1.large&#39;

connection = Fog::Compute.new(provider: &#39;AWS&#39;,
  aws_access_key_id: S3_ACCESS_KEY_ID,
  aws_secret_access_key: S3_SECRET_ACCESS_KEY)

server = connection.servers.bootstrap(
  key_name: KEY_NAME,
  private_key_path: KEY_PATH,
  image_id: IMAGE_ID,
  flavor_id: FLAVOR_ID)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Delaying CarrierWave Image Processing</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/31/delaying-carrierwave-image-processing/</link>
      <pubDate>Tue, 31 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/31/delaying-carrierwave-image-processing/</guid>
      <description>&lt;p&gt;We do a lot of image processing at Artsy. We have tens of thousands of beautiful original high resolution images from our partners and treat them with care. The files mostly come from professional art photographers, include embedded color profiles and other complicated features that make image processing a big deal.&lt;/p&gt;

&lt;p&gt;Once uploaded, these images are converted to JPG, resized into many versions and often resampled. We are using &lt;a href=&#34;https://github.com/jnicklas/carrierwave&#34;&gt;CarrierWave&lt;/a&gt; for this process - our typical image uploader starts like a usual CarrierWave implementation with a few additional features.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Artsy Uses GitHub to Build Artsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/</link>
      <pubDate>Sun, 29 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/</guid>
      <description>Zach Holman gave a good talk on How GitHub uses GitHub to build GitHub at Rubyconf. It was great to hear how similar our own processes are at Artsy, with a few notable differences.
Artsy engineers store almost everything on GitHub. We use GitHub Wikis, but don&amp;rsquo;t use GitHub Issues much. We work in 3-week sprints with Pivotal Tracker instead. This blog is on GitHub. And, of course, we have our own Hubot which feeds funny animated GIFs after each successful deploy to our IRC channel.</description>
    </item>
    
    <item>
      <title>Octopress and Jekyll</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/18/octopress-and-jekyll/</link>
      <pubDate>Wed, 18 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/18/octopress-and-jekyll/</guid>
      <description>This blog is powered by static pages.
I think it&amp;rsquo;s quite ironic that, while we spend a lot of time building complex large scale dynamic websites, our new favorite publishing platform is a system that compiles static content. But, in many ways, Octopress and Jekyll fit our philosophy and developer workflow perfectly. Writing an article for this blog means using the same tools and processes as contributing to a project on Github.</description>
    </item>
    
    <item>
      <title>Responsive Layouts with CSS3</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/17/responsive-layouts-with-css3/</link>
      <pubDate>Tue, 17 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/17/responsive-layouts-with-css3/</guid>
      <description>All of the SCSS stylesheets used to design this blog compile down to one file (view the source of this page and check out screen.css), and there isn&amp;rsquo;t any JavaScript affecting the layout. But there are really three versions of this page. If you&amp;rsquo;re reading this on a smartphone, what you see is almost entirely different from what you would see if you were reading this in a full screen browser.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/05/hello-world/</link>
      <pubDate>Thu, 05 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/05/hello-world/</guid>
      <description>We&amp;rsquo;ve been building cool stuff at Artsy and are looking forward to sharing all things tech with you.</description>
    </item>
    
  </channel>
</rss>