<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphql on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/graphql/</link>
    <description>Recent content in Graphql on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/graphql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Relay Mutations</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/26/Relay-Mutations/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/26/Relay-Mutations/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hey there everyone, it took us two years to &lt;a href=&#34;https://github.com/artsy/metaphysics/pull/583&#34;&gt;make our&lt;/a&gt; GraphQL implementation support any mutations. We opted to keep it read-only for quite a long time because we use GraphQL to consolidate multiple APIs, but as we start new projects as GraphQL + databases then understanding mutations becomes much more important.&lt;/p&gt;

&lt;p&gt;Last month, I talked with the team at &lt;a href=&#34;https://www.graph.cool/&#34;&gt;Graph.cool&lt;/a&gt; about having them talk through Relay mutations comprehensively as a guest post on the Artsy Engineering blog. So, I&amp;rsquo;m really excited to introduce this great post on the topic by &lt;a href=&#34;http://twitter.com/nikolasburk&#34;&gt;Nikolas Burk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;ndash; Orta&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;the-magic-behind-relay-mutations&#34;&gt;The Magic behind Relay Mutations&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/relay/&#34;&gt;Relay&lt;/a&gt; is a powerful GraphQL client for React and React Native applications. It was open sourced by Facebook alongside GraphQL in 2015 and is a great tool for supporting you with managing your app&amp;rsquo;s data layer.&lt;/p&gt;

&lt;p&gt;In this post, we are going to explore how Relay mutations work by looking at a React Native app. The code can be found on &lt;a href=&#34;https://github.com/graphcool-examples/react-native-relay-pokedex-example&#34;&gt;GitHub&lt;/a&gt;. Our sample application is a simple &lt;em&gt;Pokedex&lt;/em&gt;, where users can manage their Pokemons.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/S21GfEo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: We&amp;rsquo;re going to assume a basic familiarity with GraphQL in this article. If you haven&amp;rsquo;t heard of GraphQL before, the &lt;a href=&#34;www.graphql.org&#34;&gt;documentation&lt;/a&gt; and the &lt;a href=&#34;http://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&#34;&gt;GraphQL for iOS Developers&lt;/a&gt; post are great places to start. If you&amp;rsquo;re interested in learning more about Relay in general, head over to &lt;a href=&#34;www.learnrelay.org&#34;&gt;Learn Relay&lt;/a&gt; for a comprehensive tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improving Page Speed with GraphQL</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/11/02/improving-page-speed-with-graphql/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/11/02/improving-page-speed-with-graphql/</guid>
      <description>&lt;p&gt;This past year, our team started using a GraphQL orchestration layer that connects various APIs with multiple front-end apps including &lt;a href=&#34;http://artsy.github.io/blog/2016/06/19/graphql-for-mobile&#34;&gt;iOS&lt;/a&gt;. It also handles caching and extracts some business logic out of our client apps. This helped us not only to be more consistent with the way we fetch data across apps, but also improved developer happiness and even bridged teams by having our web and iOS developers work with the same API layer. This got me thinking what other problems GraphQL could solve at Artsy.&lt;/p&gt;

&lt;p&gt;I work on the Publishing Team at Artsy, and we&amp;rsquo;ve recently been focused on page speed as a KPI. With so many ways of measuring speed, it&amp;rsquo;s a daunting task but for this post, I&amp;rsquo;ll focus on the way we handled things on the server-side and how integrating GraphQL on our API improved page speed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL for iOS Developers</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/19/graphql-for-mobile/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/19/graphql-for-mobile/</guid>
      <description>&lt;p&gt;GraphQL is something you may have heard in passing, usually from the web team. It&amp;rsquo;s a Facebook API technology, that describes itself as a &lt;em&gt;A Data Query Language and Runtime&lt;/em&gt;. GraphQL is a &lt;a href=&#34;http://facebook.github.io/graphql/&#34;&gt;spec&lt;/a&gt;, and there are &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql#libraries&#34;&gt;multiple implementations&lt;/a&gt; of it. As mobile engineers, we can consider it an API, where the front-end team have as much control as the backend.&lt;/p&gt;

&lt;p&gt;This blog post covers our usage of GraphQL, and what I&amp;rsquo;ve learned in the last 3 months of using it in &lt;a href=&#34;https://github.com/artsy/eigen/&#34;&gt;Eigen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>