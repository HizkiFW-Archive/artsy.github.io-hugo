<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/rails/</link>
    <description>Recent content in Rails on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Presenters and Memoization: Moving Logic out of Templates</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/</guid>
      <description>&lt;p&gt;When dealing with rendering data for an email, one frequently has to make many database calls to assemble the required data. This can be slow, and depending on how you structure the code that is assembling the data vs rendering the data in a template, it&amp;rsquo;s very easy to be making repeated calls, which can significantly slow down your process. Additionally, whether you are using &lt;a href=&#34;http://haml.info/&#34;&gt;Haml&lt;/a&gt;, &lt;a href=&#34;http://mustache.github.io/&#34;&gt;Mustache&lt;/a&gt;, &lt;a href=&#34;http://jade-lang.com/&#34;&gt;Jade&lt;/a&gt;, or any other templating language, embedding too much logic in the template can making things hard to maintain (especially if some logic lives in the template and some elsewhere in your domain code). Of course some logic in the template (a conditional: should I render this section?, or loops: render this hash of data) is necessary, but I like to keep as much out of there as possible. It&amp;rsquo;s easier to optimize, debug and maintain that logic elsewhere, and also writing complex logic in &lt;a href=&#34;https://www.ruby-lang.org&#34;&gt;Ruby&lt;/a&gt; is much more fun than in a templating language!&lt;/p&gt;

&lt;p&gt;In this article I&amp;rsquo;ll present what I&amp;rsquo;ve been doing to keep my templates relatively logic-free, and how I make sure I don&amp;rsquo;t repeat any heavy database calls in assembling my data.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bootstrapping JSON Data with Rails and Backbone.js</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js/</link>
      <pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://artsy.net&#34;&gt;artsy.net website&lt;/a&gt; is a Backbone.js application that talks to a server-side RESTful Grape API sitting on top of a Rails app which serves minimal HTML markup. The latter includes such things as a page title, along with links to JavaScript and stylesheet packages. A page loads, scripts run, data is fetched from the API. The result is merged into a HAMLJS template and rendered client-side.&lt;/p&gt;

&lt;p&gt;Building this kind of one-page apps allows for clean separation between the presentation and API layers. The downside is that it will slow page render times - fetching data after page load means waiting for an AJAX request to complete before displaying anything.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re many solutions to this problem, all involving some kind of server-side rendering. You could, for example, share views and JavaScript between client and server. This would be a major paradigm shift for a large application like ours and not something we could possibly maneuver in a short amount of time.&lt;/p&gt;

&lt;p&gt;Without changing the entire architecture of the system, how can we bootstrap JSON data server-side and avoid the data roundtrip on every page load?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How To Redirect Bang Hash Urls</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/03/06/how-to-redirect-bang-hash-urls/</link>
      <pubDate>Tue, 06 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/03/06/how-to-redirect-bang-hash-urls/</guid>
      <description>Sometimes you type a hash-bang URL too fast, bang first.
Consider https://artsy.net/!#/log_in. Rails will receive /! as the file path, resulting in a 404, File Not Found error. The part of the URL after the hash is a position within the page and is never sent to the web server.
It&amp;rsquo;s actually pretty easy to handle this scenario and redirect to the corresponding hash-bang URL.
The most straightforward way is to create a file called !</description>
    </item>
    
    <item>
      <title>10x Rack and Rails Output Compression with Rack::Deflater</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater/</link>
      <pubDate>Fri, 24 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater/</guid>
      <description>&lt;p&gt;You can quickly reduce the amount of data transferred from your Rack or Rails application with &lt;a href=&#34;https://github.com/rack/rack/blob/master/lib/rack/deflater.rb&#34;&gt;Rack::Deflater&lt;/a&gt;. Anecdotal evidence shows a reduction from a 50Kb JSON response into about 6Kb. It may be a huge deal for your mobile clients.&lt;/p&gt;

&lt;p&gt;For a Rails application, modify config/application.rb or config/environment.rb.&lt;/p&gt;

&lt;p&gt;``` ruby config/application.rb
Acme::Application.configure do
  config.middleware.use Rack::Deflater
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
For a Rack application, add the middleware in config.ru.

``` ruby config.ru
use Rack::Deflater
run Acme::Instance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>