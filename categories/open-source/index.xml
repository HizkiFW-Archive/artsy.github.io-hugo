<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Open Source on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/open-source/</link>
    <description>Recent content in Open Source on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/open-source/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Artsy API Ready for Production Non-Commercial Use</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/23/api-open-non-commercial/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/23/api-open-non-commercial/</guid>
      <description>About 3 years ago, dB. announced that Artsy had a public API.
 The Artsy API currently provides access to images of historic artwork and related information on artsy.net for educational and other non-commercial purposes. You can try it for playing, testing, and learning, but not yet for production. The scope of the API will expand in the future as it gains some traction.
 We&amp;rsquo;ve wrapped up some legal work around the developer API terms and services, the PR is here and I&amp;rsquo;m happy to announce that the API is ready for non-commercial production use.</description>
    </item>
    
    <item>
      <title>Upgrading to RxSwift</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/08/reactive-cocoa-to-rxswift/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/12/08/reactive-cocoa-to-rxswift/</guid>
      <description>&lt;p&gt;When we &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;built Eidolon last year&lt;/a&gt;, Swift was still pre-1.0 and we couldn&amp;rsquo;t rely on the wide variety of available Swift libraries we enjoy today. I wanted to build it using functional reactive programming, because that&amp;rsquo;s how I believe &lt;a href=&#34;https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/&#34;&gt;everyone should write software&lt;/a&gt;, but there were no Swift-based FRP libraries at the time. As a compromise, I used ReactiveCocoa&amp;rsquo;s Objective-C API (the Swift API was months away from an alpha).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using OCR To Fix a Hilarious Bug</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/11/12/Using-OCR-To-Fix-A-Hilarious-Bug/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/11/12/Using-OCR-To-Fix-A-Hilarious-Bug/</guid>
      <description>&lt;p&gt;For a little while, we would get very strange bug reports. People would complain that artist thumbnails (viewed in several different contexts across the web and our iOS apps) would not be an image of the artist&amp;rsquo;s work, but rather text, which had inexplicably become an actual JPG. This wasn&amp;rsquo;t just text appearing in a &lt;code&gt;div&lt;/code&gt; that should contain an &lt;code&gt;img&lt;/code&gt; or something like that, these were actual JPG&amp;rsquo;s that were pictures of text.&lt;/p&gt;

&lt;p&gt;We would fix these as they came up, chalking the strangeness up to some relic of an old image processing pipeline, data being migrated, etc.&lt;/p&gt;

&lt;p&gt;However, the reports kept coming in. This blog post is about how we diagnosed this actual bug, and how we used a simple Ruby script and OCR to help us detect and fix the existing images.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MVVM in Swift</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/24/mvvm-in-swift/</link>
      <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/24/mvvm-in-swift/</guid>
      <description>&lt;p&gt;Model View ViewModel has become the default way I write apps on iOS â€“ it makes writing iOS apps a joy. I&amp;rsquo;ve written &lt;a href=&#34;https://www.objc.io/issues/13-architecture/mvvm/&#34;&gt;about it&lt;/a&gt; &lt;a href=&#34;http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/&#34;&gt;again&lt;/a&gt; and &lt;a href=&#34;https://speakerdeck.com/ashfurrow/reactivecocoa-at-mdevcon-2014&#34;&gt;again&lt;/a&gt; and &lt;a href=&#34;https://leanpub.com/iosfrp&#34;&gt;oh my&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But last Autumn, as our team was all-hands-on-deck to wrap up the &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;auctions kiosk app&lt;/a&gt;, we chose not to use MVVM. Why not?&lt;/p&gt;

&lt;p&gt;We were building a &lt;em&gt;new app&lt;/em&gt; in a &lt;em&gt;new language&lt;/em&gt; using a &lt;em&gt;non-Swift framework&lt;/em&gt; for functional reactive programming. I was also teaching colleagues what they needed to know about ReactiveCocoa to help write the app. We used the MVC pattern because the relative cost of MVVM was too high.&lt;/p&gt;

&lt;p&gt;&amp;rdquo;&amp;hellip; &lt;em&gt;was&lt;/em&gt; &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Releasecop Tracks Stale Releases</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/04/releasecop-tracks-stale-releases/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/04/releasecop-tracks-stale-releases/</guid>
      <description>&lt;p&gt;Artsy practices a sort of &lt;a href=&#34;http://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;continuous delivery&lt;/a&gt;. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices &lt;a href=&#34;http://artsy.github.io/blog/categories/testing/&#34;&gt;multiple&lt;/a&gt; &lt;a href=&#34;http://artsy.github.io/blog/categories/continuous-integration&#34;&gt;times&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From developers&amp;rsquo; working branches&lt;/li&gt;
&lt;li&gt;To the master branch&lt;/li&gt;
&lt;li&gt;Through a hopefully-successful build&lt;/li&gt;
&lt;li&gt;To a staging environment&lt;/li&gt;
&lt;li&gt;To production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The number of apps and services we deploy has grown to &lt;em&gt;dozens&lt;/em&gt; per team, so sometimes things fall through the cracks. We&amp;rsquo;ve been using &lt;a href=&#34;https://github.com/joeyAghion/releasecop&#34;&gt;Releasecop&lt;/a&gt; for the last few months to get gentle email reminders when an environment could use a deploy.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift Trek 2: The Wrath of count()</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/27/swift-trek-2-the-wrath-of-count/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/27/swift-trek-2-the-wrath-of-count/</guid>
      <description>&lt;p&gt;On Tuesday at our mobile practice standup, I mentioned that I was in-between projects and looking for something to do. Orta suggested migrating Eidolon, the Artsy bidding kiosk app, to Swift 2.&lt;/p&gt;

&lt;p&gt;Our CI is &lt;a href=&#34;https://github.com/artsy/eidolon/pull/466&#34;&gt;broken anyway&lt;/a&gt;, so now is the perfect opportunity to make changes that would break CI. Additionally, Swift 2 seems to have more-or-less stabilized in the latest betas, so we don&amp;rsquo;t expect many gotchas leading up to the GM. Finally, this is an enterprise-distributed app, so we don&amp;rsquo;t have to worry about submitting to the App Store using betas of Xcode.&lt;/p&gt;

&lt;p&gt;So Swift 2 it is!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Peer Lab</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/10/peer-lab/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/10/peer-lab/</guid>
      <description>&lt;p&gt;When I was living in Amsterdam, I participated in plenty of &lt;a href=&#34;https://appsterdam.rs&#34;&gt;Appsterdam&lt;/a&gt; events. Things like the weekly Meeten en Drinken. I even helped lead a class in Swift. One of the events I liked the most was called Peer Lab, organized every Saturday morning by &lt;a href=&#34;https://twitter.com/samuelgoodwin&#34;&gt;Samuel Goodwin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of Peer Lab is pretty simple, but also somewhat profound: developers gather in a physical space to work on things. If someone has a question, they ask the group. If you can help, you offer assistance. The goal is to foster a collaborative learning environment where everyone feels fulfilled.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Open Sourcing Energy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/06/open-sourcing-energy/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/06/open-sourcing-energy/</guid>
      <description>&lt;p&gt;The Artsy Mobile team is pretty aggressive in our stance on &lt;a href=&#34;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&#34;&gt;Open Source by Default&lt;/a&gt;. We&amp;rsquo;ve talked about it at &lt;a href=&#34;https://www.youtube.com/watch?v=2DvDeEZ0NDw&amp;amp;spfreload=10&#34;&gt;conferences&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=SjjvnrqDjpM&#34;&gt;around&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=zPbLYWmLPow&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;https://speakerdeck.com/orta/ios-at-artsy&#34;&gt;world&lt;/a&gt;, in &lt;a href=&#34;http://www.objc.io/issues/22-scale/artsy&#34;&gt;renowned magazines&lt;/a&gt; and on &lt;a href=&#34;http://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&#34;&gt;our blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth mentioning that we don&amp;rsquo;t just talk externally about Open Source. Internally, the Mobile team runs talks about Open Source for the rest of the Artsy staff. As well, we discuss the tooling and business implications of having our work in public repos. Artsy strives for an open culture, in this case the development team, on the whole, is just further along in the process.&lt;/p&gt;

&lt;p&gt;The Open Source app idea started with an experiment in the Summer of 2014, asking, &amp;ldquo;What does a truly Open Source App look like?&amp;rdquo; The outcome of that was our Swift Kiosk app, &lt;a href=&#34;https://github.com/artsy/eidolon/&#34;&gt;Eidolon&lt;/a&gt;. Open from day one. We took the knowledge from that and applied it to our public facing app, &lt;a href=&#34;https://github.com/artsy/eigen/&#34;&gt;Eigen&lt;/a&gt;. Open from day 806. That made 2/3rds of our apps Open Source.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to talk about our final app, &lt;a href=&#34;https://github.com/artsy/energy&#34;&gt;Energy&lt;/a&gt;. Open from day 1433 and ~3500 commits.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How To Write Unit Tests Like a Brood Parasite</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/</guid>
      <description>&lt;p&gt;To a beginner, &lt;a href=&#34;http://ocmock.org/&#34;&gt;OCMock&lt;/a&gt; looks scary. The syntax is strange, the idea of stubbing seems complicated, and skirting around the need to use it at all times kind of works out for a while.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[[mock stub] // three brackets!!

[OCMockObject niceMockForClass:UINavigationItem.class]; // it has to be told to be nice?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of this can be overwhelming for someone who just wants to write simple unit tests for a particular view controller.&lt;/p&gt;

&lt;p&gt;Once you look into the specifics of OCMock, however, things get less terrifying really quickly. It is helpful to compare OCMockâ€™s approach to stubbing to the &lt;a href=&#34;https://vimeo.com/60553870&#34;&gt;behaviors of certain bird species&lt;/a&gt;. As always, the soothing voice of David Attenborough brings clarity and joy to even the most mundane puzzles of lifeâ€™s journey.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Eigenstate of Mind</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/06/04/an-eigenstate-of-mind/</link>
      <pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/06/04/an-eigenstate-of-mind/</guid>
      <description>&lt;p&gt;Prior to starting at Artsy, I followed a few online tutorials on iOS development. But a simple application demonstrating how to &lt;a href=&#34;http://www.raywenderlich.com/85578/first-core-data-app-using-swift&#34;&gt;build a todo list&lt;/a&gt; didn&amp;rsquo;t illustrate the nuances of a production codebase. Tutorials are an important learning tool for beginners, but can&amp;rsquo;t possibly prepare you for everything you would encounter within an application like Artsy&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;I was lucky to have a mentor at Artsy to help me get started, and I wrote this post to pass along the lessons I learned. This is meant to be a guide for iOS beginners to get to know an open source production codebase. I&amp;rsquo;ll cover the Xcode project organization and where to find things.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How we Open Source&#39;d Eigen</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/28/how-we-open-sourced-eigen/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/28/how-we-open-sourced-eigen/</guid>
      <description>&lt;p&gt;It was 95 days ago, and I was sitting before of my computer in NYC. I loaded my terminal, opened &lt;a href=&#34;https://taptalk.me&#34;&gt;TapTalk&lt;/a&gt; on my phone, tapped on my collegue &lt;a href=&#34;http://ashfurrow.com&#34;&gt;Ash&amp;rsquo;s&lt;/a&gt; avatar and held my finger there. I paused, this moment was a long time, it was worth waiting. I switched the camera from my face to the screen with the terminal open.&lt;/p&gt;

&lt;p&gt;This moment was probably the most nervous I had been in years. It showed &lt;code&gt;git push origin master&lt;/code&gt;. I said &amp;ldquo;it&amp;rsquo;s happening.&amp;rdquo; I hit return. A new era in the Artsy mobile team had started. A few minutes later, I wrote this tweet:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; lang=&#34;en&#34;&gt;&lt;p&gt;We have open sourceâ€™d the &lt;a href=&#34;https://twitter.com/artsy&#34;&gt;@Artsy&lt;/a&gt; iOS app.&amp;#10;&amp;#10;&lt;a href=&#34;https://t.co/c1SWtHmUgy&#34;&gt;https://t.co/c1SWtHmUgy&lt;/a&gt;&amp;#10;&amp;#10;ðŸŽ‰&lt;/p&gt;&amp;mdash; Ã˜rta (@orta) &lt;a href=&#34;https://twitter.com/orta/status/558395611754819586&#34;&gt;January 22, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go over the process we went through to get to that point.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Culture of Openness in the Artsy Mobile Team</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/03/31/the-culture-of-openness-artsy-mobile/</link>
      <pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/03/31/the-culture-of-openness-artsy-mobile/</guid>
      <description>Recently, the Artsy Mobile team had the pleasure of working together on an article for objc.io, an online publication dedicated to in-depth articles about iOS and OS X development. Each monthly issue consists of several articles centered around a themeâ€”past issues include Testing, Animations and Swift. objc.ioâ€™s latest issue, iOS at Scale, features articles by a handful of developers about how they approach iOS development at their respective companies. Our contribution to the issue is a collaboratively-written article by and about Artsyâ€™s Mobile team from the angle of Artsy&amp;rsquo;s focus on the core value of openness that is foundational to how we (and the greater Artsy team) work.</description>
    </item>
    
    <item>
      <title>Developing a Bidding Kiosk for iOS in Swift</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/11/13/eidolon-retrospective/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/11/13/eidolon-retrospective/</guid>
      <description>&lt;p&gt;In the Summer of 2014, we began developing a bidding kiosk for the Artsy auctions platform (code-named &lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;Eidolon&lt;/a&gt;). Typically, the iOS team here at Artsy worked on two main apps: a &lt;a href=&#34;http://iphone.artsy.net&#34;&gt;consumer-facing iPhone app&lt;/a&gt; and an iPad app used by art galleries. For Eidolon, we followed &lt;a href=&#34;https://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/&#34;&gt;Artsyâ€™s standard practices&lt;/a&gt; for building our software and use GitHub issues as our canonical source for bug reports and feature requests. Many of the components used in our apps are &lt;a href=&#34;https://github.com/artsy&#34;&gt;open source&lt;/a&gt;, but the codebases themselves remain in private repositories.&lt;/p&gt;

&lt;p&gt;Initial planning for Eidolon began over the Summer. Our designer &lt;a href=&#34;http://twitter.com/katarinabatina&#34;&gt;Katarina&lt;/a&gt; had the main features sketched out. I was scheduled to work on it at first, with &lt;a href=&#34;http://twitter.com/orta&#34;&gt;Orta&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/1aurabrown&#34;&gt;Laura&lt;/a&gt; joining me near the end of the project. We had a rough scope: the app would be able to list artworks at an auction and allow prospective bidders to learn more about these artworks. The user would be able to register to bid and place bids using the Kiosk, including credit card processing for identity-checking.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Transparent Prerequisite Network Requests with Swift and ReactiveCocoa</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/18/transparent-prerequisite-network-requests/</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/18/transparent-prerequisite-network-requests/</guid>
      <description>&lt;p&gt;Artsy&amp;rsquo;s &lt;a href=&#34;http://developers.artsy.net&#34;&gt;API&lt;/a&gt; requires something called an &lt;a href=&#34;https://developers.artsy.net/docs/authentication&#34;&gt;XApp
token&lt;/a&gt; in order to perform
requests. The token comes back with an expiry date, after which the token will
no longer work. A new token will have to be fetched.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;xapp_token&amp;quot;: &amp;quot;SOME_TOKEN&amp;quot;,
	&amp;quot;expires_in&amp;quot;:&amp;quot;2014-09-19T12:22:21.570Z&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our previous iOS apps, tragically written in Objective-C, we have a lot of
code that looks like the following. &lt;code&gt;getXappTokenWithCompletion:&lt;/code&gt; checks to
make sure that there is a valid token. If there is, it invokes the completion
block immediately. Otherwise, it fetches a token, sets it in a static variable,
and then invokes the completion block.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[ArtsyAPI getXappTokenWithCompletion:^(NSString *xappToken, NSDate *expirationDate) {
    [ArtsyAPI getSomething:^(NSDictionary *results) {
       // do something
    } failure:^(NSError *error) {
        // handle herror
    }];
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s kind of ugly. A better approach might be to embed the token-requesting
logic within the &lt;code&gt;getSomething:&lt;/code&gt; method. But that kind of sucks, since we&amp;rsquo;d have
to reproduce that logic for &lt;em&gt;every&lt;/em&gt; network-accessing method. If we have ten
methods, that&amp;rsquo;s ten times we need to duplicate that logic.&lt;/p&gt;

&lt;p&gt;With our &lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;new app&lt;/a&gt; (written in Swift), we&amp;rsquo;re
using a network abstraction layer we&amp;rsquo;ve created called &lt;a href=&#34;https://github.com/AshFurrow/Moya&#34;&gt;Moya&lt;/a&gt;.
Moya sits on top of &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; and
provides an abstraction for API endpoints. Instead of having ten different
network-accessing methods, there is only &lt;em&gt;one&lt;/em&gt; method to which you pass one of
the ten different possible &lt;code&gt;enum&lt;/code&gt; values. This means you have compile-time
safety in your networking code, but that&amp;rsquo;s not really what we&amp;rsquo;re here to talk
about.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Designing the Public Artsy API</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/12/designing-the-public-artsy-api/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/12/designing-the-public-artsy-api/</guid>
      <description>&lt;p&gt;Today we are happy to announce that we&amp;rsquo;re making a new public API generally available, along with over 26,000 artworks from many of our institutional partners.&lt;/p&gt;

&lt;p&gt;The Artsy API currently provides access to images of historic artwork and related information on &lt;a href=&#34;https://artsy.net&#34;&gt;artsy.net&lt;/a&gt; for educational and other non-commercial purposes. You can try it for playing, testing, and learning, but not yet for production. The scope of the API will expand in the future as it gains some traction.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.artsy.net&#34;&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-09-12-designing-the-public-artsy-api/the-art-world-in-your-app.png&#34; border=&#34;0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you just want to use the API, you can stop reading here and head to the &lt;a href=&#34;https://developers.artsy.net/&#34;&gt;developers.artsy.net&lt;/a&gt; website. (The developers website itself is a classic Rails + Bootstrap example and is also &lt;a href=&#34;https://github.com/artsy/doppler&#34;&gt;open-source&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;In this post we will step back and describe some of the technical decisions made during the development of the new API.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>We open sourced our Isomorphic Javascript website</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/</link>
      <pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/force.png&#34; alt=&#34;May The Force be With You&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;re happy to announce we&amp;rsquo;ve open sourced the entire Artsy.net web app, &lt;a href=&#34;https://github.com/artsy/force&#34;&gt;Force&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the past few months, we&amp;rsquo;ve rewritten our web front-end to move off Rails and on to a &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; stack that shares Javascript code and rendering between the server and client, otherwise known as &lt;a href=&#34;http://nerds.airbnb.com/isomorphic-JavaScript-future-web-apps/&#34;&gt;Isomorphic Javascript&lt;/a&gt;. After migrating to this new stack, we open-sourced our boilerplate, &lt;a href=&#34;http://ezeljs.com&#34;&gt;Ezel&lt;/a&gt;, and have now gone a step further and open sourced Artsy.net.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Octopress and Jekyll</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/18/octopress-and-jekyll/</link>
      <pubDate>Wed, 18 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/18/octopress-and-jekyll/</guid>
      <description>This blog is powered by static pages.
I think it&amp;rsquo;s quite ironic that, while we spend a lot of time building complex large scale dynamic websites, our new favorite publishing platform is a system that compiles static content. But, in many ways, Octopress and Jekyll fit our philosophy and developer workflow perfectly. Writing an article for this blog means using the same tools and processes as contributing to a project on Github.</description>
    </item>
    
  </channel>
</rss>