<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beginners on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/beginners/</link>
    <description>Recent content in Beginners on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/beginners/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How To Write Unit Tests Like a Brood Parasite</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/</guid>
      <description>&lt;p&gt;To a beginner, &lt;a href=&#34;http://ocmock.org/&#34;&gt;OCMock&lt;/a&gt; looks scary. The syntax is strange, the idea of stubbing seems complicated, and skirting around the need to use it at all times kind of works out for a while.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[[mock stub] // three brackets!!

[OCMockObject niceMockForClass:UINavigationItem.class]; // it has to be told to be nice?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of this can be overwhelming for someone who just wants to write simple unit tests for a particular view controller.&lt;/p&gt;

&lt;p&gt;Once you look into the specifics of OCMock, however, things get less terrifying really quickly. It is helpful to compare OCMock’s approach to stubbing to the &lt;a href=&#34;https://vimeo.com/60553870&#34;&gt;behaviors of certain bird species&lt;/a&gt;. As always, the soothing voice of David Attenborough brings clarity and joy to even the most mundane puzzles of life’s journey.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Eigenstate of Mind</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/06/04/an-eigenstate-of-mind/</link>
      <pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/06/04/an-eigenstate-of-mind/</guid>
      <description>&lt;p&gt;Prior to starting at Artsy, I followed a few online tutorials on iOS development. But a simple application demonstrating how to &lt;a href=&#34;http://www.raywenderlich.com/85578/first-core-data-app-using-swift&#34;&gt;build a todo list&lt;/a&gt; didn&amp;rsquo;t illustrate the nuances of a production codebase. Tutorials are an important learning tool for beginners, but can&amp;rsquo;t possibly prepare you for everything you would encounter within an application like Artsy&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;I was lucky to have a mentor at Artsy to help me get started, and I wrote this post to pass along the lessons I learned. This is meant to be a guide for iOS beginners to get to know an open source production codebase. I&amp;rsquo;ll cover the Xcode project organization and where to find things.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>