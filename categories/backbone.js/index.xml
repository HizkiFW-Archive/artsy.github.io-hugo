<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backbone.js on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/backbone.js/</link>
    <description>Recent content in Backbone.js on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jun 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/backbone.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing Headless Backbone Tests With Node.js</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/14/writing-headless-backbone-tests-with-node-dot-js/</link>
      <pubDate>Fri, 14 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/14/writing-headless-backbone-tests-with-node-dot-js/</guid>
      <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Write fast, headless, tests for Backbone using Node.js. See this project as an example  &lt;a href=&#34;https://github.com/craigspaeth/backbone-headless-testing&#34;&gt;https://github.com/craigspaeth/backbone-headless-testing&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-brief-history&#34;&gt;A Brief History&lt;/h2&gt;

&lt;p&gt;Artsy is mostly a thick client &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone&lt;/a&gt; app that sits on &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Rails&lt;/a&gt; and largely depends on &lt;a href=&#34;http://jnicklas.github.io/capybara/&#34;&gt;Capybara&lt;/a&gt; (&lt;a href=&#34;http://docs.seleniumhq.org/&#34;&gt;Selenium&lt;/a&gt; backed bot that clicks around Firefox) for testing it&amp;rsquo;s javascript. This leads to some seriously brittle and slow integration tests. &lt;a href=&#34;http://artsy.github.io/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/&#34;&gt;Despite being able to wrangle Capybara&lt;/a&gt; to do most of our client-side testing, we knew there must be a better way.&lt;/p&gt;

&lt;p&gt;When building a CMS app for our gallery partners to manage their Artsy inventory, we built a new Backbone app on top of &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt;. The result was a headless test suite that runs around 60 times faster.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how it&amp;rsquo;s done.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bootstrapping JSON Data with Rails and Backbone.js</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js/</link>
      <pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://artsy.net&#34;&gt;artsy.net website&lt;/a&gt; is a Backbone.js application that talks to a server-side RESTful Grape API sitting on top of a Rails app which serves minimal HTML markup. The latter includes such things as a page title, along with links to JavaScript and stylesheet packages. A page loads, scripts run, data is fetched from the API. The result is merged into a HAMLJS template and rendered client-side.&lt;/p&gt;

&lt;p&gt;Building this kind of one-page apps allows for clean separation between the presentation and API layers. The downside is that it will slow page render times - fetching data after page load means waiting for an AJAX request to complete before displaying anything.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re many solutions to this problem, all involving some kind of server-side rendering. You could, for example, share views and JavaScript between client and server. This would be a major paradigm shift for a large application like ours and not something we could possibly maneuver in a short amount of time.&lt;/p&gt;

&lt;p&gt;Without changing the entire architecture of the system, how can we bootstrap JSON data server-side and avoid the data roundtrip on every page load?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Replacing #! Routes with PushState Using Backbone.js</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/06/25/replacing-hashbang-routes-with-pushstate/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/06/25/replacing-hashbang-routes-with-pushstate/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The only constant is change, continuing change, inevitable change, that is the dominant factor in society
[and web apps!] today. No sensible decision can be made any longer without taking into account not only
the world as it is, but the world as it will be.&lt;/p&gt;

&lt;p&gt;&amp;ndash; Isaac Asimov&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;r-i-p&#34;&gt;R.I.P #!&lt;/h2&gt;

&lt;p&gt;It did not take us long to discover we shared the concerns of Twitter&amp;rsquo;s
&lt;a href=&#34;http://danwebb.net/2011/5/28/it-is-about-the-hashbangs&#34;&gt;Dan Webb on hashbang routes&lt;/a&gt;,
but it was almost a year before we were able to remove them from Artsy. Here&amp;rsquo;s how it went down.&lt;/p&gt;

&lt;p&gt;Artsy relies on the &lt;a href=&#34;http://documentcloud.github.com/backbone/&#34;&gt;Backbone.js&lt;/a&gt; framework for our client application
which offers a solid pushState routing scheme. This includes a seamless hashtag fallback for
&lt;a href=&#34;http://caniuse.com/#feat=history&#34;&gt;browsers that don&amp;rsquo;t support the HTML5 History API&lt;/a&gt; (looking at you IE 9).&lt;/p&gt;

&lt;p&gt;The pushState routing is optional, but &lt;em&gt;&amp;ldquo;the world as it should be&amp;rdquo;&lt;/em&gt; suggests we say &amp;ldquo;Yes!&amp;rdquo; (or true) to pushState.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;Backbone.history.start({ pushState: true })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>