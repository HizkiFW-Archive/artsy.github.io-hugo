<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objective C on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/objective-c/</link>
    <description>Recent content in Objective C on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/objective-c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notorious BUG – The Unbugged Sessions Part 1</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/30/Notorious-BUG-Part-1/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/07/30/Notorious-BUG-Part-1/</guid>
      <description>&lt;p&gt;When the odds are stacked against you, your mind is overflowing, and you are ready to just pop, there’s always practical
debugging tips to help you through a cloudy day.&lt;/p&gt;

&lt;p&gt;In this post I’ll take you through a debugging session where I reproduce a crash, for which we were receiving a bunch of
crash reports, but I was unable to reproduce by just using the application.&lt;/p&gt;

&lt;p&gt;It will cover the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Narrow down the breakpoint to the method invocation where the crash occurs.&lt;/li&gt;
&lt;li&gt;Locate the exact instruction that causes the crash.&lt;/li&gt;
&lt;li&gt;Look at the implementation of the method where the crash occurs.&lt;/li&gt;
&lt;li&gt;Simulate the crash.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Grid Thumbnails</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/09/13/on-grid-thumbnails/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/09/13/on-grid-thumbnails/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-09-13-on-grid-thumbnails/grid.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;Artsy Folio, our free iPad app for Gallery Partners, had been in the App Store for a couple of weeks before the iPad with a Retina display was announced. This had been something we expected internally and felt the application would be ready. We had all our image assets available in &lt;em&gt;@2x&lt;/em&gt; versions and an image pipeline that would take scaling into account. With that in mind, we changed our artwork grid view to show a double resolution image. Finally, once we were happy that it worked fine on the simulator, we sent the build off to Apple for review.&lt;/p&gt;

&lt;p&gt;The app passed review, and was Retina-ready before the actual release. But within hours of getting our hands on a real Retina iPad, we had to pull the app. This post will explain why, and what we did to work it out.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Our Objective-C Code Standards</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/08/14/on-objective-c-code-standards/</link>
      <pubDate>Tue, 14 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/08/14/on-objective-c-code-standards/</guid>
      <description>&lt;p&gt;With the release of Xcode 4.4 I&amp;rsquo;ve taken a look back at our existing code standards and tried to come up with something that is cleaner and more elegant. Here are a few of the ideas I&amp;rsquo;ve been using to modernize the codebase.&lt;/p&gt;

&lt;h3 id=&#34;remove-private-method-declarations-and-use-class-extensions-to-add-ivars&#34;&gt;Remove private method declarations and use class extensions to add ivars.&lt;/h3&gt;

&lt;p&gt;First to get chopped by the deletion button are private method declarations. After Xcode 4.2 came out we took to using the class extension feature to add private method declarations at the top of implementation files. This was a nice way of keeping private methods out of the header files. Now that the compiler will check for pre-existing method signatures within the same object there&amp;rsquo;s no need to define their interfaces.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>