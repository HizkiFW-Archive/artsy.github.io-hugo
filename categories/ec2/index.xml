<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ec2 on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/ec2/</link>
    <description>Recent content in Ec2 on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jul 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/ec2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>On-Demand Jenkins Slaves with Amazon EC2</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2/</link>
      <pubDate>Tue, 10 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://artsy.net&#34;&gt;Artsy&lt;/a&gt; team faithfully uses &lt;a href=&#34;http://jenkins-ci.org&#34;&gt;Jenkins&lt;/a&gt; for continuous integration. &lt;a href=&#34;http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/&#34;&gt;As we&amp;rsquo;ve described before&lt;/a&gt;, our Jenkins master and 8 slaves run on Linode. This arrangement has at least a few drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our Linode servers are manually configured. They require frequent maintenance, and inconsistencies lead to surprising build failures.&lt;/li&gt;
&lt;li&gt;The fixed set of slaves don&amp;rsquo;t match the pattern of our build jobs: jobs get backed up during the day, but servers are mostly unused overnight and on weekends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Plugin&#34;&gt;Amazon EC2 Plugin&lt;/a&gt; allowed us to replace those slaves with a totally scripted environment. Now, slaves are spun up in the cloud whenever build jobs need them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spend Time With Your Site</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/05/spend-time-with-your-site/</link>
      <pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/05/spend-time-with-your-site/</guid>
      <description>&lt;p&gt;Empathy with end users is critical when developing consumer-facing software. Many go &lt;a href=&#34;http://innonate.com/2011/03/09/hackers-the-canon-of-consumer-facing-products/&#34;&gt;even&lt;/a&gt; &lt;a href=&#34;http://www.uie.com/articles/self_design/&#34;&gt;further&lt;/a&gt; and argue that you should &lt;em&gt;be&lt;/em&gt; your own user to effectively deliver the best experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I&amp;rsquo;d encourage anyone starting a startup to become one of its users, however unnatural it seems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;mdash; Paul Graham &lt;a href=&#34;http://paulgraham.com/organic.html&#34;&gt;Organic Startup Ideas&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In practice, though, this can be difficult:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a developer, you&amp;rsquo;re just not representative of the intended audience.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re [appropriately] focused on the product&amp;rsquo;s next iteration, while your audience is occupied with the current state.&lt;/li&gt;
&lt;li&gt;You spend countless hours focused on product details&amp;mdash;of course it&amp;rsquo;s a challenge to empathize with a casual visitor&amp;rsquo;s first impression.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;keeping-it-real&#34;&gt;Keeping it Real&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve tried some best practices to overcome these tendencies. User feedback is emailed to everyone in the company. Engineers share customer support responsibilities. But one simple tool has been surprisingly useful: we stole a page from the agile development handbook and built an &lt;a href=&#34;http://alistair.cockburn.us/Information+radiator&#34;&gt;information radiator&lt;/a&gt;. Like a &lt;a href=&#34;http://en.wikipedia.org/wiki/Kanban_board&#34;&gt;kanban board&lt;/a&gt;, news ticker, or &lt;a href=&#34;https://demo.geckoboard.com/dashboard/B6782E562794C2F2/&#34;&gt;analytics wall board&lt;/a&gt;, our information radiator gives us an ambient awareness of end users&amp;rsquo; experiences. How?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beyond Heroku: &#34;Satellite&#34; Delayed Job Workers on EC2</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2/</link>
      <pubDate>Tue, 31 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2/</guid>
      <description>&lt;p&gt;[TL;DR: To supplement Heroku-managed app servers, we launched custom EC2 instances to host Delayed Job worker processes. See the &lt;a href=&#34;https://github.com/joeyAghion/satellite_setup&#34;&gt;satellite_setup github repo&lt;/a&gt; for rake tasks and Chef recipes that make it easy.]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://artsy.net&#34;&gt;Artsy&lt;/a&gt; engineers are big users and abusers of &lt;a href=&#34;http://heroku.com&#34;&gt;Heroku&lt;/a&gt;. It&amp;rsquo;s a neat abstraction of server resources, so we were conflicted when parts of our application started to bump into Heroku&amp;rsquo;s limitations. While we weren&amp;rsquo;t eager to start managing additional infrastructure, we found that&amp;ndash;with a few good tools&amp;ndash;we could migrate some components away from Heroku without fragmenting the codebase or over-complicating our development environments.&lt;/p&gt;

&lt;p&gt;There are a number of reasons your app might need to go beyond Heroku. It might rely on a locally installed tool (not possible on Heroku&amp;rsquo;s locked-down servers), or require heavy file-system usage (limited to &lt;code&gt;tmp/&lt;/code&gt; and &lt;code&gt;log/&lt;/code&gt;, and not permanent or shared). In our case, the culprit was Heroku&amp;rsquo;s 512 MB RAM limit&amp;ndash;reasonable for most web processes, but quickly exceeded by the image-processing tasks of our &lt;a href=&#34;https://github.com/collectiveidea/delayed_job&#34;&gt;delayed_job&lt;/a&gt; workers. We considered building a specialized image-processing service, but decided instead to supplement our web apps with a custom &lt;a href=&#34;http://aws.amazon.com/ec2/&#34;&gt;EC2&lt;/a&gt; instance dedicated to processing background tasks. We call these servers &amp;ldquo;satellites.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll walk through the pertinent sections here, but you can find Rake tasks that correspond with these scripts, plus all of the necessary cookbooks, in the &lt;a href=&#34;https://github.com/joeyAghion/satellite_setup&#34;&gt;satellite_setup github repo&lt;/a&gt;. Now, on to the code!&lt;/p&gt;

&lt;p&gt;First, generate a key-pair from &lt;a href=&#34;https://console.aws.amazon.com/ec2/home?#s=KeyPairs&#34;&gt;Amazon&amp;rsquo;s AWS Management Console&lt;/a&gt;. Then we&amp;rsquo;ll use &lt;a href=&#34;http://fog.io&#34;&gt;Fog&lt;/a&gt; to spawn the EC2 instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fog&#39;

# Update these values according to your environment...
S3_ACCESS_KEY_ID = &#39;XXXXXXXXXXXXXXXXXXXX&#39;
S3_SECRET_ACCESS_KEY = &#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;
KEY_NAME = &#39;satellite_keypair&#39;
KEY_PATH = &amp;quot;#{ENV[&#39;HOME&#39;]}/.ssh/#{KEY_NAME}.pem&amp;quot;
IMAGE_ID = &#39;ami-c162a9a8&#39;  # 64-bit Ubuntu 11.10
FLAVOR_ID = &#39;m1.large&#39;

connection = Fog::Compute.new(provider: &#39;AWS&#39;,
  aws_access_key_id: S3_ACCESS_KEY_ID,
  aws_secret_access_key: S3_SECRET_ACCESS_KEY)

server = connection.servers.bootstrap(
  key_name: KEY_NAME,
  private_key_path: KEY_PATH,
  image_id: IMAGE_ID,
  flavor_id: FLAVOR_ID)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>