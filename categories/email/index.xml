<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Email on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/email/</link>
    <description>Recent content in Email on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/email/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generating Notifications and Personalized Emails Efficiently</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/04/24/generating-notifications-and-personalized-emails-efficiently/</link>
      <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/04/24/generating-notifications-and-personalized-emails-efficiently/</guid>
      <description>&lt;p&gt;We recently launched a new personalized email here at &lt;a href=&#34;https://artsy.net&#34;&gt;Artsy&lt;/a&gt; that features content that a given user might find interesting. The goal of this post is to describe how we built a backend system that efficiently generates these e-mails for all our users. I&amp;rsquo;ll talk about the first, naive implementation that had performance problems right away, and how the second implementation (currently in production) solved those issues, and whose behavior at scale is well-defined and understood. I won&amp;rsquo;t go into the details of the design and layout of the mail itself and how we render the content - there are several earlier blog posts that deal with those: &lt;a href=&#34;http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/&#34;&gt;Presenters and Memoization&lt;/a&gt;, &lt;a href=&#34;http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/&#34;&gt;Pinterest-style Layouts&lt;/a&gt; and &lt;a href=&#34;http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/&#34;&gt;Email Layouts and Responsiveness&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-04-24-generating-notifications-and-personalized-emails-efficiently/percy_example.png&#34; alt=&#34;Personalized Email Example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ruby Helper to Group Artworks into a Pinterest-style Layout for Email</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-03-17-ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/two-column-layout.png&#34; alt=&#34;Example of two column layout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Something we&amp;rsquo;d like to do is email our users some suggested artworks as part of their personalized emails. The layout of those suggestions should look something like our newly re-designed &lt;a href=&#34;https://artsy.net/browse/artworks?price_range=-1%3A1000000000000&#34;&gt;Browse&lt;/a&gt; page, with a &amp;lsquo;salon&amp;rsquo; style layout. Here&amp;rsquo;s some simple Ruby code that can group artworks into columns for you, that can then be directly rendered in an email (via &lt;a href=&#34;http://haml.info/&#34;&gt;Haml&lt;/a&gt;, &lt;a href=&#34;http://mustache.github.io/&#34;&gt;Mustache&lt;/a&gt;, &lt;a href=&#34;http://jade-lang.com/&#34;&gt;Jade&lt;/a&gt;, or your templating language of choice.)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Some Tips for Email Layout and Responsiveness</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/some-tips-for-email-layout-and-responsiveness/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2014/03/17/some-tips-for-email-layout-and-responsiveness/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/analytics.png&#34; alt=&#34;Example of Analytics Email&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Email can be one of the most powerful ways to engage with your users, and can serve a multitude of purposes. It can be used as a way to highlight selected content (weekly/monthly newsletters, &amp;lsquo;year in review&amp;rsquo;, etc.), provide a service to users (analytics breakdown of visits to your profile/favorites page), or re-engage with users (new feature announcements, etc.). Here at Artsy we use all of these kinds of emails and have found them to be a very valuable asset. However, best practices for template layout and CSS (keeping in mind the variety of devices and screen sizes that your users have) are quite different from, and very far behind, the current HTML5 standards and practices for making beautiful web pages. In this article, I&amp;rsquo;d like to present some techniques I&amp;rsquo;ve successfully used at Artsy to create emails that look good on your browser or mobile device, in some of the most popular email clients out there.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Normalizing GMail E-Mail Addresses with CanonicalEmails</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails/</link>
      <pubDate>Sun, 23 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails/</guid>
      <description>&lt;p&gt;A whopping 49% of Artsy users have &amp;ldquo;gmail.com&amp;rdquo; email addresses. The next domain name, &amp;ldquo;hotmail.com&amp;rdquo;, doesn&amp;rsquo;t even come close, with only 6%.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-06-23-normalizing-gmail-email-addresses-with-canonical-emails/artsy-email-domains.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GMail addresses ignore periods and are case-insensitive. For example, &amp;ldquo;Donald.Duck@gmail.com&amp;rdquo; and &amp;ldquo;donaldduck@gmail.com&amp;rdquo; are the same account. You can log-in to GMail with both. Users often register with the former and try to log-in to Artsy with the latter. With so many GMail users, expect a dozen support emails per day.&lt;/p&gt;

&lt;p&gt;The solution is to normalize these emails into a canonical form.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating Automatic Plain Text MIME Parts with Rails ActionMailer</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer/</link>
      <pubDate>Wed, 16 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer/</guid>
      <description>&lt;p&gt;E-mail is one of the most important ways to engage your users. And every time you touch a user&amp;rsquo;s inbox, it reflects on your brand. But getting email right has become increasing difficult due to the complexities introduced by the thousands of web-based, desktop and mobile mail clients. Email formatting is like the &amp;ldquo;Hunger Games&amp;rdquo; where the major players include online services such as GMail, Yahoo, Hotmail or AOL, desktop clients such as Outlook and a myriad mobile devices ranging from iPhone and Android to Blackberry.&lt;/p&gt;

&lt;p&gt;To deal with this landscape, the MIME standard allows systems to send e-mail with multiple parts: &lt;code&gt;plain/text&lt;/code&gt; for business-efficient devices such as the Blackberry, and &lt;code&gt;text/html&lt;/code&gt; for web-based e-mail readers, such as GMail. Furthermore, &lt;code&gt;ActionMailer&lt;/code&gt; supports multiple template formats: create an &lt;code&gt;.html.haml&lt;/code&gt; template along with a &lt;code&gt;.txt.haml&lt;/code&gt; template to generate both. We also know that &lt;code&gt;text/plain&lt;/code&gt; email helps deliverability, but we believe a disproportionately small amount of text e-mails are actually read - the vast majority of devices are capable of parsing some HTML.&lt;/p&gt;

&lt;p&gt;Is it possible to avoid having to maintain two separate templates without sacrificing deliverability? How can we inject a &lt;code&gt;text/plain&lt;/code&gt; part into HTML e-mail that is both useful and &amp;ldquo;free&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>