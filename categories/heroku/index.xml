<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heroku on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/heroku/</link>
    <description>Recent content in Heroku on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Aug 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/heroku/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to AWS OpsWorks</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/08/27/introduction-to-aws-opsworks/</link>
      <pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/08/27/introduction-to-aws-opsworks/</guid>
      <description>&lt;p&gt;OpsWorks is a new service from Amazon that promises to provide high-level tools to manage your EC2-based deployment. From &lt;a href=&#34;http://aws.typepad.com/aws/2013/02/aws-opsworks-flexible-application-management-in-the-cloud.html&#34;&gt;the announcement&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS OpsWorks features an integrated management experience for the entire application lifecycle including resource provisioning, configuration management, application deployment, monitoring, and access control. It will work with applications of any level of complexity and is independent of any particular architectural pattern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After scratching our heads about exactly what that meant, we tried it anyway. If you&amp;rsquo;ve been straining at the limits of your Platform as a Service (PaaS) provider, or just wishing for more automation for your EC2 deployment, you may want to try it out too.&lt;/p&gt;

&lt;p&gt;Artsy has been experimenting with OpsWorks for a few months now and recently adopted it for the production &lt;a href=&#34;http://artsy.net&#34;&gt;artsy.net&lt;/a&gt; site. We&amp;rsquo;re excited to share what we&amp;rsquo;ve learned in the process.&lt;/p&gt;

&lt;p&gt;{% include expanded_img.html url=&amp;ldquo;/images/2013-08-27-introduction-to-aws-opsworks/opsworks.png&amp;rdquo; title=&amp;ldquo;OpsWorks overview&amp;rdquo; %}&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Impact of Heroku&#39;s Routing Mesh and Random Routing</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/17/impact-of-heroku-routing-mesh-and-random-routing/</link>
      <pubDate>Sun, 17 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/17/impact-of-heroku-routing-mesh-and-random-routing/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://rapgenius.com/James-somers-herokus-ugly-secret-lyrics&#34;&gt;Heroku&amp;rsquo;s Ugly Secret&lt;/a&gt; blog post went viral last week. I &lt;a href=&#34;http://code.dblock.org/in-defense-of-heroku&#34;&gt;wrote&lt;/a&gt; in defense of Heroku, which has now responded with an official &lt;a href=&#34;https://blog.heroku.com/archives/2013/2/16/routing_performance_update/&#34;&gt;Routing Performance Update&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Random request queuing has been discussed in the past in &lt;a href=&#34;http://tiwatson.com/blog/2011-2-17-heroku-no-longer-using-a-global-request-queue&#34;&gt;Tim Watson&amp;rsquo;s post&lt;/a&gt; based on a &lt;a href=&#34;https://groups.google.com/forum/?fromgroups=#!msg/heroku/8eOosLC5nrw/Xy2j7GapebIJ&#34;&gt;response&lt;/a&gt; by Heroku&amp;rsquo;s Adam Wiggins. While the documentation may not have been accurate or even somewhat misleading, we, at Artsy, understood the strategy and the limitations of the routing mesh for quite sometime. Therefore, we have been making continuous efforts to improve our application&amp;rsquo;s performance and reduce the negative impact of random routing inside the routing mesh over the past few months.&lt;/p&gt;

&lt;p&gt;One thing we didn&amp;rsquo;t do, was to measure the actual wait time inside a dyno. In restrospect, it seems obvious that we should have. In this post we&amp;rsquo;ll describe a middleware to do so. This is entirely based on the work of &lt;a href=&#34;https://gist.github.com/daveyeu/4960893&#34;&gt;David Yeu&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/jasonrclark/d82a1ea7695daac0b9ee&#34;&gt;Jason R Clark&lt;/a&gt; and RG&amp;rsquo;s own &lt;a href=&#34;https://gist.github.com/a-warner/f5db30857ed3423cea79&#34;&gt;Andrew Warner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this code in place, here&amp;rsquo;s a 12 hour graph of our website&amp;rsquo;s API performance. The dyno wait time for our application, in green, averaged 61.1ms for a total of 301ms average per request, which is 1/5th of the total request time. It&amp;rsquo;s certainly a lot, but we do spend a lot more time in our own code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-02-17-impact-of-heroku-routing-mesh-and-random-routing/newrelic-12-hours.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Note that the single peak on the right of the graph corresponds to a dyno auto-scale job. We double the number of dynos with early morning traffic, which causes new dynos to boot up and accumulate requests before they are &amp;ldquo;warm&amp;rdquo; enough to process requests at their normal rate.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Master the Heroku CLI with Heroku Commander</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/01/master-heroku-command-line-with-heroku-commander/</link>
      <pubDate>Fri, 01 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/02/01/master-heroku-command-line-with-heroku-commander/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2013-02-01-master-heroku-command-line-with-heroku-commander/heroku-commander.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Heroku users frequently run the &lt;strong&gt;heroku&lt;/strong&gt; command-line tool that ships with the &lt;a href=&#34;https://toolbelt.heroku.com/&#34;&gt;Heroku Toolbelt&lt;/a&gt;. It has two very convenient features: it will remember API credentials and default to the &amp;ldquo;heroku&amp;rdquo; GIT remote to figure out the application to connect to. Neither of these features are available in the Heroku client API, so it&amp;rsquo;s not unusual to find developers invoke the Heroku CLI from Rake tasks and other automation scripts.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re several problems with using the Heroku CLI for automation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The exit code from &lt;code&gt;heroku run&lt;/code&gt; is not the exit code from the process being run on Heroku. See &lt;a href=&#34;https://github.com/heroku/heroku/issues/186&#34;&gt;#186&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Gathering console output from &lt;code&gt;heroku run:detached&lt;/code&gt; requires an external &lt;code&gt;heroku logs --tail&lt;/code&gt; process that will never finish.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/dblock/heroku-commander&#34;&gt;heroku-commander&lt;/a&gt; gem wraps execution of the Heroku CLI to overcome these common limitations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debugging Bundler Issues on Heroku</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2013/01/15/debugging-bundler-issues-with-heroku/</link>
      <pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2013/01/15/debugging-bundler-issues-with-heroku/</guid>
      <description>&lt;p&gt;A few days ago we have started seeing the Heroku deployments of one of our applications randomly hang during &lt;code&gt;bundle install&lt;/code&gt;. The problem worsened with time and we were not able to do a deployment for days.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push -f git@heroku.com:application.git FETCH_HEAD:master
-----&amp;gt; Deleting 12 files matching .slugignore patterns.
-----&amp;gt; Ruby/Rails app detected
-----&amp;gt; Using Ruby version: ruby-1.9.3
-----&amp;gt; Installing dependencies using Bundler version 1.3.0.pre.5
       Running: bundle install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin
       Fetching gem metadata from http://rubygems.org/.......
       Fetching gem metadata from http://rubygems.org/..
/app/slug-compiler/lib/utils.rb:66:in `block (2 levels) in spawn&#39;: command=&#39;/app/slug-compiler/lib/../../tmp/buildpacks/ruby/bin/compile /tmp/build_1p6071sni4hh1 /app/tmp/repo.git/.cache&#39; exit_status=0 out=&#39;&#39; at=timeout elapsed=900.1056394577026 (Utils::TimeoutError)
  from /app/slug-compiler/lib/utils.rb:52:in `loop&#39;
  from /app/slug-compiler/lib/utils.rb:52:in `block in spawn&#39;
  from /app/slug-compiler/lib/utils.rb:47:in `popen&#39;
  from /app/slug-compiler/lib/utils.rb:47:in `spawn&#39;
  from /app/slug-compiler/lib/buildpack.rb:37:in `block in compile&#39;
  from /app/slug-compiler/lib/buildpack.rb:35:in `fork&#39;
  from /app/slug-compiler/lib/buildpack.rb:35:in `compile&#39;
  from /app/slug-compiler/lib/slug.rb:497:in `block in run_buildpack&#39;
 !     Heroku push rejected, failed to compile Ruby/rails app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seeing bundler hang on &amp;ldquo;Fetching gem metadata from &lt;a href=&#34;http://rubygems.org/&amp;quot;&#34;&gt;http://rubygems.org/&amp;quot;&lt;/a&gt;, my immediate reaction was to blame the RubyGems Dependency API for its poor performance and attempt the &lt;a href=&#34;http://hone.herokuapp.com/bundler%20heroku/2012/10/22/rubygems-and-the-dependency-api.html&#34;&gt;recommended workaround&lt;/a&gt; of switching to &lt;em&gt;&lt;a href=&#34;http://bundler-api.herokuapp.com&#34;&gt;http://bundler-api.herokuapp.com&lt;/a&gt;&lt;/em&gt;. That didn&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;I also tried to reproduce the issue on a local environment, including a (what I thought was) a completely clean machine at no avail. My &lt;code&gt;bundle install&lt;/code&gt; would always succeed.&lt;/p&gt;

&lt;p&gt;Finally, everything pointed at an infrastructure problem with Heroku itself, so I opened a ticket (#72648), &lt;a href=&#34;https://twitter.com/dblockdotorg/status/290221530892365824&#34;&gt;tweeted&lt;/a&gt; endlessly to Heroku devs, pinged a  contact at Heroku on Skype and generally annoyed people for 5 straight days. It was a frustrating problem and I was getting no useful help.&lt;/p&gt;

&lt;p&gt;Fast forward, this turned out to be &lt;a href=&#34;https://github.com/carlhuda/bundler/issues/2248&#34;&gt;an issue in Bundler&lt;/a&gt;. Narrowing it down would have been relatively easy if I had known where to look.&lt;/p&gt;

&lt;p&gt;I hope this post helps you with similar issues.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beat Heroku&#39;s 60 Seconds Application Boot Timeout with a Proxy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/12/13/beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/</link>
      <pubDate>Thu, 13 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/12/13/beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-12-13-beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/heroku-logo-light-234x60.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Heroku will log an &lt;a href=&#34;https://devcenter.heroku.com/articles/error-codes#r10-boot-timeout&#34;&gt;R10 - Boot Timeout&lt;/a&gt; error when a web process takes longer than 60 seconds to bind to its assigned port. This error is often caused by a process being unable to reach an external resource, such as a database or because you have a lot of gems in your &lt;code&gt;Gemfile&lt;/code&gt; which take a long time to load.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Dec 12 12:12:12 prod heroku/web.1:
  Error R10 (Boot timeout)
  Web process failed to bind to $PORT within 60 seconds of launch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s currently no way to increase this boot timeout, but we can beat it with a proxy implemented by our new &lt;a href=&#34;https://github.com/dblock/heroku-forward&#34;&gt;heroku-forward&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Measuring Performance in Grape APIs with NewRelic RPM</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/29/measuring-performance-in-grape-apis-with-new-relic/</link>
      <pubDate>Thu, 29 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/29/measuring-performance-in-grape-apis-with-new-relic/</guid>
      <description>&lt;p&gt;Knowing how well your API performs in real time is essential to any successful project. That&amp;rsquo;s because you can&amp;rsquo;t fix what you can&amp;rsquo;t measure.&lt;/p&gt;

&lt;p&gt;We use and heavily contribute to &lt;a href=&#34;http://github.com/intridea/grape&#34;&gt;Grape&lt;/a&gt;, a Ruby API DSL. Grape is a Rack middleware and we have been reporting API performance data to &lt;a href=&#34;http://newrelic.com/&#34;&gt;NewRelic&lt;/a&gt; with code from &lt;a href=&#34;http://code.dblock.org/new-relic-performance-instrumentation-with-grape-api&#34;&gt;my older blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s time to improve the reporting implementation and address performance monitoring in both development and production environments. Here&amp;rsquo;s what a single API request breakdown is going to look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/transaction-detail.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Monitor 503s and Timeout Requests on Heroku</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku/</link>
      <pubDate>Thu, 15 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku/</guid>
      <description>&lt;p&gt;We have recently started hitting an unusually high number of &amp;ldquo;503: Service Unavailable&amp;rdquo; errors with one of our applications on Heroku. What are these? How can we monitor their quantity and frequency? What&amp;rsquo;s the fix?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/2012-11-15-how-to-monitor-503s-and-timeout-on-heroku/503-error.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spend Time With Your Site</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/05/spend-time-with-your-site/</link>
      <pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/07/05/spend-time-with-your-site/</guid>
      <description>&lt;p&gt;Empathy with end users is critical when developing consumer-facing software. Many go &lt;a href=&#34;http://innonate.com/2011/03/09/hackers-the-canon-of-consumer-facing-products/&#34;&gt;even&lt;/a&gt; &lt;a href=&#34;http://www.uie.com/articles/self_design/&#34;&gt;further&lt;/a&gt; and argue that you should &lt;em&gt;be&lt;/em&gt; your own user to effectively deliver the best experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I&amp;rsquo;d encourage anyone starting a startup to become one of its users, however unnatural it seems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;mdash; Paul Graham &lt;a href=&#34;http://paulgraham.com/organic.html&#34;&gt;Organic Startup Ideas&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In practice, though, this can be difficult:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a developer, you&amp;rsquo;re just not representative of the intended audience.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re [appropriately] focused on the product&amp;rsquo;s next iteration, while your audience is occupied with the current state.&lt;/li&gt;
&lt;li&gt;You spend countless hours focused on product details&amp;mdash;of course it&amp;rsquo;s a challenge to empathize with a casual visitor&amp;rsquo;s first impression.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;keeping-it-real&#34;&gt;Keeping it Real&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve tried some best practices to overcome these tendencies. User feedback is emailed to everyone in the company. Engineers share customer support responsibilities. But one simple tool has been surprisingly useful: we stole a page from the agile development handbook and built an &lt;a href=&#34;http://alistair.cockburn.us/Information+radiator&#34;&gt;information radiator&lt;/a&gt;. Like a &lt;a href=&#34;http://en.wikipedia.org/wiki/Kanban_board&#34;&gt;kanban board&lt;/a&gt;, news ticker, or &lt;a href=&#34;https://demo.geckoboard.com/dashboard/B6782E562794C2F2/&#34;&gt;analytics wall board&lt;/a&gt;, our information radiator gives us an ambient awareness of end users&amp;rsquo; experiences. How?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beyond Heroku: &#34;Satellite&#34; Delayed Job Workers on EC2</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2/</link>
      <pubDate>Tue, 31 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2/</guid>
      <description>&lt;p&gt;[TL;DR: To supplement Heroku-managed app servers, we launched custom EC2 instances to host Delayed Job worker processes. See the &lt;a href=&#34;https://github.com/joeyAghion/satellite_setup&#34;&gt;satellite_setup github repo&lt;/a&gt; for rake tasks and Chef recipes that make it easy.]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://artsy.net&#34;&gt;Artsy&lt;/a&gt; engineers are big users and abusers of &lt;a href=&#34;http://heroku.com&#34;&gt;Heroku&lt;/a&gt;. It&amp;rsquo;s a neat abstraction of server resources, so we were conflicted when parts of our application started to bump into Heroku&amp;rsquo;s limitations. While we weren&amp;rsquo;t eager to start managing additional infrastructure, we found that&amp;ndash;with a few good tools&amp;ndash;we could migrate some components away from Heroku without fragmenting the codebase or over-complicating our development environments.&lt;/p&gt;

&lt;p&gt;There are a number of reasons your app might need to go beyond Heroku. It might rely on a locally installed tool (not possible on Heroku&amp;rsquo;s locked-down servers), or require heavy file-system usage (limited to &lt;code&gt;tmp/&lt;/code&gt; and &lt;code&gt;log/&lt;/code&gt;, and not permanent or shared). In our case, the culprit was Heroku&amp;rsquo;s 512 MB RAM limit&amp;ndash;reasonable for most web processes, but quickly exceeded by the image-processing tasks of our &lt;a href=&#34;https://github.com/collectiveidea/delayed_job&#34;&gt;delayed_job&lt;/a&gt; workers. We considered building a specialized image-processing service, but decided instead to supplement our web apps with a custom &lt;a href=&#34;http://aws.amazon.com/ec2/&#34;&gt;EC2&lt;/a&gt; instance dedicated to processing background tasks. We call these servers &amp;ldquo;satellites.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll walk through the pertinent sections here, but you can find Rake tasks that correspond with these scripts, plus all of the necessary cookbooks, in the &lt;a href=&#34;https://github.com/joeyAghion/satellite_setup&#34;&gt;satellite_setup github repo&lt;/a&gt;. Now, on to the code!&lt;/p&gt;

&lt;p&gt;First, generate a key-pair from &lt;a href=&#34;https://console.aws.amazon.com/ec2/home?#s=KeyPairs&#34;&gt;Amazon&amp;rsquo;s AWS Management Console&lt;/a&gt;. Then we&amp;rsquo;ll use &lt;a href=&#34;http://fog.io&#34;&gt;Fog&lt;/a&gt; to spawn the EC2 instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fog&#39;

# Update these values according to your environment...
S3_ACCESS_KEY_ID = &#39;XXXXXXXXXXXXXXXXXXXX&#39;
S3_SECRET_ACCESS_KEY = &#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;
KEY_NAME = &#39;satellite_keypair&#39;
KEY_PATH = &amp;quot;#{ENV[&#39;HOME&#39;]}/.ssh/#{KEY_NAME}.pem&amp;quot;
IMAGE_ID = &#39;ami-c162a9a8&#39;  # 64-bit Ubuntu 11.10
FLAVOR_ID = &#39;m1.large&#39;

connection = Fog::Compute.new(provider: &#39;AWS&#39;,
  aws_access_key_id: S3_ACCESS_KEY_ID,
  aws_secret_access_key: S3_SECRET_ACCESS_KEY)

server = connection.servers.bootstrap(
  key_name: KEY_NAME,
  private_key_path: KEY_PATH,
  image_id: IMAGE_ID,
  flavor_id: FLAVOR_ID)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>