<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/react/</link>
    <description>Recent content in React on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modernizing Force</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/09/05/Modernizing-Force/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/09/05/Modernizing-Force/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/artsy/force&#34;&gt;Force&lt;/a&gt; is Artsy&amp;rsquo;s main website, &lt;a href=&#34;https://www.artsy.net&#34;&gt;artsy.net&lt;/a&gt;. In the three years since it was &lt;a href=&#34;http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/&#34;&gt;open-sourced&lt;/a&gt;, it has provided a solid foundation to build features on top of without a lot of the costs associated with growth. It is an early example of Isomorphic (&amp;ldquo;universal&amp;rdquo;) JavaScript, built on top of Express, Backbone, CoffeeScript, Stylus and Jade. It is also highly modular, adopting patterns laid down by its parent project,  &lt;a href=&#34;https://github.com/artsy/ezel&#34;&gt;Ezel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When first developed these technologies made a lot of sense; CoffeeScript fixed many of the problems with JavaScript pre-ES6, and Jade / Stylus made working with HTML / CSS much more elegant. As time progressed and new technologies became a thing these solutions starting feeling more burdensome to continue building features with and many of our developers longed to start using next-generation tools like React.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Art &#43; Feminism and Artsy Wikipedia/Wikidata Editathon</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/08/31/Editathon/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/08/31/Editathon/</guid>
      <description>&lt;p&gt;Artsy has always had a focus on Art meets Science, and we &lt;a href=&#34;https://www.meetup.com/CocoaPods-NYC/messages/boards/thread/50940969&#34;&gt;hosted a meet-up in July&lt;/a&gt; that really hits on both. We had a collection of Artsy Staff, members of &lt;a href=&#34;http://www.artandfeminism.org&#34;&gt;Art + Feminism&lt;/a&gt; NYC, the &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/08/10/peer-lab/&#34;&gt;CocoaPods Peer Lab&lt;/a&gt;, &lt;a href=&#34;http://www.artspracticum.org&#34;&gt;New York Arts Practicum&lt;/a&gt; and volunteers from &lt;a href=&#34;https://nyc.wikimedia.org/&#34;&gt;Wikimedia NYC&lt;/a&gt; all helping out.&lt;/p&gt;

&lt;p&gt;We came with two aims:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help anyone interested in contributing to Wikipedia get started.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://github.com/artsy/the-art-genome-project&#34;&gt;The Art Genome Project&lt;/a&gt;(TAGP) to improve Wikidata entries for women Artists.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I helped out with the second part, and the rest of this post will be about the lessons learned during this &lt;a href=&#34;https://en.wikipedia.org/wiki/Edit-a-thon&#34;&gt;editathon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to React Native for an iOS Developer</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/06/React-Native-for-iOS-devs/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/07/06/React-Native-for-iOS-devs/</guid>
      <description>&lt;p&gt;React Native is a new native library that vastly changes the way in which you can create applications. The majority of the information and tutorials on the subject come from the angle of &lt;em&gt;&amp;ldquo;you are a web developer, and want to do native&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This makes sense, given that the size of the JavaScript/web audience is much bigger than native developers, and far more open in the idea of writing apps using JavaScript. For web developers it opens a new creative space to work, however for native developers it provides a way to work with different tools on the same problem. Considering that most developers with a few years on the platform will be comfortable with the Xcode toolset, recommending a change this drastic is a tough sell.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been using React Native now for about a year and a half, and have started to slow down on sweeping changes inside the codebase. This is great because it means we&amp;rsquo;re spending less time trying to get things to work, and more time building on top of a solid foundations. Now that we&amp;rsquo;re settled, it&amp;rsquo;s time to start deeply understanding what happens with React Native.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like cover a lot of the common questions we get asked about from the perspective of native developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is React Native?&lt;/li&gt;
&lt;li&gt;How do you use React Native?&lt;/li&gt;
&lt;li&gt;When is React Native a good technology choice?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article covers an awful lot, so free up at least 45 minutes, make a tea and then come back to this on your computer. It&amp;rsquo;s worth your time if you&amp;rsquo;re interested in all the hype around React Native.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploration: Front-end JavaScript at Artsy in 2017</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/05/Front-end-JavaScript-at-Artsy-2017/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/05/Front-end-JavaScript-at-Artsy-2017/</guid>
      <description>&lt;p&gt;&lt;center&gt;
 &lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/js2017/js.svg&#34; style=&#34;width:300px;&#34;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The Artsy web team have been early adopters of node, and for the last 4 years the stable stack for the Artsy website has been predominantly been Node + CoffeeScript + Express + Backbone. In 2016 the mobile team &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/08/15/React-Native-at-Artsy/&#34;&gt;announced&lt;/a&gt; that it had moved to React Native, matching the web team as using JavaScript as the tools of their trade.&lt;/p&gt;

&lt;p&gt;Historically we have always had two separate dev teams for building Artsy.net and the corresponding iOS app, we call them (Art) Collector Web, and Collector Mobile. By the end of 2016 we decided to merge the teams. The merger has given way to a whole plethora of ideas about what contemporary JavaScript looks like and we&amp;rsquo;ve been experimenting with finding common, natural patterns between web and native.&lt;/p&gt;

&lt;p&gt;This post tries to encapsulate what we consider to be our consolidated stack for web/native Artsy in 2017.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&#34;#TypeScript&#34;&gt;TypeScript&lt;/a&gt;, &lt;a href=&#34;#GraphQL&#34;&gt;GraphQL&lt;/a&gt;, &lt;a href=&#34;#React...React.Native&#34;&gt;React/React Native&lt;/a&gt;, &lt;a href=&#34;#Relay&#34;&gt;Relay&lt;/a&gt;, &lt;a href=&#34;#Yarn&#34;&gt;Yarn&lt;/a&gt;, &lt;a href=&#34;#Jest&#34;&gt;Jest&lt;/a&gt;, and &lt;a href=&#34;#Visual.Studio.Code&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Native at Artsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/15/React-Native-at-Artsy/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/15/React-Native-at-Artsy/</guid>
      <description>&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/react-native/artsy_react_logo.svg&#34; style=&#34;width:300px;&#34;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://github.com/artsy/eigen&#34;&gt;the Artsy iOS app&lt;/a&gt; grew larger, we started hitting pain
points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We want to support other future platforms such as Android without creating more teams.&lt;/li&gt;
&lt;li&gt;We want different business teams to work on the app without disrupting each other.&lt;/li&gt;
&lt;li&gt;We want our architecture to evolve in order to increase programmer efficiency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It took us &lt;a href=&#34;https://github.com/artsy/mobile/issues/22&#34;&gt;about a year&lt;/a&gt; to start resolving these issues.
Ideally, we wanted to find a solution to our architectural issues that would also improve the user
experience. Notably we wanted more efficient networking, due to mobile device constraints.&lt;/p&gt;

&lt;p&gt;It would have been an easy leap to start using Swift and, as a matter of fact, we do use Swift in parts of
our flagship application and entirely in &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;2 other apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, while Swift is a great language, itâ€™s also just that: &lt;em&gt;another&lt;/em&gt; language. It does not do much in terms of new
paradigms that solved our architectural needs, it does not help in terms of cross-platform - as most of our code is
building views and thus very framework specific, and it did not really offer anything in terms of more efficient network
data fetching.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve seen that the web teams integrate React in their projects with really great results. We&amp;rsquo;ve been
&lt;a href=&#34;https://github.com/artsy/mobile/issues/22&#34;&gt;paying attention&lt;/a&gt; to React Native since it came out; the solutions provided
by the React ecosystem ticked all of our boxes.&lt;/p&gt;

&lt;p&gt;Six months ago we took the plunge, and last month we formalized that this is the direction we want to go.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Tech Behind Live Auction Integration</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/09/the-tech-behind-live-auction-integration/</link>
      <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/08/09/the-tech-behind-live-auction-integration/</guid>
      <description>&lt;p&gt;In late June, the &lt;a href=&#34;https://www.artsy.net/auctions/&#34;&gt;Artsy auctions&lt;/a&gt; team launched our Live Auction Integration (LAI) product. It allows people to participate online in live sales held at auction houses &lt;a href=&#34;https://www.artsy.net/auction-partnerships&#34;&gt;that partner with Artsy&lt;/a&gt;. It was a big project, begun in December, involving both brand new software and extensive integration work with the rest of our systems. This is the first in what will be a series of blog posts discussing the engineering work we did to get a complex product from inception to launch in such a brief time window, with a go-live deadline set in stone weeks in advance. In this, Iâ€™ll dig into what we shipped on a high level, as well as some of the overarching technical decisions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Trying out React</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react/</guid>
      <description>&lt;p&gt;We recently picked up a Rails application that was a few features away from completion. This application allows our &lt;a href=&#34;https://www.artsy.net/about/the-art-genome-project&#34;&gt;Genome Team&lt;/a&gt; to classify multiple artworks based on visual and art historical characteristics. These characteristics, or &amp;ldquo;genes&amp;rdquo;, can be added, removed, and changed for any of the artworks on the panel.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#39;https://hizkifw.github.io/artsy.github.io-hugo/images/2015-04-08-creating-a-dynamic-single-page-app-for-our-genome-team-using-react/helix_screenshot.png&#39;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Our genomers are masters of efficiency, and over the years we have worked closely with them to tailor a dynamic interface to their specific workflow.&lt;/p&gt;

&lt;p&gt;When we started working on the app, the back-end was organized, modular, and interfaced seamlessly with the Artsy API, but there were still a few front-end features we needed to implement before it could be used by the Genome Team. The app did not use a front-end framework, and as our features scaled it was difficult to keep track of UI state with pure CoffeeScript and global event listeners. Eventually, we decided to stop trying to patch our leaky roof and build a new one.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>