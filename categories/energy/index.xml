<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Energy on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/energy/</link>
    <description>Recent content in Energy on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/energy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is fastlane match?</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/05/what-is-fastlane-match/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/04/05/what-is-fastlane-match/</guid>
      <description>&lt;p&gt;Like anyone working on a non-trivial app in the iOS world who values their time, we use fastlane. &lt;a href=&#34;https://fastlane.tools&#34;&gt;fastlane&lt;/a&gt; is a suite
of tools that makes it much simpler to automate the very manual processes provided by Apple for deployment.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve adopted it in a relatively piece-meal manner in different projects, converting custom in-house code to something
provided by the gem.  Over time we found what pieces of the suite work for us. &lt;a href=&#34;https://github.com/artsy/energy/pull/266&#34;&gt;I&amp;rsquo;ve adopted another today&lt;/a&gt;: &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/match&#34;&gt;match&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;match automates setting up your iOS projects for code signing. One of the most arduous orthogonal tasks which every dev team learns and then forgets.&lt;/p&gt;

&lt;p&gt;In using match, we have given away a bit of control with code signing, and so this post is going to dig into; what we used
to have, and how it works now with match instead.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Review: Energy Sync</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/02/12/Code-Review-Energy-Sync/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/02/12/Code-Review-Energy-Sync/</guid>
      <description>&lt;p&gt;We are slowly trying to do high-level code-review views for all of our iOS apps. So far, we&amp;rsquo;ve covered &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/01/14/eidolon-code-review/&#34;&gt;Eidolon&lt;/a&gt; and &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/11/05/Emergence-Code-Review/&#34;&gt;Emergence&lt;/a&gt; and now &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/02/11/Code-Review-Energy/&#34;&gt;Energy&lt;/a&gt;. This is the second part of the Energy code review. The &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/02/11/Code-Review-Energy/&#34;&gt;first part&lt;/a&gt; covers the the critical codepaths that go from the App&amp;rsquo;s launch to sending an email, which is the main use-case for the app. This video covers how Folio does sync between the Artsy API and the app.&lt;/p&gt;

&lt;p&gt;Sync is a complex problem. This video covers our old techniques, how we changed them, the underlying abstractions we use now and how we can test each component individually. It&amp;rsquo;s an hour long, and it&amp;rsquo;s a little computer-sciencey. So I think people who have shipped some small apps would get a lot out of it.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=05HaKChPe_g&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Review: Energy overview</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/02/11/Code-Review-Energy/</link>
      <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/02/11/Code-Review-Energy/</guid>
      <description>&lt;p&gt;We are slowly trying to do high-level code-review views for all of our iOS apps. So far, we&amp;rsquo;ve covered &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/01/14/eidolon-code-review/&#34;&gt;Eidolon&lt;/a&gt; and &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2015/11/05/Emergence-Code-Review/&#34;&gt;Emergence&lt;/a&gt;. Folio is an app that&amp;rsquo;s shipped to the App Store in early 2012, it&amp;rsquo;s used by our Partners to showcase their works offline, at fairs and on the go. If you want the full spiel, check out &lt;a href=&#34;http://folio.artsy.net&#34;&gt;this microsite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This video talks through a lot of the critical codepaths that go from the App&amp;rsquo;s launch to sending an email, which is the main use-case for the app. We have another video coming up which exclusively covers how Folio does sync between the Artsy API and the app.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&#34;https://www.youtube.com/watch?v=Xhd25hFzN4o&#34;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cocoa Architecture: Dropped Design Patterns</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/</guid>
      <description>&lt;p&gt;As a part of going through the design patterns we&amp;rsquo;ve found in the creation of the Artsy iOS apps, I&amp;rsquo;d like to talk a bit about some of the patterns that we&amp;rsquo;ve had and migrated away from. This is not 100% comprehensive, as there has been a lot of time, and a lot of people involved. Instead I&amp;rsquo;m going to try and give a birds eye view, and zoom in on some things that feel more important overall.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cocoa Architecture: ARSwitchboard</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cocoa Architecture: ARRouter</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/15/Cocoa-Architecture-Router-Pattern/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/15/Cocoa-Architecture-Router-Pattern/</guid>
      <description>&lt;p&gt;I want to talk about a pattern that we&amp;rsquo;ve been using for the last few years on the Artsy Mobile team. This pattern pre-dates me joining Artsy by a few weeks, and was introduced into our codebase by &lt;a href=&#34;http://90wpm.com&#34;&gt;Ben Jackson&lt;/a&gt;, this was the &lt;code&gt;ARRouter&lt;/code&gt;&amp;rsquo;s first method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;  + (NSURL *)newOAuthURLWithUsername:(NSString *)username password:(NSString *)password {
      NSDictionary *params = [[NSDictionary alloc] initWithObjectsAndKeys:
                              username, @&amp;quot;email&amp;quot;,
                              password, @&amp;quot;password&amp;quot;,
                              ARAuthClientID, @&amp;quot;client_id&amp;quot;,
                              ARAuthSecret, @&amp;quot;client_secret&amp;quot;,
                              @&amp;quot;credentials&amp;quot;, @&amp;quot;grant_type&amp;quot;,
                              nil];
      NSString *url_string = [[NSString alloc] initWithFormat:@&amp;quot;%@%@&amp;quot;, AROAuthURL, [params queryString]];
      NSURL *url = [ARRouter newURLWithPath:url_string];
      [url_string release];
      [params release];
      return url;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep, that&amp;rsquo;s pre-ARC, pre-Dictionary Literals, memory-managed code. We took this pattern and rolled with it for the next 4 years, this article is about where we&amp;rsquo;ve taken it.&lt;/p&gt;

&lt;p&gt;Within Eigen, &lt;code&gt;ARRouter&lt;/code&gt; is one of our &lt;a href=&#34;https://github.com/artsy/eigen/blob/904e8abfc11ce6ea4b6e81f0e02684b755a280c3/Artsy/Networking/ARRouter.m&#34;&gt;biggest classes&lt;/a&gt;, coming in at almost 1,000 lines of code. Whereas in Energy, it sits at a &lt;a href=&#34;https://github.com/artsy/energy/blob/e51529250ede359c781042f222d5836eb9e8a979/Classes/Util/App/ARRouter.m&#34;&gt;more reasonable&lt;/a&gt; 300 lines. Eidolon does not have an ARRouter, what gives?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Open Sourcing Energy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/06/open-sourcing-energy/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/06/open-sourcing-energy/</guid>
      <description>&lt;p&gt;The Artsy Mobile team is pretty aggressive in our stance on &lt;a href=&#34;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&#34;&gt;Open Source by Default&lt;/a&gt;. We&amp;rsquo;ve talked about it at &lt;a href=&#34;https://www.youtube.com/watch?v=2DvDeEZ0NDw&amp;amp;spfreload=10&#34;&gt;conferences&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=SjjvnrqDjpM&#34;&gt;around&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=zPbLYWmLPow&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;https://speakerdeck.com/orta/ios-at-artsy&#34;&gt;world&lt;/a&gt;, in &lt;a href=&#34;http://www.objc.io/issues/22-scale/artsy&#34;&gt;renowned magazines&lt;/a&gt; and on &lt;a href=&#34;http://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&#34;&gt;our blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth mentioning that we don&amp;rsquo;t just talk externally about Open Source. Internally, the Mobile team runs talks about Open Source for the rest of the Artsy staff. As well, we discuss the tooling and business implications of having our work in public repos. Artsy strives for an open culture, in this case the development team, on the whole, is just further along in the process.&lt;/p&gt;

&lt;p&gt;The Open Source app idea started with an experiment in the Summer of 2014, asking, &amp;ldquo;What does a truly Open Source App look like?&amp;rdquo; The outcome of that was our Swift Kiosk app, &lt;a href=&#34;https://github.com/artsy/eidolon/&#34;&gt;Eidolon&lt;/a&gt;. Open from day one. We took the knowledge from that and applied it to our public facing app, &lt;a href=&#34;https://github.com/artsy/eigen/&#34;&gt;Eigen&lt;/a&gt;. Open from day 806. That made 2/3rds of our apps Open Source.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to talk about our final app, &lt;a href=&#34;https://github.com/artsy/energy&#34;&gt;Energy&lt;/a&gt;. Open from day 1433 and ~3500 commits.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>