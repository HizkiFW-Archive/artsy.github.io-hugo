<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eidolon on Artsy Engineering</title>
    <link>https://hizkifw.github.io/artsy.github.io-hugo/categories/eidolon/</link>
    <description>Recent content in Eidolon on Artsy Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hizkifw.github.io/artsy.github.io-hugo/categories/eidolon/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Retrospective: Swift at Artsy</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/05/Retrospective-Swift-at-Artsy/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2017/02/05/Retrospective-Swift-at-Artsy/</guid>
      <description>&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://hizkifw.github.io/artsy.github.io-hugo/images/swift-in-rn/swift-in-react-native.svg&#34; style=&#34;width:300px;&#34;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Swift became public in June 2014, by August we had started using it in Artsy. By October, we had &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;Swift in production&lt;/a&gt; channelling hundreds of thousands of dollars in auction bids.&lt;/p&gt;

&lt;p&gt;It is pretty obvious that Swift is the future of native development on Apple platforms. It was a no-brainer to then build an &lt;a href=&#34;https://github.com/artsy/emergence&#34;&gt;Apple TV app&lt;/a&gt; in Swift, integrated Swift-support into our key app Eigen and built non-trivial parts of that &lt;a href=&#34;http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/&#34;&gt;application in Swift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We first started experimenting with React Native in February 2016, and by August 2016, we announced that &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2016/08/15/React-Native-at-Artsy/&#34;&gt;Artsy moved to React Native&lt;/a&gt; effectively meaning new code would be in JavaScript from here onwards.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re regularly asked &lt;em&gt;why&lt;/em&gt; we moved, and it was touched on briefly in our announcement but I&amp;rsquo;d like to dig in to this and try to cover a lot of our decision process. So, if you&amp;rsquo;re into understanding why a small team of iOS developers with decades of native experience switched to JavaScript, read on.&lt;/p&gt;

&lt;p&gt;This post will cover: &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#What.are.Artsy.s.apps.&#34;&gt;What are Artsy&amp;rsquo;s apps?&lt;/a&gt;, Swifts &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Swift.s.upsides&#34;&gt;positives&lt;/a&gt; and &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Native.Downsides&#34;&gt;negatives&lt;/a&gt; for us, &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#React.Native&#34;&gt;React Native&lt;/a&gt;, and our &lt;a href=&#34;https://hizkifw.github.io/artsy.github.io-hugo/blog/2017/02/05/Retrospective-Swift-at-Artsy/#React.Native..one.year.later&#34;&gt;1-year summary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Eidolon Deploy Process</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/08/eidolon-deploy-process/</link>
      <pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/10/08/eidolon-deploy-process/</guid>
      <description>&lt;p&gt;Since we &lt;a href=&#34;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&#34;&gt;originally built&lt;/a&gt; Eidolon – an auction bidding kiosk app – the project has largely remained in maintenance mode. Eidolon was one of the first projects that we used automated deploys for, and the deploy process has remained largely unchanged. I believe this stability of the deploy process is a testament to how well the automated deploys have gone.&lt;/p&gt;

&lt;p&gt;This post is going to detail the mechanics of automated deploys for an enterprise-distributed iOS application, discuss lessons we learned and applied to other projects&amp;rsquo; deploy processes, and describe some of the changes we&amp;rsquo;d like to make. Our project is entirely open source, so you can check out any part of the code on your own or &lt;a href=&#34;https://github.com/artsy/eidolon/issues/new&#34;&gt;open an issue&lt;/a&gt; with questions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Depedency Injection in Swift</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/27/dependency-injection-in-swift/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2016/06/27/dependency-injection-in-swift/</guid>
      <description>&lt;p&gt;Dependency Injection (DI) is a &lt;a href=&#34;http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html&#34;&gt;$25 word for a 5¢ idea&lt;/a&gt;, but it&amp;rsquo;s an idea that has become wholly foundation to how I write software. I want to take a look at some of the ways our team have been using DI in Swift.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cocoa Architecture: ARSwitchboard</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cocoa Architecture: ARRouter</title>
      <link>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/15/Cocoa-Architecture-Router-Pattern/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hizkifw.github.io/artsy.github.io-hugo/2015/08/15/Cocoa-Architecture-Router-Pattern/</guid>
      <description>&lt;p&gt;I want to talk about a pattern that we&amp;rsquo;ve been using for the last few years on the Artsy Mobile team. This pattern pre-dates me joining Artsy by a few weeks, and was introduced into our codebase by &lt;a href=&#34;http://90wpm.com&#34;&gt;Ben Jackson&lt;/a&gt;, this was the &lt;code&gt;ARRouter&lt;/code&gt;&amp;rsquo;s first method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;  + (NSURL *)newOAuthURLWithUsername:(NSString *)username password:(NSString *)password {
      NSDictionary *params = [[NSDictionary alloc] initWithObjectsAndKeys:
                              username, @&amp;quot;email&amp;quot;,
                              password, @&amp;quot;password&amp;quot;,
                              ARAuthClientID, @&amp;quot;client_id&amp;quot;,
                              ARAuthSecret, @&amp;quot;client_secret&amp;quot;,
                              @&amp;quot;credentials&amp;quot;, @&amp;quot;grant_type&amp;quot;,
                              nil];
      NSString *url_string = [[NSString alloc] initWithFormat:@&amp;quot;%@%@&amp;quot;, AROAuthURL, [params queryString]];
      NSURL *url = [ARRouter newURLWithPath:url_string];
      [url_string release];
      [params release];
      return url;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep, that&amp;rsquo;s pre-ARC, pre-Dictionary Literals, memory-managed code. We took this pattern and rolled with it for the next 4 years, this article is about where we&amp;rsquo;ve taken it.&lt;/p&gt;

&lt;p&gt;Within Eigen, &lt;code&gt;ARRouter&lt;/code&gt; is one of our &lt;a href=&#34;https://github.com/artsy/eigen/blob/904e8abfc11ce6ea4b6e81f0e02684b755a280c3/Artsy/Networking/ARRouter.m&#34;&gt;biggest classes&lt;/a&gt;, coming in at almost 1,000 lines of code. Whereas in Energy, it sits at a &lt;a href=&#34;https://github.com/artsy/energy/blob/e51529250ede359c781042f222d5836eb9e8a979/Classes/Util/App/ARRouter.m&#34;&gt;more reasonable&lt;/a&gt; 300 lines. Eidolon does not have an ARRouter, what gives?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>